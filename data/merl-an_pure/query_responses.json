{"sample_id":43,"responses":[{"class":"return","value":[{"start":{"line":4,"col":36},"end":{"line":4,"col":42}},{"start":{"line":7,"col":40},"end":{"line":7,"col":46}},{"start":{"line":11,"col":47},"end":{"line":11,"col":53}},{"start":{"line":16,"col":30},"end":{"line":16,"col":36}},{"start":{"line":24,"col":42},"end":{"line":24,"col":48}},{"start":{"line":28,"col":72},"end":{"line":28,"col":78}},{"start":{"line":31,"col":49},"end":{"line":31,"col":55}},{"start":{"line":35,"col":46},"end":{"line":35,"col":52}}],"notifications":[]}]}
{"sample_id":42,"responses":[{"class":"return","value":[],"notifications":[]}]}
{"sample_id":41,"responses":[{"class":"error","value":"Destruct not allowed on signature","notifications":[]}]}
{"sample_id":40,"responses":[{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/cmdliner/cmdliner.mli","pos":{"line":174,"col":2}},"notifications":[]}]}
{"sample_id":39,"responses":[{"class":"return","value":[{"start":{"line":41,"col":40},"end":{"line":41,"col":44}}],"notifications":[]}]}
{"sample_id":38,"responses":[{"class":"return","value":[{"start":{"line":19,"col":34},"end":{"line":19,"col":38},"type":"?deprecated:string ->\n?absent:string ->\n?docs:string ->\n?docv:string -> ?doc:string -> ?env:Cmd.Env.info -> string list -> info","tail":"no"},{"start":{"line":19,"col":34},"end":{"line":19,"col":38},"type":"?deprecated:string ->\n?absent:string ->\n?docs:string ->\n?docv:string -> ?doc:string -> ?env:Cmd.Env.info -> string list -> info","tail":"no"},{"start":{"line":19,"col":34},"end":{"line":19,"col":62},"type":"info","tail":"no"},{"start":{"line":19,"col":17},"end":{"line":19,"col":62},"type":"string t","tail":"no"},{"start":{"line":19,"col":9},"end":{"line":19,"col":62},"type":"string Term.t","tail":"no"},{"start":{"line":19,"col":4},"end":{"line":19,"col":63},"type":"string Term.t","tail":"no"},{"start":{"line":17,"col":2},"end":{"line":19,"col":63},"type":"[> `Proj_dir of string ] Term.t","tail":"no"},{"start":{"line":13,"col":2},"end":{"line":19,"col":63},"type":"[> `Proj_dir of string ] Term.t","tail":"no"}],"notifications":[]}]}
{"sample_id":37,"responses":[{"class":"return","value":[{"start":{"line":19,"col":21},"end":{"line":19,"col":27}},"(match string with | (_, _) -> _)"],"notifications":[]}]}
{"sample_id":36,"responses":[{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/cmdliner/cmdliner.mli","pos":{"line":917,"col":2}},"notifications":[]}]}
{"sample_id":35,"responses":[{"class":"return","value":[{"start":{"line":68,"col":32},"end":{"line":68,"col":43}},{"start":{"line":85,"col":8},"end":{"line":85,"col":19}}],"notifications":[]}]}
{"sample_id":34,"responses":[{"class":"return","value":[{"start":{"line":36,"col":17},"end":{"line":36,"col":27},"type":"int","tail":"no"},{"start":{"line":36,"col":17},"end":{"line":36,"col":27},"type":"int","tail":"no"},{"start":{"line":36,"col":12},"end":{"line":36,"col":28},"type":"float * int","tail":"no"},{"start":{"line":35,"col":12},"end":{"line":36,"col":28},"type":"float * int","tail":"no"},{"start":{"line":30,"col":12},"end":{"line":36,"col":28},"type":"float * int","tail":"no"},{"start":{"line":26,"col":8},"end":{"line":40,"col":30},"type":"float * int","tail":"no"},{"start":{"line":25,"col":53},"end":{"line":40,"col":30},"type":"Merl_an.File.t * Merl_an.Merlin.Query_type.t -> float * int","tail":"no"},{"start":{"line":25,"col":36},"end":{"line":40,"col":30},"type":"float * int -> Merl_an.File.t * Merl_an.Merlin.Query_type.t -> float * int","tail":"no"},{"start":{"line":25,"col":6},"end":{"line":49,"col":39},"type":"unit","tail":"no"},{"start":{"line":22,"col":2},"end":{"line":52,"col":13},"type":"unit","tail":"no"},{"start":{"line":21,"col":2},"end":{"line":52,"col":13},"type":"unit","tail":"no"},{"start":{"line":13,"col":2},"end":{"line":52,"col":13},"type":"unit","tail":"no"},{"start":{"line":12,"col":2},"end":{"line":52,"col":13},"type":"unit","tail":"no"},{"start":{"line":11,"col":2},"end":{"line":52,"col":13},"type":"unit","tail":"no"},{"start":{"line":10,"col":2},"end":{"line":52,"col":13},"type":"unit","tail":"no"},{"start":{"line":7,"col":2},"end":{"line":52,"col":13},"type":"unit","tail":"no"},{"start":{"line":6,"col":31},"end":{"line":52,"col":13},"type":"[< `Extensions of string list ] -> unit","tail":"no"},{"start":{"line":6,"col":4},"end":{"line":52,"col":13},"type":"[< `Query_types of Merl_an.Merlin.Query_type.t list ] ->\n[< `Extensions of string list ] -> unit","tail":"no"},{"start":{"line":5,"col":38},"end":{"line":52,"col":13},"type":"[< `Sample_size of int ] ->\n[< `Query_types of Merl_an.Merlin.Query_type.t list ] ->\n[< `Extensions of string list ] -> unit","tail":"no"},{"start":{"line":5,"col":25},"end":{"line":52,"col":13},"type":"[< `Cold of bool ] ->\n[< `Sample_size of int ] ->\n[< `Query_types of Merl_an.Merlin.Query_type.t list ] ->\n[< `Extensions of string list ] -> unit","tail":"no"},{"start":{"line":5,"col":4},"end":{"line":52,"col":13},"type":"[< `Dir_name of string option ] ->\n[< `Cold of bool ] ->\n[< `Sample_size of int ] ->\n[< `Query_types of Merl_an.Merlin.Query_type.t list ] ->\n[< `Extensions of string list ] -> unit","tail":"no"},{"start":{"line":4,"col":59},"end":{"line":52,"col":13},"type":"[< `Proj_dir of string ] ->\n[< `Dir_name of string option ] ->\n[< `Cold of bool ] ->\n[< `Sample_size of int ] ->\n[< `Query_types of Merl_an.Merlin.Query_type.t list ] ->\n[< `Extensions of string list ] -> unit","tail":"no"},{"start":{"line":4,"col":37},"end":{"line":52,"col":13},"type":"[< `Merlin of string ] ->\n[< `Proj_dir of string ] ->\n[< `Dir_name of string option ] ->\n[< `Cold of bool ] ->\n[< `Sample_size of int ] ->\n[< `Query_types of Merl_an.Merlin.Query_type.t list ] ->\n[< `Extensions of string list ] -> unit","tail":"no"},{"start":{"line":4,"col":18},"end":{"line":52,"col":13},"type":"[< `Repeats of int ] ->\n[< `Merlin of string ] ->\n[< `Proj_dir of string ] ->\n[< `Dir_name of string option ] ->\n[< `Cold of bool ] ->\n[< `Sample_size of int ] ->\n[< `Query_types of Merl_an.Merlin.Query_type.t list ] ->\n[< `Extensions of string list ] -> unit","tail":"no"},{"start":{"line":4,"col":12},"end":{"line":52,"col":13},"type":"pure:bool ->\n[< `Repeats of int ] ->\n[< `Merlin of string ] ->\n[< `Proj_dir of string ] ->\n[< `Dir_name of string option ] ->\n[< `Cold of bool ] ->\n[< `Sample_size of int ] ->\n[< `Query_types of Merl_an.Merlin.Query_type.t list ] ->\n[< `Extensions of string list ] -> unit","tail":"no"}],"notifications":[]}]}
{"sample_id":33,"responses":[{"class":"error","value":"Destruct not allowed on arrow type","notifications":[]}]}
{"sample_id":32,"responses":[{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/merl-an/bin/args.mli","pos":{"line":4,"col":0}},"notifications":[]}]}
{"sample_id":31,"responses":[{"class":"return","value":[{"start":{"line":49,"col":12},"end":{"line":49,"col":26}}],"notifications":[]}]}
{"sample_id":30,"responses":[{"class":"return","value":[{"start":{"line":31,"col":15},"end":{"line":31,"col":16},"type":"int","tail":"no"},{"start":{"line":31,"col":10},"end":{"line":31,"col":16},"type":"'a","tail":"no"},{"start":{"line":30,"col":10},"end":{"line":31,"col":16},"type":"'a","tail":"no"},{"start":{"line":23,"col":11},"end":{"line":31,"col":17},"type":"'a","tail":"no"},{"start":{"line":22,"col":2},"end":{"line":38,"col":16},"type":"'a","tail":"no"},{"start":{"line":21,"col":2},"end":{"line":38,"col":16},"type":"'a","tail":"no"},{"start":{"line":20,"col":29},"end":{"line":38,"col":16},"type":"string -> 'a","tail":"no"},{"start":{"line":20,"col":26},"end":{"line":38,"col":16},"type":"f:(in_channel -> 'a) -> string -> 'a","tail":"no"}],"notifications":[]}]}
{"sample_id":29,"responses":[{"class":"return","value":[{"start":{"line":27,"col":10},"end":{"line":27,"col":78}},"(match Format.eprintf\n        (CamlinternalFormatBasics.Format\n           ((CamlinternalFormatBasics.String_literal\n               (\"merlin exited with code \",\n                 (CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      (CamlinternalFormatBasics.Char_literal\n                         ('\\n',\n                           (CamlinternalFormatBasics.Flush\n                              CamlinternalFormatBasics.End_of_format))))))),\n             \"merlin exited with code %s\\n%!\")) (string_of_int code)\nwith\n| () -> _)"],"notifications":[]}]}
{"sample_id":28,"responses":[{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/printf.ml","pos":{"line":41,"col":4}},"notifications":[]}]}
{"sample_id":27,"responses":[{"class":"return","value":[{"start":{"line":40,"col":15},"end":{"line":40,"col":25}},{"start":{"line":41,"col":29},"end":{"line":41,"col":39}}],"notifications":[]}]}
{"sample_id":26,"responses":[{"class":"return","value":[{"start":{"line":23,"col":10},"end":{"line":23,"col":24},"type":"('a -> 'b -> 'a) -> 'a -> 'b list -> 'a","tail":"no"},{"start":{"line":23,"col":10},"end":{"line":23,"col":24},"type":"(bool -> string -> bool) -> bool -> string list -> bool","tail":"no"},{"start":{"line":23,"col":10},"end":{"line":25,"col":28},"type":"bool","tail":"no"},{"start":{"line":22,"col":8},"end":{"line":27,"col":44},"type":"t list","tail":"no"},{"start":{"line":21,"col":16},"end":{"line":27,"col":44},"type":"t list -> t list","tail":"no"},{"start":{"line":21,"col":6},"end":{"line":27,"col":45},"type":"t -> t list -> t list","tail":"no"},{"start":{"line":20,"col":4},"end":{"line":28,"col":17},"type":"(t list, [> Rresult.R.msg ]) result","tail":"no"},{"start":{"line":19,"col":2},"end":{"line":38,"col":17},"type":"(t list, [> Rresult.R.msg ]) result","tail":"no"},{"start":{"line":11,"col":2},"end":{"line":38,"col":17},"type":"(t list, [> Rresult.R.msg ]) result","tail":"no"},{"start":{"line":10,"col":2},"end":{"line":38,"col":17},"type":"(t list, [> Rresult.R.msg ]) result","tail":"no"},{"start":{"line":9,"col":26},"end":{"line":38,"col":17},"type":"t -> (t list, [> Rresult.R.msg ]) result","tail":"no"},{"start":{"line":9,"col":14},"end":{"line":38,"col":17},"type":"extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result","tail":"no"}],"notifications":[]}]}
{"sample_id":25,"responses":[{"class":"error","value":"Destruct not allowed on arrow type","notifications":[]}]}
{"sample_id":24,"responses":[{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/merl-an/lib/file.ml","pos":{"line":40,"col":15}},"notifications":[]}]}
{"sample_id":23,"responses":[{"class":"return","value":[{"start":{"line":100,"col":22},"end":{"line":100,"col":38}},{"start":{"line":100,"col":22},"end":{"line":100,"col":38}}],"notifications":[]}]}
{"sample_id":22,"responses":[{"class":"return","value":[{"start":{"line":87,"col":13},"end":{"line":87,"col":37},"type":"string","tail":"no"},{"start":{"line":84,"col":10},"end":{"line":87,"col":38},"type":"string","tail":"no"},{"start":{"line":83,"col":8},"end":{"line":87,"col":38},"type":"Logs.t","tail":"no"},{"start":{"line":82,"col":6},"end":{"line":89,"col":15},"type":"(string, Logs.t) result","tail":"no"},{"start":{"line":65,"col":4},"end":{"line":89,"col":15},"type":"(string, Logs.t) result","tail":"no"},{"start":{"line":64,"col":4},"end":{"line":89,"col":15},"type":"(string, Logs.t) result","tail":"no"},{"start":{"line":63,"col":21},"end":{"line":89,"col":15},"type":"proj_path:Fpath.t -> (string, Logs.t) result","tail":"no"},{"start":{"line":47,"col":18},"end":{"line":95,"col":3},"type":"sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string option;\n    total_time : float option;\n    query_time : float option;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val get_commit_sha : proj_path:Fpath.t -> (string, Logs.t) result\n  val get_date : unit -> string\nend","tail":"no"},{"start":{"line":47,"col":0},"end":{"line":95,"col":3},"type":"sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string option;\n    total_time : float option;\n    query_time : float option;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val get_commit_sha : proj_path:Fpath.t -> (string, Logs.t) result\n  val get_date : unit -> string\nend","tail":"no"}],"notifications":[]}]}
{"sample_id":21,"responses":[{"class":"error","value":"Destruct not allowed on non-destructible type: exn","notifications":[]}]}
{"sample_id":20,"responses":[{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/merl-an/lib/data.ml","pos":{"line":32,"col":2}},"notifications":[]}]}
{"sample_id":19,"responses":[{"class":"return","value":[{"start":{"line":19,"col":56},"end":{"line":19,"col":62}}],"notifications":[]}]}
{"sample_id":18,"responses":[{"class":"return","value":[],"notifications":[]}]}
{"sample_id":17,"responses":[{"class":"error","value":"Nothing to do","notifications":[]}]}
{"sample_id":16,"responses":[{"class":"return","value":{"file":"/home/sonja/Documents/Tarides/projects/merl-an/lib/data.ml","pos":{"line":160,"col":0}},"notifications":[]}]}
{"sample_id":15,"responses":[{"class":"return","value":[{"start":{"line":11,"col":20},"end":{"line":11,"col":24}},{"start":{"line":11,"col":42},"end":{"line":11,"col":46}}],"notifications":[]}]}
{"sample_id":14,"responses":[{"class":"return","value":[],"notifications":[]}]}
{"sample_id":13,"responses":[{"class":"error","value":"Destruct not allowed on signature","notifications":[]}]}
{"sample_id":12,"responses":[{"class":"return","value":"\"list\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[]}]}
{"sample_id":11,"responses":[{"class":"return","value":[{"start":{"line":36,"col":41},"end":{"line":36,"col":45}},{"start":{"line":44,"col":8},"end":{"line":44,"col":12}}],"notifications":[]}]}
{"sample_id":10,"responses":[{"class":"return","value":[{"start":{"line":33,"col":42},"end":{"line":33,"col":47},"type":"bool","tail":"no"},{"start":{"line":33,"col":42},"end":{"line":33,"col":47},"type":"bool","tail":"no"},{"start":{"line":33,"col":30},"end":{"line":33,"col":48},"type":"(location * longident option) Reservoir.t * bool","tail":"no"},{"start":{"line":33,"col":11},"end":{"line":33,"col":48},"type":"(location * longident option) Reservoir.t * bool","tail":"no"},{"start":{"line":28,"col":6},"end":{"line":33,"col":48},"type":"(location * longident option) Reservoir.t * bool","tail":"no"},{"start":{"line":27,"col":25},"end":{"line":33,"col":48},"type":"(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool","tail":"no"},{"start":{"line":27,"col":23},"end":{"line":33,"col":48},"type":"expression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool","tail":"no"},{"start":{"line":27,"col":23},"end":{"line":33,"col":48},"type":"((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\nexpression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool","tail":"no"},{"start":{"line":27,"col":4},"end":{"line":33,"col":48},"type":"expression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool","tail":"no"},{"start":{"line":13,"col":2},"end":{"line":50,"col":5},"type":"((location * longident option) Reservoir.t * bool) Ast_traverse.fold","tail":"no"},{"start":{"line":12,"col":2},"end":{"line":50,"col":5},"type":"((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold","tail":"no"},{"start":{"line":11,"col":33},"end":{"line":50,"col":5},"type":"Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold","tail":"no"},{"start":{"line":11,"col":19},"end":{"line":50,"col":5},"type":"random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold","tail":"no"}],"notifications":[]}]}
{"sample_id":9,"responses":[{"class":"return","value":[{"start":{"line":30,"col":52},"end":{"line":30,"col":53}},"(match e with | { pexp_desc; pexp_loc; pexp_loc_stack; pexp_attributes } -> _)"],"notifications":[]}]}
{"sample_id":8,"responses":[{"class":"return","value":"\"true\" is a builtin, and it is therefore impossible to jump to its definition","notifications":[]}]}
{"sample_id":7,"responses":[{"class":"return","value":[{"start":{"line":32,"col":24},"end":{"line":32,"col":33}}],"notifications":[]}]}
{"sample_id":6,"responses":[{"class":"return","value":[{"start":{"line":16,"col":43},"end":{"line":16,"col":44},"type":"'a -> 'b * 'c -> 'a","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":44},"type":"'a -> 'b * 'c -> 'a","tail":"no"},{"start":{"line":16,"col":43},"end":{"line":16,"col":61},"type":"'a","tail":"no"},{"start":{"line":16,"col":38},"end":{"line":16,"col":61},"type":"'a -> 'b","tail":"no"},{"start":{"line":16,"col":23},"end":{"line":16,"col":62},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":16,"col":8},"end":{"line":16,"col":75},"type":"'a","tail":"no"},{"start":{"line":15,"col":21},"end":{"line":16,"col":75},"type":"'a -> 'b","tail":"no"},{"start":{"line":15,"col":6},"end":{"line":16,"col":76},"type":"'a -> 'b -> 'a","tail":"no"},{"start":{"line":14,"col":4},"end":{"line":17,"col":13},"type":"'a","tail":"no"},{"start":{"line":13,"col":38},"end":{"line":17,"col":13},"type":"('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":32},"end":{"line":17,"col":13},"type":"init:'a -> ('a -> 'b * 'c -> 'a) -> 'a","tail":"no"},{"start":{"line":13,"col":28},"end":{"line":17,"col":13},"type":"l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b","tail":"no"},{"start":{"line":13,"col":24},"end":{"line":17,"col":13},"type":"l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c","tail":"no"},{"start":{"line":10,"col":14},"end":{"line":20,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\n  val is_empty : 'a list -> bool\nend","tail":"no"},{"start":{"line":10,"col":0},"end":{"line":20,"col":3},"type":"sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\n  val is_empty : 'a list -> bool\nend","tail":"no"}],"notifications":[]}]}
{"sample_id":5,"responses":[{"class":"error","value":"Destruct not allowed on arrow type","notifications":[]}]}
{"sample_id":4,"responses":[{"class":"return","value":{"file":"/home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/location.ml","pos":{"line":4,"col":0}},"notifications":[]}]}
{"sample_id":3,"responses":[{"class":"return","value":[{"start":{"line":55,"col":45},"end":{"line":55,"col":46}},{"start":{"line":61,"col":16},"end":{"line":61,"col":17}},{"start":{"line":64,"col":25},"end":{"line":64,"col":26}},{"start":{"line":67,"col":6},"end":{"line":67,"col":7}},{"start":{"line":85,"col":16},"end":{"line":85,"col":17}}],"notifications":[]}]}
{"sample_id":2,"responses":[{"class":"return","value":[{"start":{"line":89,"col":14},"end":{"line":89,"col":15},"type":"'a array","tail":"no"},{"start":{"line":89,"col":14},"end":{"line":89,"col":15},"type":"'a array","tail":"no"},{"start":{"line":89,"col":14},"end":{"line":89,"col":19},"type":"'a","tail":"no"},{"start":{"line":89,"col":10},"end":{"line":89,"col":19},"type":"'a array -> 'a","tail":"no"},{"start":{"line":89,"col":8},"end":{"line":89,"col":19},"type":"int -> 'a array -> 'a","tail":"no"}],"notifications":[]}]}
{"sample_id":1,"responses":[{"class":"return","value":[{"start":{"line":79,"col":36},"end":{"line":79,"col":37}},"(match 1 with | 0 -> _ | _ -> _)"],"notifications":[]}]}
{"sample_id":0,"responses":[{"class":"return","value":"Already at definition point","notifications":[]}]}