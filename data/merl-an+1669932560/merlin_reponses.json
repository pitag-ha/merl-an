{
    "sample_id": 1079,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 21,
                    "col": 6
                },
                "end": {
                    "line": 21,
                    "col": 8
                }
            },
            {
                "start": {
                    "line": 22,
                    "col": 10
                },
                "end": {
                    "line": 22,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 24,
                    "col": 34
                },
                "end": {
                    "line": 24,
                    "col": 36
                }
            },
            {
                "start": {
                    "line": 33,
                    "col": 36
                },
                "end": {
                    "line": 33,
                    "col": 38
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1078,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 53,
                    "col": 9
                },
                "end": {
                    "line": 53,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 54,
                    "col": 48
                },
                "end": {
                    "line": 54,
                    "col": 52
                }
            },
            {
                "start": {
                    "line": 56,
                    "col": 4
                },
                "end": {
                    "line": 56,
                    "col": 8
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1077,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 111,
                    "col": 14
                },
                "end": {
                    "line": 111,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 111,
                    "col": 27
                },
                "end": {
                    "line": 111,
                    "col": 34
                }
            },
            {
                "start": {
                    "line": 118,
                    "col": 14
                },
                "end": {
                    "line": 118,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 118,
                    "col": 27
                },
                "end": {
                    "line": 118,
                    "col": 34
                }
            },
            {
                "start": {
                    "line": 123,
                    "col": 14
                },
                "end": {
                    "line": 123,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 123,
                    "col": 27
                },
                "end": {
                    "line": 123,
                    "col": 34
                }
            },
            {
                "start": {
                    "line": 128,
                    "col": 14
                },
                "end": {
                    "line": 128,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 128,
                    "col": 27
                },
                "end": {
                    "line": 128,
                    "col": 34
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 21,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1076,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 10
                },
                "end": {
                    "line": 27,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 30,
                    "col": 10
                },
                "end": {
                    "line": 30,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1075,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 14,
                    "col": 9
                }
            },
            {
                "start": {
                    "line": 18,
                    "col": 60
                },
                "end": {
                    "line": 18,
                    "col": 65
                }
            },
            {
                "start": {
                    "line": 54,
                    "col": 42
                },
                "end": {
                    "line": 54,
                    "col": 47
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1074,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 109,
                    "col": 11
                },
                "end": {
                    "line": 109,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 115,
                    "col": 11
                },
                "end": {
                    "line": 115,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 121,
                    "col": 11
                },
                "end": {
                    "line": 121,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 126,
                    "col": 11
                },
                "end": {
                    "line": 126,
                    "col": 31
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1073,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 103,
                    "col": 30
                },
                "end": {
                    "line": 103,
                    "col": 33
                }
            },
            {
                "start": {
                    "line": 111,
                    "col": 10
                },
                "end": {
                    "line": 111,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 116,
                    "col": 37
                },
                "end": {
                    "line": 116,
                    "col": 40
                }
            },
            {
                "start": {
                    "line": 118,
                    "col": 10
                },
                "end": {
                    "line": 118,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 123,
                    "col": 10
                },
                "end": {
                    "line": 123,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 128,
                    "col": 10
                },
                "end": {
                    "line": 128,
                    "col": 13
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 21,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1072,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 110,
                    "col": 31
                },
                "end": {
                    "line": 110,
                    "col": 36
                }
            },
            {
                "start": {
                    "line": 117,
                    "col": 31
                },
                "end": {
                    "line": 117,
                    "col": 36
                }
            },
            {
                "start": {
                    "line": 122,
                    "col": 31
                },
                "end": {
                    "line": 122,
                    "col": 36
                }
            },
            {
                "start": {
                    "line": 127,
                    "col": 31
                },
                "end": {
                    "line": 127,
                    "col": 36
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1071,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 55,
                    "col": 6
                },
                "end": {
                    "line": 55,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 56,
                    "col": 20
                },
                "end": {
                    "line": 56,
                    "col": 27
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1070,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 135,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1069,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 103,
                    "col": 34
                },
                "end": {
                    "line": 103,
                    "col": 40
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 10
                },
                "end": {
                    "line": 108,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 114,
                    "col": 10
                },
                "end": {
                    "line": 114,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 120,
                    "col": 68
                },
                "end": {
                    "line": 120,
                    "col": 74
                }
            },
            {
                "start": {
                    "line": 125,
                    "col": 73
                },
                "end": {
                    "line": 125,
                    "col": 79
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1068,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 3,
                    "col": 0
                },
                "end": {
                    "line": 3,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 3,
                    "col": 0
                },
                "end": {
                    "line": 3,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 3,
                    "col": 0
                },
                "end": {
                    "line": 3,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 3,
                    "col": 0
                },
                "end": {
                    "line": 3,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 0
                },
                "end": {
                    "line": 12,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 2
                },
                "end": {
                    "line": 61,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 2
                },
                "end": {
                    "line": 61,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 2
                },
                "end": {
                    "line": 61,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 2
                },
                "end": {
                    "line": 61,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 2
                },
                "end": {
                    "line": 61,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 69,
                    "col": 2
                },
                "end": {
                    "line": 69,
                    "col": 70
                }
            },
            {
                "start": {
                    "line": 69,
                    "col": 2
                },
                "end": {
                    "line": 69,
                    "col": 70
                }
            },
            {
                "start": {
                    "line": 69,
                    "col": 2
                },
                "end": {
                    "line": 69,
                    "col": 70
                }
            },
            {
                "start": {
                    "line": 69,
                    "col": 2
                },
                "end": {
                    "line": 69,
                    "col": 70
                }
            },
            {
                "start": {
                    "line": 69,
                    "col": 2
                },
                "end": {
                    "line": 69,
                    "col": 70
                }
            },
            {
                "start": {
                    "line": 69,
                    "col": 2
                },
                "end": {
                    "line": 69,
                    "col": 70
                }
            },
            {
                "start": {
                    "line": 74,
                    "col": 30
                },
                "end": {
                    "line": 74,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 75,
                    "col": 51
                },
                "end": {
                    "line": 75,
                    "col": 52
                }
            },
            {
                "start": {
                    "line": 76,
                    "col": 39
                },
                "end": {
                    "line": 76,
                    "col": 40
                }
            },
            {
                "start": {
                    "line": 77,
                    "col": 35
                },
                "end": {
                    "line": 77,
                    "col": 36
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1067,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 110,
                    "col": 11
                },
                "end": {
                    "line": 110,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 116,
                    "col": 11
                },
                "end": {
                    "line": 116,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 117,
                    "col": 11
                },
                "end": {
                    "line": 117,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 122,
                    "col": 11
                },
                "end": {
                    "line": 122,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 127,
                    "col": 11
                },
                "end": {
                    "line": 127,
                    "col": 30
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1066,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 6
                },
                "end": {
                    "line": 38,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 93,
                    "col": 19
                },
                "end": {
                    "line": 93,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 94,
                    "col": 15
                },
                "end": {
                    "line": 94,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 95,
                    "col": 11
                },
                "end": {
                    "line": 95,
                    "col": 19
                }
            },
            {
                "start": {
                    "line": 146,
                    "col": 16
                },
                "end": {
                    "line": 146,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1065,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 139,
                    "col": 18
                },
                "end": {
                    "line": 139,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 143,
                    "col": 36
                },
                "end": {
                    "line": 143,
                    "col": 40
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1064,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 48,
                    "col": 11
                },
                "end": {
                    "line": 48,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 51,
                    "col": 9
                },
                "end": {
                    "line": 51,
                    "col": 19
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 3,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1063,
    "merlin_reply": {
        "class": "exception",
        "value": "Not_found\nRaised at Ocaml_typing__Ident.find_same in file \"src/ocaml/typing/ident.ml\", line 263, characters 6-21\nCalled from Ocaml_typing__Env.IdTbl.find_same in file \"src/ocaml/typing/env.ml\", line 380, characters 10-40\nRe-raised at Ocaml_typing__Env.IdTbl.find_same in file \"src/ocaml/typing/env.ml\", line 385, characters 21-30\nCalled from Ocaml_typing__Env.find_same_module in file \"src/ocaml/typing/env.ml\", line 820, characters 8-30\nCalled from Ocaml_typing__Env.find_ident_module in file \"src/ocaml/typing/env.ml\", line 1036, characters 8-39\nCalled from Ocaml_typing__Env.find_module_components in file \"src/ocaml/typing/env.ml\", line 1043, characters 17-43\nCalled from Ocaml_typing__Env.find_structure_components in file \"src/ocaml/typing/env.ml\", line 1053, characters 23-56\nCalled from Ocaml_typing__Env.find_type_full in file \"src/ocaml/typing/env.ml\", line 1114, characters 15-46\nCalled from Ocaml_typing__Env.find_type in file \"src/ocaml/typing/env.ml\" (inlined), line 1223, characters 2-24\nCalled from Merlin_analysis__Browse_tree.normalize_type_expr in file \"src/analysis/browse_tree.ml\", line 66, characters 28-52\nCalled from Merlin_analysis__Browse_tree.same_constructor.get_decls in file \"src/analysis/browse_tree.ml\", line 84, characters 17-57\nCalled from Merlin_analysis__Browse_tree.same_constructor in file \"src/analysis/browse_tree.ml\", line 93, characters 12-23\nCalled from Merlin_analysis__Browse_tree.all_constructor_occurrences.aux in file \"src/analysis/browse_tree.ml\", line 118, characters 28-70\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Stdlib__List.fold_left in file \"list.ml\", line 121, characters 24-34\nCalled from Query_commands.dispatch.constructor_occurrence in file \"src/frontend/query_commands.ml\", line 827, characters 15-72\nCalled from Dune__exe__New_commands.run in file \"src/frontend/ocamlmerlin/new/new_commands.ml\", line 65, characters 15-53\nCalled from Merlin_utils__Std.let_ref in file \"src/utils/std.ml\", line 690, characters 8-12\nRe-raised at Merlin_utils__Std.let_ref in file \"src/utils/std.ml\", line 692, characters 30-39\nCalled from Merlin_utils__Misc.try_finally in file \"src/utils/misc.ml\", line 45, characters 8-15\nRe-raised at Merlin_utils__Misc.try_finally in file \"src/utils/misc.ml\", line 62, characters 10-24\nCalled from Stdlib__Fun.protect in file \"fun.ml\", line 33, characters 8-15\nRe-raised at Stdlib__Fun.protect in file \"fun.ml\", line 38, characters 6-52\nCalled from Merlin_kernel__Mocaml.with_state in file \"src/kernel/mocaml.ml\", line 18, characters 8-38\nRe-raised at Merlin_kernel__Mocaml.with_state in file \"src/kernel/mocaml.ml\", line 20, characters 42-53\nCalled from Dune__exe__New_merlin.run.(fun) in file \"src/frontend/ocamlmerlin/new/new_merlin.ml\", line 101, characters 14-110\n",
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1062,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 41,
                    "col": 6
                },
                "end": {
                    "line": 41,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 42,
                    "col": 25
                },
                "end": {
                    "line": 42,
                    "col": 26
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1061,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 103,
                    "col": 30
                },
                "end": {
                    "line": 103,
                    "col": 33
                }
            },
            {
                "start": {
                    "line": 111,
                    "col": 10
                },
                "end": {
                    "line": 111,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 116,
                    "col": 37
                },
                "end": {
                    "line": 116,
                    "col": 40
                }
            },
            {
                "start": {
                    "line": 118,
                    "col": 10
                },
                "end": {
                    "line": 118,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 123,
                    "col": 10
                },
                "end": {
                    "line": 123,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 128,
                    "col": 10
                },
                "end": {
                    "line": 128,
                    "col": 13
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1060,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 53,
                    "col": 9
                },
                "end": {
                    "line": 53,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 54,
                    "col": 48
                },
                "end": {
                    "line": 54,
                    "col": 52
                }
            },
            {
                "start": {
                    "line": 56,
                    "col": 4
                },
                "end": {
                    "line": 56,
                    "col": 8
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1059,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 110,
                    "col": 11
                },
                "end": {
                    "line": 110,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 116,
                    "col": 11
                },
                "end": {
                    "line": 116,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 117,
                    "col": 11
                },
                "end": {
                    "line": 117,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 122,
                    "col": 11
                },
                "end": {
                    "line": 122,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 127,
                    "col": 11
                },
                "end": {
                    "line": 127,
                    "col": 30
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1058,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 71,
                    "col": 20
                },
                "end": {
                    "line": 71,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 79,
                    "col": 13
                },
                "end": {
                    "line": 79,
                    "col": 19
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 1057,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 109,
                    "col": 11
                },
                "end": {
                    "line": 109,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 115,
                    "col": 11
                },
                "end": {
                    "line": 115,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 121,
                    "col": 11
                },
                "end": {
                    "line": 121,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 126,
                    "col": 11
                },
                "end": {
                    "line": 126,
                    "col": 31
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1056,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 6
                },
                "end": {
                    "line": 38,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 93,
                    "col": 19
                },
                "end": {
                    "line": 93,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 94,
                    "col": 15
                },
                "end": {
                    "line": 94,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 95,
                    "col": 11
                },
                "end": {
                    "line": 95,
                    "col": 19
                }
            },
            {
                "start": {
                    "line": 146,
                    "col": 16
                },
                "end": {
                    "line": 146,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1055,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 24,
                    "col": 12
                },
                "end": {
                    "line": 24,
                    "col": 33
                }
            },
            {
                "start": {
                    "line": 33,
                    "col": 14
                },
                "end": {
                    "line": 33,
                    "col": 35
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1054,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 38,
                    "col": 15
                },
                "end": {
                    "line": 38,
                    "col": 16
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 3,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1053,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 110,
                    "col": 31
                },
                "end": {
                    "line": 110,
                    "col": 36
                }
            },
            {
                "start": {
                    "line": 117,
                    "col": 31
                },
                "end": {
                    "line": 117,
                    "col": 36
                }
            },
            {
                "start": {
                    "line": 122,
                    "col": 31
                },
                "end": {
                    "line": 122,
                    "col": 36
                }
            },
            {
                "start": {
                    "line": 127,
                    "col": 31
                },
                "end": {
                    "line": 127,
                    "col": 36
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1052,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 6,
                    "col": 11
                },
                "end": {
                    "line": 6,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1051,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1050,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 45,
                    "col": 10
                },
                "end": {
                    "line": 45,
                    "col": 20
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1049,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 135,
                    "col": 38
                },
                "end": {
                    "line": 135,
                    "col": 42
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 135,
                    "col": 38
                },
                "end": {
                    "line": 135,
                    "col": 42
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 135,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 54
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 135,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 132,
                    "col": 2
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 50
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 45
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 39
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 27
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "query_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 15
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "query_time:float ->\nquery_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1048,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 118,
                    "col": 27
                },
                "end": {
                    "line": 118,
                    "col": 34
                },
                "type": "Format.formatter -> File.t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 118,
                    "col": 27
                },
                "end": {
                    "line": 118,
                    "col": 34
                },
                "type": "Format.formatter -> File.t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 8
                },
                "end": {
                    "line": 118,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 104,
                    "col": 4
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 34
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 29
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 23
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "file:File.t -> loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 11
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "query_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 98,
                    "col": 13
                },
                "end": {
                    "line": 129,
                    "col": 3
                },
                "type": "sig\n  type t = string\n  val to_yojson : 'a -> [> `String of 'a ]\n  val make :\n    query_type:Query_type.t ->\n    file:File.t -> loc:Warnings.loc -> t/2 -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 98,
                    "col": 0
                },
                "end": {
                    "line": 129,
                    "col": 3
                },
                "type": "sig\n  type t = string\n  val to_yojson : 'a -> [> `String of 'a ]\n  val make :\n    query_type:Query_type.t ->\n    file:File.t -> loc:Warnings.loc -> t/2 -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1047,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 146,
                    "col": 25
                },
                "end": {
                    "line": 146,
                    "col": 74
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 16
                },
                "end": {
                    "line": 146,
                    "col": 74
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 144,
                    "col": 6
                },
                "end": {
                    "line": 146,
                    "col": 74
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 142,
                    "col": 14
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 140,
                    "col": 2
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 139,
                    "col": 16
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "t -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1046,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 123,
                    "col": 35
                },
                "end": {
                    "line": 123,
                    "col": 39
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 123,
                    "col": 35
                },
                "end": {
                    "line": 123,
                    "col": 39
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 120,
                    "col": 8
                },
                "end": {
                    "line": 123,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 104,
                    "col": 4
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 34
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 29
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 23
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "file:File.t -> loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 11
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "query_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 98,
                    "col": 13
                },
                "end": {
                    "line": 129,
                    "col": 3
                },
                "type": "sig\n  type t = string\n  val to_yojson : 'a -> [> `String of 'a ]\n  val make :\n    query_type:Query_type.t ->\n    file:File.t -> loc:Warnings.loc -> t/2 -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 98,
                    "col": 0
                },
                "end": {
                    "line": 129,
                    "col": 3
                },
                "type": "sig\n  type t = string\n  val to_yojson : 'a -> [> `String of 'a ]\n  val make :\n    query_type:Query_type.t ->\n    file:File.t -> loc:Warnings.loc -> t/2 -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1045,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 36
                },
                "end": {
                    "line": 33,
                    "col": 38
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 36
                },
                "end": {
                    "line": 33,
                    "col": 38
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 13
                },
                "end": {
                    "line": 33,
                    "col": 39
                },
                "type": "Unix.process_status",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 6
                },
                "end": {
                    "line": 33,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 6
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 29
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "f:(in_channel -> 'a) -> string -> 'a",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1044,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 2
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 2
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 14
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "frontend -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 9
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "Fpath.t -> frontend -> t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1043,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 140,
                    "col": 8
                },
                "end": {
                    "line": 140,
                    "col": 16
                },
                "type": "frontend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 140,
                    "col": 8
                },
                "end": {
                    "line": 140,
                    "col": 16
                },
                "type": "frontend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 140,
                    "col": 2
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 139,
                    "col": 16
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "t -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1042,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 75,
                    "col": 39
                },
                "end": {
                    "line": 75,
                    "col": 50
                },
                "type": "node",
                "tail": "no"
            },
            {
                "start": {
                    "line": 75,
                    "col": 39
                },
                "end": {
                    "line": 75,
                    "col": 50
                },
                "type": "node",
                "tail": "no"
            },
            {
                "start": {
                    "line": 75,
                    "col": 39
                },
                "end": {
                    "line": 75,
                    "col": 52
                },
                "type": "node list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 75,
                    "col": 25
                },
                "end": {
                    "line": 75,
                    "col": 52
                },
                "type": "node list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 73,
                    "col": 6
                },
                "end": {
                    "line": 77,
                    "col": 36
                },
                "type": "node list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 4
                },
                "end": {
                    "line": 79,
                    "col": 32
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 71,
                    "col": 20
                },
                "end": {
                    "line": 79,
                    "col": 32
                },
                "type": "node -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 71,
                    "col": 17
                },
                "end": {
                    "line": 79,
                    "col": 32
                },
                "type": "t -> node -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 20
                },
                "end": {
                    "line": 80,
                    "col": 3
                },
                "type": "sig\n  type t = Locate | Case_analysis | Type_enclosing | Occurrences\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val all : t list\n  val to_string : t -> string\n  type node = Longident | Expression | Var_pattern\n  val node_to_yojson : node -> Yojson.Safe.t\n  val node_of_yojson :\n    Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val _ : node -> Yojson.Safe.t\n  val _ : Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val has_target : t -> node -> bool\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 20
                },
                "end": {
                    "line": 80,
                    "col": 3
                },
                "type": "sig\n  type t = Locate | Case_analysis | Type_enclosing | Occurrences\n  val to_yojson : t -> Yojson.Safe.t\n  val all : t list\n  val to_string : t -> string\n  type node = Longident | Expression | Var_pattern\n  val node_to_yojson : node -> Yojson.Safe.t\n  val node_of_yojson :\n    Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val _ : Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val has_target : t -> node -> bool\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 0
                },
                "end": {
                    "line": 80,
                    "col": 3
                },
                "type": "sig\n  type t = Locate | Case_analysis | Type_enclosing | Occurrences\n  val to_yojson : t -> Yojson.Safe.t\n  val all : t list\n  val to_string : t -> string\n  type node = Longident | Expression | Var_pattern\n  val node_to_yojson : node -> Yojson.Safe.t\n  val node_of_yojson :\n    Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val _ : Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val has_target : t -> node -> bool\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1041,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 15
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 15
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 6
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 6
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 6
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 29
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "f:(in_channel -> 'a) -> string -> 'a",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1040,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 91,
                    "col": 18
                },
                "end": {
                    "line": 91,
                    "col": 28
                },
                "type": "'a -> ('a * 'b) list -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 91,
                    "col": 18
                },
                "end": {
                    "line": 91,
                    "col": 28
                },
                "type": "string -> (string * ([> `Int of 'b ] as 'a)) list -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 91,
                    "col": 18
                },
                "end": {
                    "line": 91,
                    "col": 43
                },
                "type": "[> `Int of 'a ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 90,
                    "col": 27
                },
                "end": {
                    "line": 93,
                    "col": 53
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 23
                },
                "end": {
                    "line": 94,
                    "col": 49
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 87,
                    "col": 19
                },
                "end": {
                    "line": 95,
                    "col": 44
                },
                "type": "[> `Assoc of (string * [> `Assoc of (string * [> `Int of 'a ]) list ]) list ] ->\n'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 82,
                    "col": 18
                },
                "end": {
                    "line": 96,
                    "col": 3
                },
                "type": "sig\n  type t = Yojson.Safe.t\n  val to_yojson : 'a -> 'a\n  val get_timing :\n    [> `Assoc of\n         (string * [> `Assoc of (string * [> `Int of 'a ]) list ]) list ] ->\n    'a\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 82,
                    "col": 0
                },
                "end": {
                    "line": 96,
                    "col": 3
                },
                "type": "sig\n  type t = Response.t\n  val to_yojson : 'a -> 'a\n  val get_timing :\n    [> `Assoc of\n         (string * [> `Assoc of (string * [> `Int of 'a ]) list ]) list ] ->\n    'a\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1039,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 137,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 137,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 136,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 135,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 132,
                    "col": 2
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 50
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 45
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 39
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 27
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "query_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 15
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "query_time:float ->\nquery_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1038,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 50,
                    "col": 13
                },
                "end": {
                    "line": 50,
                    "col": 31
                },
                "type": "string -> Yojson.Safe.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 50,
                    "col": 13
                },
                "end": {
                    "line": 50,
                    "col": 31
                },
                "type": "string -> Yojson.Safe.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 50,
                    "col": 13
                },
                "end": {
                    "line": 50,
                    "col": 35
                },
                "type": "Yojson.Safe.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 50,
                    "col": 2
                },
                "end": {
                    "line": 51,
                    "col": 49
                },
                "type": "Yojson.Safe.t * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 2
                },
                "end": {
                    "line": 51,
                    "col": 49
                },
                "type": "Yojson.Safe.t * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 48,
                    "col": 22
                },
                "end": {
                    "line": 51,
                    "col": 49
                },
                "type": "string -> Yojson.Safe.t * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 48,
                    "col": 10
                },
                "end": {
                    "line": 51,
                    "col": 49
                },
                "type": "query_time:float -> string -> Yojson.Safe.t * float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1037,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 79,
                    "col": 13
                },
                "end": {
                    "line": 79,
                    "col": 19
                },
                "type": "node",
                "tail": "no"
            },
            {
                "start": {
                    "line": 79,
                    "col": 13
                },
                "end": {
                    "line": 79,
                    "col": 19
                },
                "type": "node",
                "tail": "no"
            },
            {
                "start": {
                    "line": 79,
                    "col": 4
                },
                "end": {
                    "line": 79,
                    "col": 32
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 4
                },
                "end": {
                    "line": 79,
                    "col": 32
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 71,
                    "col": 20
                },
                "end": {
                    "line": 79,
                    "col": 32
                },
                "type": "node -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 71,
                    "col": 17
                },
                "end": {
                    "line": 79,
                    "col": 32
                },
                "type": "t -> node -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 20
                },
                "end": {
                    "line": 80,
                    "col": 3
                },
                "type": "sig\n  type t = Locate | Case_analysis | Type_enclosing | Occurrences\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val all : t list\n  val to_string : t -> string\n  type node = Longident | Expression | Var_pattern\n  val node_to_yojson : node -> Yojson.Safe.t\n  val node_of_yojson :\n    Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val _ : node -> Yojson.Safe.t\n  val _ : Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val has_target : t -> node -> bool\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 20
                },
                "end": {
                    "line": 80,
                    "col": 3
                },
                "type": "sig\n  type t = Locate | Case_analysis | Type_enclosing | Occurrences\n  val to_yojson : t -> Yojson.Safe.t\n  val all : t list\n  val to_string : t -> string\n  type node = Longident | Expression | Var_pattern\n  val node_to_yojson : node -> Yojson.Safe.t\n  val node_of_yojson :\n    Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val _ : Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val has_target : t -> node -> bool\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 0
                },
                "end": {
                    "line": 80,
                    "col": 3
                },
                "type": "sig\n  type t = Locate | Case_analysis | Type_enclosing | Occurrences\n  val to_yojson : t -> Yojson.Safe.t\n  val all : t list\n  val to_string : t -> string\n  type node = Longident | Expression | Var_pattern\n  val node_to_yojson : node -> Yojson.Safe.t\n  val node_of_yojson :\n    Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val _ : Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val has_target : t -> node -> bool\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1036,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 137,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 137,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 136,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 135,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 132,
                    "col": 2
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 50
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 45
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 39
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 27
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "query_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 15
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "query_time:float ->\nquery_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1035,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 128,
                    "col": 35
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 128,
                    "col": 35
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 125,
                    "col": 8
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 104,
                    "col": 4
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 34
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 29
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 23
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "file:File.t -> loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 11
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "query_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 98,
                    "col": 13
                },
                "end": {
                    "line": 129,
                    "col": 3
                },
                "type": "sig\n  type t = string\n  val to_yojson : 'a -> [> `String of 'a ]\n  val make :\n    query_type:Query_type.t ->\n    file:File.t -> loc:Warnings.loc -> t/2 -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 98,
                    "col": 0
                },
                "end": {
                    "line": 129,
                    "col": 3
                },
                "type": "sig\n  type t = string\n  val to_yojson : 'a -> [> `String of 'a ]\n  val make :\n    query_type:Query_type.t ->\n    file:File.t -> loc:Warnings.loc -> t/2 -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 24,
            "query": 1,
            "pp": 0,
            "reader": 5,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1034,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 15
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 15
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 6
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 6
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 6
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 29
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "f:(in_channel -> 'a) -> string -> 'a",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1033,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 54,
                    "col": 53
                },
                "end": {
                    "line": 54,
                    "col": 61
                },
                "type": "frontend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 53
                },
                "end": {
                    "line": 54,
                    "col": 61
                },
                "type": "frontend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 41
                },
                "end": {
                    "line": 54,
                    "col": 62
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 12
                },
                "end": {
                    "line": 54,
                    "col": 62
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 2
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 14
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "frontend -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 9
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "Fpath.t -> frontend -> t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1032,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 73
                },
                "end": {
                    "line": 27,
                    "col": 77
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 73
                },
                "end": {
                    "line": 27,
                    "col": 77
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 58
                },
                "end": {
                    "line": 27,
                    "col": 78
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 10
                },
                "end": {
                    "line": 27,
                    "col": 78
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 10
                },
                "end": {
                    "line": 28,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 23,
                    "col": 11
                },
                "end": {
                    "line": 31,
                    "col": 17
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 29
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "f:(in_channel -> 'a) -> string -> 'a",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1031,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 55,
                    "col": 43
                },
                "end": {
                    "line": 55,
                    "col": 46
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 43
                },
                "end": {
                    "line": 55,
                    "col": 46
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 24
                },
                "end": {
                    "line": 55,
                    "col": 47
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 16
                },
                "end": {
                    "line": 55,
                    "col": 47
                },
                "type": "[> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 2
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 2
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 14
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "frontend -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 9
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "Fpath.t -> frontend -> t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1030,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 144,
                    "col": 12
                },
                "end": {
                    "line": 144,
                    "col": 23
                },
                "type": "string -> int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 144,
                    "col": 12
                },
                "end": {
                    "line": 144,
                    "col": 23
                },
                "type": "string -> int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 144,
                    "col": 12
                },
                "end": {
                    "line": 144,
                    "col": 31
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 144,
                    "col": 6
                },
                "end": {
                    "line": 146,
                    "col": 74
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 142,
                    "col": 14
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 140,
                    "col": 2
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 139,
                    "col": 16
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "t -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1029,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 66,
                    "col": 24
                },
                "end": {
                    "line": 66,
                    "col": 40
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 63,
                    "col": 18
                },
                "end": {
                    "line": 67,
                    "col": 34
                },
                "type": "t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 20
                },
                "end": {
                    "line": 80,
                    "col": 3
                },
                "type": "sig\n  type t = Locate | Case_analysis | Type_enclosing | Occurrences\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val all : t list\n  val to_string : t -> string\n  type node = Longident | Expression | Var_pattern\n  val node_to_yojson : node -> Yojson.Safe.t\n  val node_of_yojson :\n    Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val _ : node -> Yojson.Safe.t\n  val _ : Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val has_target : t -> node -> bool\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 20
                },
                "end": {
                    "line": 80,
                    "col": 3
                },
                "type": "sig\n  type t = Locate | Case_analysis | Type_enclosing | Occurrences\n  val to_yojson : t -> Yojson.Safe.t\n  val all : t list\n  val to_string : t -> string\n  type node = Longident | Expression | Var_pattern\n  val node_to_yojson : node -> Yojson.Safe.t\n  val node_of_yojson :\n    Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val _ : Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val has_target : t -> node -> bool\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 0
                },
                "end": {
                    "line": 80,
                    "col": 3
                },
                "type": "sig\n  type t = Locate | Case_analysis | Type_enclosing | Occurrences\n  val to_yojson : t -> Yojson.Safe.t\n  val all : t list\n  val to_string : t -> string\n  type node = Longident | Expression | Var_pattern\n  val node_to_yojson : node -> Yojson.Safe.t\n  val node_of_yojson :\n    Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val _ : Yojson.Safe.t -> node Ppx_deriving_yojson_runtime.error_or\n  val has_target : t -> node -> bool\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1028,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 51,
                    "col": 38
                },
                "end": {
                    "line": 51,
                    "col": 48
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 38
                },
                "end": {
                    "line": 51,
                    "col": 48
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 9
                },
                "end": {
                    "line": 51,
                    "col": 48
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 2
                },
                "end": {
                    "line": 51,
                    "col": 49
                },
                "type": "Yojson.Safe.t * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 50,
                    "col": 2
                },
                "end": {
                    "line": 51,
                    "col": 49
                },
                "type": "Yojson.Safe.t * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 2
                },
                "end": {
                    "line": 51,
                    "col": 49
                },
                "type": "Yojson.Safe.t * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 48,
                    "col": 22
                },
                "end": {
                    "line": 51,
                    "col": 49
                },
                "type": "string -> Yojson.Safe.t * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 48,
                    "col": 10
                },
                "end": {
                    "line": 51,
                    "col": 49
                },
                "type": "query_time:float -> string -> Yojson.Safe.t * float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 1027,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 117,
                    "col": 31
                },
                "end": {
                    "line": 117,
                    "col": 36
                },
                "type": "Import.Location.edge",
                "tail": "no"
            },
            {
                "start": {
                    "line": 117,
                    "col": 31
                },
                "end": {
                    "line": 117,
                    "col": 36
                },
                "type": "Import.Location.edge",
                "tail": "no"
            },
            {
                "start": {
                    "line": 117,
                    "col": 10
                },
                "end": {
                    "line": 117,
                    "col": 37
                },
                "type": "Format.formatter -> Warnings.loc -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 8
                },
                "end": {
                    "line": 118,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 104,
                    "col": 4
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 34
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 29
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 23
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "file:File.t -> loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 11
                },
                "end": {
                    "line": 128,
                    "col": 39
                },
                "type": "query_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t/2 -> t/1",
                "tail": "no"
            },
            {
                "start": {
                    "line": 98,
                    "col": 13
                },
                "end": {
                    "line": 129,
                    "col": 3
                },
                "type": "sig\n  type t = string\n  val to_yojson : 'a -> [> `String of 'a ]\n  val make :\n    query_type:Query_type.t ->\n    file:File.t -> loc:Warnings.loc -> t/2 -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 98,
                    "col": 0
                },
                "end": {
                    "line": 129,
                    "col": 3
                },
                "type": "sig\n  type t = string\n  val to_yojson : 'a -> [> `String of 'a ]\n  val make :\n    query_type:Query_type.t ->\n    file:File.t -> loc:Warnings.loc -> t/2 -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1026,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 2
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 2
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 14
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "frontend -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 9
                },
                "end": {
                    "line": 56,
                    "col": 29
                },
                "type": "Fpath.t -> frontend -> t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1025,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 22,
                    "col": 10
                },
                "end": {
                    "line": 22,
                    "col": 12
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 10
                },
                "end": {
                    "line": 22,
                    "col": 12
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 8
                },
                "end": {
                    "line": 22,
                    "col": 12
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 29
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "f:(in_channel -> 'a) -> string -> 'a",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1024,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 73
                },
                "end": {
                    "line": 27,
                    "col": 77
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 73
                },
                "end": {
                    "line": 27,
                    "col": 77
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 58
                },
                "end": {
                    "line": 27,
                    "col": 78
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 10
                },
                "end": {
                    "line": 27,
                    "col": 78
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 10
                },
                "end": {
                    "line": 28,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 23,
                    "col": 11
                },
                "end": {
                    "line": 31,
                    "col": 17
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 29
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "f:(in_channel -> 'a) -> string -> 'a",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1023,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 135,
                    "col": 26
                },
                "end": {
                    "line": 135,
                    "col": 36
                },
                "type": "Query_type.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 135,
                    "col": 26
                },
                "end": {
                    "line": 135,
                    "col": 36
                },
                "type": "Query_type.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 135,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 54
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 135,
                    "col": 6
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 132,
                    "col": 2
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 50
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 45
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 39
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 27
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "query_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 131,
                    "col": 15
                },
                "end": {
                    "line": 137,
                    "col": 16
                },
                "type": "query_time:float ->\nquery_type:Query_type.t -> file:File.t -> loc:Warnings.loc -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1022,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 146,
                    "col": 69
                },
                "end": {
                    "line": 146,
                    "col": 73
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 69
                },
                "end": {
                    "line": 146,
                    "col": 73
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 55
                },
                "end": {
                    "line": 146,
                    "col": 73
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 25
                },
                "end": {
                    "line": 146,
                    "col": 74
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 16
                },
                "end": {
                    "line": 146,
                    "col": 74
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 144,
                    "col": 6
                },
                "end": {
                    "line": 146,
                    "col": 74
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 142,
                    "col": 14
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 140,
                    "col": 2
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 139,
                    "col": 16
                },
                "end": {
                    "line": 146,
                    "col": 75
                },
                "type": "t -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1021,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 8,
                    "col": 48
                },
                "end": {
                    "line": 8,
                    "col": 52
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 48
                },
                "end": {
                    "line": 8,
                    "col": 52
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 31
                },
                "end": {
                    "line": 8,
                    "col": 53
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 23
                },
                "end": {
                    "line": 8,
                    "col": 53
                },
                "type": "[> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 16
                },
                "end": {
                    "line": 8,
                    "col": 53
                },
                "type": "t -> [> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 14
                },
                "end": {
                    "line": 9,
                    "col": 3
                },
                "type": "sig type t = Fpath.t val to_yojson : Fpath.t -> [> `String of string ] end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 0
                },
                "end": {
                    "line": 9,
                    "col": 3
                },
                "type": "sig type t = Fpath.t val to_yojson : Fpath.t -> [> `String of string ] end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1020,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 73
                },
                "end": {
                    "line": 27,
                    "col": 77
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 73
                },
                "end": {
                    "line": 27,
                    "col": 77
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 58
                },
                "end": {
                    "line": 27,
                    "col": 78
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 10
                },
                "end": {
                    "line": 27,
                    "col": 78
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 10
                },
                "end": {
                    "line": 28,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 23,
                    "col": 11
                },
                "end": {
                    "line": 31,
                    "col": 17
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 29
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "string -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 16
                },
                "type": "f:(in_channel -> 'a) -> string -> 'a",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1019,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 139,
                    "col": 16
                },
                "end": {
                    "line": 139,
                    "col": 37
                }
            },
            "{ path; frontend = Server;_} | { path; frontend = Single;_}"
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1018,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 109,
                    "col": 32
                },
                "end": {
                    "line": 109,
                    "col": 42
                }
            },
            "(match query_type with\n| Query_type.Locate -> _\n| Query_type.Case_analysis -> _\n| Query_type.Type_enclosing -> _\n| Query_type.Occurrences -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1017,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 128,
                    "col": 10
                },
                "end": {
                    "line": 128,
                    "col": 13
                }
            },
            "(match loc with | { loc_start; loc_end; loc_ghost } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1016,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1015,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1014,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1013,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1012,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 67,
                    "col": 21
                },
                "end": {
                    "line": 67,
                    "col": 34
                }
            },
            "(match \"occurrences\" with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1011,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1010,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 77,
                    "col": 23
                },
                "end": {
                    "line": 77,
                    "col": 36
                }
            },
            "(match [Longident] with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1009,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1008,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 46,
                    "col": 2
                },
                "end": {
                    "line": 46,
                    "col": 30
                }
            },
            "match untimed_query_generic ~f cmd with | \"\" -> _ | _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1007,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 74,
                    "col": 30
                },
                "end": {
                    "line": 74,
                    "col": 31
                }
            },
            "(match [] with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1006,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 121,
                    "col": 10
                },
                "end": {
                    "line": 121,
                    "col": 43
                }
            },
            "(match Query_type.to_string query_type with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1005,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 89,
                    "col": 34
                },
                "end": {
                    "line": 89,
                    "col": 40
                }
            },
            "(match answer with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1004,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1003,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1002,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 24,
                    "col": 12
                },
                "end": {
                    "line": 24,
                    "col": 36
                }
            },
            "(match Unix.close_process_in ic with\n| Unix.WEXITED _ -> _\n| Unix.WSIGNALED _ -> _\n| Unix.WSTOPPED _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1001,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1000,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 999,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 54,
                    "col": 53
                },
                "end": {
                    "line": 54,
                    "col": 61
                }
            },
            "(match frontend with | Server -> _ | Single -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 998,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 997,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 996,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 50,
                    "col": 32
                },
                "end": {
                    "line": 50,
                    "col": 35
                }
            },
            "(match cmd with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 995,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 994,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: in_channel",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 993,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 992,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 991,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 990,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: in_channel",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 989,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 21,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 5,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 988,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 53,
                "col": 9
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 987,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.mli",
            "pos": {
                "line": 5,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 986,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/format.ml",
            "pos": {
                "line": 1435,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 985,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 14,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 984,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 63,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 983,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 103,
                "col": 30
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 982,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.mli",
            "pos": {
                "line": 20,
                "col": 19
            }
        },
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 981,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 55,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 980,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 103,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 5,
            "pp": 0,
            "reader": 1,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 979,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 103,
                "col": 34
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 978,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 977,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.mli",
            "pos": {
                "line": 22,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 976,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 29,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 975,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 139,
                "col": 18
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 974,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 48,
                "col": 11
            }
        },
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 973,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 60,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 972,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 41,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 971,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 103,
                "col": 30
            }
        },
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 970,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 53,
                "col": 9
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 969,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.mli",
            "pos": {
                "line": 22,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 22,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 968,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 71,
                "col": 20
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 967,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 63,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 966,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 29,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 965,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/unix/unix.mli",
            "pos": {
                "line": 970,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 964,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 34,
                "col": 10
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 963,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.mli",
            "pos": {
                "line": 20,
                "col": 19
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 962,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/fpath/fpath.mli",
            "pos": {
                "line": 50,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 961,
    "merlin_reply": {
        "class": "error",
        "value": "Wrong file naming: /home/sonja/.opam/5.0.0~alpha0/lib/yojson/yojson.cmi\ncontains the compiled interface for\nYojson when yojson was expected",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 960,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 443,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 959,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 21,
                    "col": 11
                },
                "end": {
                    "line": 21,
                    "col": 15
                }
            },
            {
                "start": {
                    "line": 24,
                    "col": 49
                },
                "end": {
                    "line": 24,
                    "col": 53
                }
            },
            {
                "start": {
                    "line": 27,
                    "col": 24
                },
                "end": {
                    "line": 27,
                    "col": 28
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 958,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 24,
                    "col": 19
                },
                "end": {
                    "line": 24,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 24,
                    "col": 45
                },
                "end": {
                    "line": 24,
                    "col": 48
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 957,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 48,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 33
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 956,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 41,
                    "col": 6
                },
                "end": {
                    "line": 41,
                    "col": 10
                }
            },
            {
                "start": {
                    "line": 42,
                    "col": 19
                },
                "end": {
                    "line": 42,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 47,
                    "col": 30
                },
                "end": {
                    "line": 47,
                    "col": 34
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 955,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 46,
                    "col": 10
                },
                "end": {
                    "line": 46,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 47,
                    "col": 27
                },
                "end": {
                    "line": 47,
                    "col": 29
                }
            },
            {
                "start": {
                    "line": 48,
                    "col": 34
                },
                "end": {
                    "line": 48,
                    "col": 36
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 954,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 23,
                    "col": 10
                },
                "end": {
                    "line": 23,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 953,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 6
                },
                "end": {
                    "line": 11,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 20,
                    "col": 22
                },
                "end": {
                    "line": 20,
                    "col": 30
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 7,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 952,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 21,
                    "col": 16
                },
                "end": {
                    "line": 21,
                    "col": 19
                }
            },
            {
                "start": {
                    "line": 27,
                    "col": 32
                },
                "end": {
                    "line": 27,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 27,
                    "col": 41
                },
                "end": {
                    "line": 27,
                    "col": 44
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 951,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 8
                },
                "end": {
                    "line": 33,
                    "col": 22
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 950,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 17,
                    "col": 22
                },
                "end": {
                    "line": 17,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 38,
                    "col": 9
                },
                "end": {
                    "line": 38,
                    "col": 11
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 949,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 17,
                    "col": 22
                },
                "end": {
                    "line": 17,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 38,
                    "col": 9
                },
                "end": {
                    "line": 38,
                    "col": 11
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 948,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 19,
                    "col": 7
                },
                "end": {
                    "line": 19,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 30,
                    "col": 8
                },
                "end": {
                    "line": 30,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 38,
                    "col": 12
                },
                "end": {
                    "line": 38,
                    "col": 17
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 947,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 14,
                    "col": 10
                },
                "end": {
                    "line": 14,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 15,
                    "col": 20
                },
                "end": {
                    "line": 15,
                    "col": 31
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 946,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 22,
                    "col": 12
                },
                "end": {
                    "line": 22,
                    "col": 19
                }
            },
            {
                "start": {
                    "line": 27,
                    "col": 11
                },
                "end": {
                    "line": 27,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 945,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 21,
                    "col": 16
                },
                "end": {
                    "line": 21,
                    "col": 19
                }
            },
            {
                "start": {
                    "line": 27,
                    "col": 32
                },
                "end": {
                    "line": 27,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 27,
                    "col": 41
                },
                "end": {
                    "line": 27,
                    "col": 44
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 944,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 12,
                    "col": 19
                },
                "end": {
                    "line": 12,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 14,
                    "col": 54
                },
                "end": {
                    "line": 14,
                    "col": 58
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 943,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 35,
                    "col": 11
                },
                "end": {
                    "line": 35,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 9,
            "error": 0
        }
    }
}
{
    "sample_id": 942,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 30
                },
                "end": {
                    "line": 5,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 7,
                    "col": 15
                },
                "end": {
                    "line": 7,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 14,
                    "col": 24
                },
                "end": {
                    "line": 14,
                    "col": 39
                }
            },
            {
                "start": {
                    "line": 41,
                    "col": 13
                },
                "end": {
                    "line": 41,
                    "col": 28
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 941,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 940,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 31
                },
                "end": {
                    "line": 13,
                    "col": 59
                }
            },
            {
                "start": {
                    "line": 13,
                    "col": 41
                },
                "end": {
                    "line": 13,
                    "col": 59
                }
            },
            {
                "start": {
                    "line": 13,
                    "col": 50
                },
                "end": {
                    "line": 13,
                    "col": 59
                }
            },
            {
                "start": {
                    "line": 27,
                    "col": 29
                },
                "end": {
                    "line": 27,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 28,
                    "col": 17
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 939,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 58
                },
                "end": {
                    "line": 13,
                    "col": 59
                }
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 28,
                    "col": 8
                }
            },
            {
                "start": {
                    "line": 28,
                    "col": 16
                },
                "end": {
                    "line": 28,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 31,
                    "col": 6
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 938,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 44,
                    "col": 18
                },
                "end": {
                    "line": 44,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 45,
                    "col": 9
                },
                "end": {
                    "line": 45,
                    "col": 11
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 937,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 44,
                    "col": 18
                },
                "end": {
                    "line": 44,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 45,
                    "col": 9
                },
                "end": {
                    "line": 45,
                    "col": 11
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 28,
            "query": 0,
            "pp": 0,
            "reader": 10,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 936,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 10,
                    "col": 11
                },
                "end": {
                    "line": 10,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 10,
                    "col": 11
                },
                "end": {
                    "line": 10,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 935,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 19,
                    "col": 7
                },
                "end": {
                    "line": 19,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 30,
                    "col": 8
                },
                "end": {
                    "line": 30,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 38,
                    "col": 12
                },
                "end": {
                    "line": 38,
                    "col": 17
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 934,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 6,
                    "col": 9
                },
                "end": {
                    "line": 6,
                    "col": 17
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 933,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 14
                },
                "end": {
                    "line": 5,
                    "col": 18
                }
            },
            {
                "start": {
                    "line": 5,
                    "col": 46
                },
                "end": {
                    "line": 5,
                    "col": 50
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 932,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 46,
                    "col": 15
                },
                "end": {
                    "line": 46,
                    "col": 34
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 931,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 3,
                    "col": 9
                },
                "end": {
                    "line": 3,
                    "col": 16
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 930,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 1,
                    "col": 6
                },
                "end": {
                    "line": 1,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 1,
                    "col": 6
                },
                "end": {
                    "line": 1,
                    "col": 12
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 929,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 47,
                    "col": 30
                },
                "end": {
                    "line": 47,
                    "col": 34
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 47,
                    "col": 30
                },
                "end": {
                    "line": 47,
                    "col": 34
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 47,
                    "col": 6
                },
                "end": {
                    "line": 47,
                    "col": 34
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 47,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 46,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 45,
                    "col": 4
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "unit -> Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 43,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 15
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "t -> Ppxlib.Parsetree.structure",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 928,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 14,
                    "col": 54
                },
                "end": {
                    "line": 14,
                    "col": 58
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 54
                },
                "end": {
                    "line": 14,
                    "col": 58
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 43
                },
                "end": {
                    "line": 14,
                    "col": 58
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 24
                },
                "end": {
                    "line": 14,
                    "col": 58
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 19
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "t -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 927,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 48,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 33
                },
                "type": "Lexing.lexbuf -> Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 48,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 33
                },
                "type": "Lexing.lexbuf -> Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 48,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 47,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 46,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 45,
                    "col": 4
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "unit -> Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 43,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 15
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "t -> Ppxlib.Parsetree.structure",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 6,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 926,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 41
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 41
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 8
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 8
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 16
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list -> t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 6
                },
                "end": {
                    "line": 27,
                    "col": 45
                },
                "type": "t -> t list -> t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 4
                },
                "end": {
                    "line": 28,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 925,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 28,
                    "col": 15
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 28,
                    "col": 15
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 9
                },
                "end": {
                    "line": 28,
                    "col": 17
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 4
                },
                "end": {
                    "line": 28,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 924,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 41
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 41
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 8
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 8
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 16
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list -> t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 6
                },
                "end": {
                    "line": 27,
                    "col": 45
                },
                "type": "t -> t list -> t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 4
                },
                "end": {
                    "line": 28,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 923,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 58
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 50
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 41
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 29
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 19
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "t -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 922,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 48,
                    "col": 34
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Lexing.lexbuf",
                "tail": "no"
            },
            {
                "start": {
                    "line": 48,
                    "col": 34
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Lexing.lexbuf",
                "tail": "no"
            },
            {
                "start": {
                    "line": 48,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 47,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 46,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 45,
                    "col": 4
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "unit -> Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 43,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 15
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "t -> Ppxlib.Parsetree.structure",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 921,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 12
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 12
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 9
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 8,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 920,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 41
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 41
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 8
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 8
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 16
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list -> t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 6
                },
                "end": {
                    "line": 27,
                    "col": 45
                },
                "type": "t -> t list -> t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 4
                },
                "end": {
                    "line": 28,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 919,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 41
                },
                "end": {
                    "line": 13,
                    "col": 48
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 41
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 29
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 19
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "t -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 918,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 17,
                    "col": 26
                },
                "end": {
                    "line": 17,
                    "col": 36
                },
                "type": "t -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 26
                },
                "end": {
                    "line": 17,
                    "col": 36
                },
                "type": "t -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 25
                },
                "end": {
                    "line": 17,
                    "col": 42
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 22
                },
                "end": {
                    "line": 17,
                    "col": 42
                },
                "type": "(bool, 'a) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 9
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "t -> (bool, 'a) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 917,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 58
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 50
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 41
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 29
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 19
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "t -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 916,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 41,
                    "col": 29
                },
                "end": {
                    "line": 41,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 29
                },
                "end": {
                    "line": 41,
                    "col": 39
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 13
                },
                "end": {
                    "line": 41,
                    "col": 39
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 15
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "t -> Ppxlib.Parsetree.structure",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 915,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 15,
                    "col": 20
                },
                "end": {
                    "line": 15,
                    "col": 31
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 20
                },
                "end": {
                    "line": 15,
                    "col": 31
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 10
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 19
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "t -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 914,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 58
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 50
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 41
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 29
                },
                "end": {
                    "line": 13,
                    "col": 59
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 19
                },
                "end": {
                    "line": 15,
                    "col": 49
                },
                "type": "t -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 8,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 913,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 44,
                    "col": 39
                },
                "end": {
                    "line": 44,
                    "col": 41
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 44,
                    "col": 39
                },
                "end": {
                    "line": 44,
                    "col": 41
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 44,
                    "col": 24
                },
                "end": {
                    "line": 44,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 44,
                    "col": 13
                },
                "end": {
                    "line": 44,
                    "col": 42
                },
                "type": "unit -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 43,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 15
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "t -> Ppxlib.Parsetree.structure",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 8,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 912,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 11
                },
                "end": {
                    "line": 42,
                    "col": 18
                },
                "type": "string -> in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 11
                },
                "end": {
                    "line": 42,
                    "col": 18
                },
                "type": "string -> in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 11
                },
                "end": {
                    "line": 42,
                    "col": 23
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 15
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "t -> Ppxlib.Parsetree.structure",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 911,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 17,
                    "col": 25
                },
                "end": {
                    "line": 17,
                    "col": 42
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 22
                },
                "end": {
                    "line": 17,
                    "col": 42
                },
                "type": "(bool, 'a) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 9
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "t -> (bool, 'a) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                },
                "type": "[> `Sat of t -> (bool, 'a) result ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 910,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 46,
                    "col": 35
                },
                "end": {
                    "line": 46,
                    "col": 37
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 46,
                    "col": 35
                },
                "end": {
                    "line": 46,
                    "col": 37
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 46,
                    "col": 15
                },
                "end": {
                    "line": 46,
                    "col": 37
                },
                "type": "Lexing.lexbuf",
                "tail": "no"
            },
            {
                "start": {
                    "line": 46,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 45,
                    "col": 4
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "unit -> Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 43,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 15
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "t -> Ppxlib.Parsetree.structure",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 909,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 81
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 81
                },
                "type": "(string -> string, unit, string) format",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 8
                },
                "end": {
                    "line": 35,
                    "col": 41
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 6
                },
                "end": {
                    "line": 37,
                    "col": 22
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 908,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 35,
                    "col": 30
                },
                "end": {
                    "line": 35,
                    "col": 40
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 30
                },
                "end": {
                    "line": 35,
                    "col": 40
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 10
                },
                "end": {
                    "line": 35,
                    "col": 41
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 8
                },
                "end": {
                    "line": 35,
                    "col": 41
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 6
                },
                "end": {
                    "line": 37,
                    "col": 22
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 907,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 28,
                    "col": 16
                },
                "end": {
                    "line": 28,
                    "col": 17
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 9
                },
                "end": {
                    "line": 28,
                    "col": 17
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 4
                },
                "end": {
                    "line": 28,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 9,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 906,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 7,
                    "col": 15
                },
                "end": {
                    "line": 7,
                    "col": 30
                },
                "type": "t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 15
                },
                "end": {
                    "line": 7,
                    "col": 30
                },
                "type": "t -> string",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 905,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 44,
                    "col": 39
                },
                "end": {
                    "line": 44,
                    "col": 41
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 44,
                    "col": 39
                },
                "end": {
                    "line": 44,
                    "col": 41
                },
                "type": "in_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 44,
                    "col": 24
                },
                "end": {
                    "line": 44,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 44,
                    "col": 13
                },
                "end": {
                    "line": 44,
                    "col": 42
                },
                "type": "unit -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 43,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 15
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "t -> Ppxlib.Parsetree.structure",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 904,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 41,
                    "col": 13
                },
                "end": {
                    "line": 41,
                    "col": 28
                },
                "type": "t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 13
                },
                "end": {
                    "line": 41,
                    "col": 28
                },
                "type": "t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 13
                },
                "end": {
                    "line": 41,
                    "col": 39
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "Ppxlib.Parsetree.structure",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 15
                },
                "end": {
                    "line": 48,
                    "col": 37
                },
                "type": "t -> Ppxlib.Parsetree.structure",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 3,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 903,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 30
                },
                "end": {
                    "line": 5,
                    "col": 45
                },
                "type": "t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 30
                },
                "end": {
                    "line": 5,
                    "col": 45
                },
                "type": "t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 29
                },
                "end": {
                    "line": 5,
                    "col": 51
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 21
                },
                "end": {
                    "line": 5,
                    "col": 51
                },
                "type": "[> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 14
                },
                "end": {
                    "line": 5,
                    "col": 51
                },
                "type": "t -> [> `String of string ]",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 902,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 24,
                    "col": 45
                },
                "end": {
                    "line": 24,
                    "col": 48
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 24,
                    "col": 45
                },
                "end": {
                    "line": 24,
                    "col": 48
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 24,
                    "col": 31
                },
                "end": {
                    "line": 24,
                    "col": 53
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 24,
                    "col": 26
                },
                "end": {
                    "line": 24,
                    "col": 53
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 24,
                    "col": 19
                },
                "end": {
                    "line": 24,
                    "col": 53
                },
                "type": "string -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 24,
                    "col": 12
                },
                "end": {
                    "line": 24,
                    "col": 54
                },
                "type": "bool -> string -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 23,
                    "col": 10
                },
                "end": {
                    "line": 25,
                    "col": 28
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 8
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 16
                },
                "end": {
                    "line": 27,
                    "col": 44
                },
                "type": "t list -> t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 6
                },
                "end": {
                    "line": 27,
                    "col": 45
                },
                "type": "t -> t list -> t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 4
                },
                "end": {
                    "line": 28,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "(t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 26
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 14
                },
                "end": {
                    "line": 38,
                    "col": 17
                },
                "type": "extensions:string list -> t -> (t list, [> Rresult.R.msg ]) result",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 901,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 46
                },
                "end": {
                    "line": 5,
                    "col": 50
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 46
                },
                "end": {
                    "line": 5,
                    "col": 50
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 29
                },
                "end": {
                    "line": 5,
                    "col": 51
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 21
                },
                "end": {
                    "line": 5,
                    "col": 51
                },
                "type": "[> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 14
                },
                "end": {
                    "line": 5,
                    "col": 51
                },
                "type": "t -> [> `String of string ]",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 900,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 46
                },
                "end": {
                    "line": 5,
                    "col": 50
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 46
                },
                "end": {
                    "line": 5,
                    "col": 50
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 29
                },
                "end": {
                    "line": 5,
                    "col": 51
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 21
                },
                "end": {
                    "line": 5,
                    "col": 51
                },
                "type": "[> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 14
                },
                "end": {
                    "line": 5,
                    "col": 51
                },
                "type": "t -> [> `String of string ]",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 899,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 898,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 14,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                }
            },
            "match let folder_name = Fpath.to_string (Fpath.base path) in\n      not (List.mem folder_name excluded_folders)\nwith\n| false -> _\n| true -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 897,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 896,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: string",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 895,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 8
                },
                "end": {
                    "line": 27,
                    "col": 44
                }
            },
            "(match if has_ext then file :: acc else acc with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 894,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: string",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 893,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 41
                },
                "end": {
                    "line": 13,
                    "col": 48
                }
            },
            "(match \"_opam\" with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 892,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 12
                },
                "end": {
                    "line": 38,
                    "col": 17
                }
            },
            "(match files with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 891,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 0,
            "pp": 0,
            "reader": 11,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 890,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 38,
                    "col": 17
                }
            },
            "(match let* files =\n        Bos.OS.Path.fold ?err:None ?dotfiles:None ?elements:None\n          ?traverse:(Some traverse)\n          (fun file acc ->\n             let has_ext =\n               List.fold_left (fun b ext -> b || (Fpath.has_ext ext file))\n                 false extensions in\n             if has_ext then file :: acc else acc) [] [path]\n       in\n      match files with\n      | [] ->\n          let msg =\n            Printf.sprintf\n              (CamlinternalFormatBasics.Format\n                 ((CamlinternalFormatBasics.String_literal\n                     (\"The provided proj_dir doesn't contain any files with extensions \",\n                       (CamlinternalFormatBasics.String\n                          (CamlinternalFormatBasics.No_padding,\n                            (CamlinternalFormatBasics.String_literal\n                               (\".\\n\",\n                                 CamlinternalFormatBasics.End_of_format)))))),\n                   \"The provided proj_dir doesn't contain any files with extensions %s.\\n\"))\n              (String.concat \", \" extensions) in\n          Error (`Msg msg)\n      | _ -> Ok files\nwith\n| Ok _ -> _\n| Error _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 889,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 29
                },
                "end": {
                    "line": 13,
                    "col": 59
                }
            },
            "match [\"_build\"; \"_opam\"; \".opam\"] with | [] -> _ | _::_ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 888,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 17,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                }
            },
            "match `Sat (fun path -> Ok (do_exclude path)) with | `Sat _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 887,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                }
            },
            "match let excluded_folders = [\"_build\"; \"_opam\"; \".opam\"] in\n      let folder_name = Fpath.to_string (Fpath.base path) in\n      not (List.mem folder_name excluded_folders)\nwith\n| false -> _\n| true -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 886,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 885,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 15,
                    "col": 6
                },
                "end": {
                    "line": 15,
                    "col": 49
                }
            },
            "match not (List.mem folder_name excluded_folders) with\n| false -> _\n| true -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 884,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 12,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 43
                }
            },
            "match let do_exclude path =\n        let excluded_folders = [\"_build\"; \"_opam\"; \".opam\"] in\n        let folder_name = Fpath.to_string (Fpath.base path) in\n        not (List.mem folder_name excluded_folders) in\n      `Sat (fun path -> Ok (do_exclude path))\nwith\n| `Sat _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 883,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 41,
                    "col": 2
                },
                "end": {
                    "line": 48,
                    "col": 37
                }
            },
            "match let file = Fpath.to_string sourcefile in\n      let ic = open_in file in\n      Fun.protect ~finally:(fun () -> close_in_noerr ic)\n        (fun () ->\n           let lb = Lexing.from_channel ?with_positions:None ic in\n           Ppxlib.Location.init lb file; Ppxlib.Parse.implementation lb)\nwith\n| [] -> _\n| _::_ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 882,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 37,
                    "col": 18
                },
                "end": {
                    "line": 37,
                    "col": 21
                }
            },
            "(match msg with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 28,
            "query": 9,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 881,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 880,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: in_channel",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 879,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 28,
                    "col": 8
                }
            },
            "(match [] with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 878,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 32
                },
                "end": {
                    "line": 27,
                    "col": 35
                }
            },
            "(match acc with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 877,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 25,
                    "col": 18
                },
                "end": {
                    "line": 25,
                    "col": 28
                }
            },
            "(match extensions with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 876,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 47,
                    "col": 6
                },
                "end": {
                    "line": 48,
                    "col": 36
                }
            },
            "(match Ppxlib.Location.init lb file; Ppxlib.Parse.implementation lb with\n| [] -> _\n| _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 875,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 0,
            "pp": 0,
            "reader": 12,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 874,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 35,
                    "col": 25
                },
                "end": {
                    "line": 35,
                    "col": 29
                }
            },
            "(match \", \" with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 873,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 47,
                    "col": 30
                },
                "end": {
                    "line": 47,
                    "col": 34
                }
            },
            "(match file with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 872,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 871,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 870,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 869,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 21,
                "col": 11
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 868,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 24,
                "col": 19
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 867,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/ast/import.ml",
            "pos": {
                "line": 102,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 866,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 41,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 865,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 46,
                "col": 10
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 864,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/base/list.mli",
            "pos": {
                "line": 211,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 863,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 11,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 0,
            "pp": 0,
            "reader": 11,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 862,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 21,
                "col": 16
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 861,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/printf.ml",
            "pos": {
                "line": 41,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 860,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 246,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 859,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 246,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 858,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 19,
                "col": 7
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 857,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 14,
                "col": 10
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 856,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 22,
                "col": 12
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 855,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 21,
                "col": 16
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 9,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 854,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 12,
                "col": 19
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 853,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/string.ml",
            "pos": {
                "line": 63,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 852,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/fpath/fpath.mli",
            "pos": {
                "line": 347,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 851,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 49,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 850,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 849,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 848,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 847,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 846,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.mli",
            "pos": {
                "line": 4,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 845,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 19,
                "col": 7
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 844,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/fpath/fpath.mli",
            "pos": {
                "line": 372,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 10,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 843,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 5,
                "col": 14
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 842,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/lexing.ml",
            "pos": {
                "line": 162,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 841,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/fpath/fpath.mli",
            "pos": {
                "line": 50,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 840,
    "merlin_reply": {
        "class": "return",
        "value": "didn't manage to find Dune__exe.Import",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 839,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 112,
                    "col": 13
                },
                "end": {
                    "line": 112,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 210,
                    "col": 22
                },
                "end": {
                    "line": 210,
                    "col": 29
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 838,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 139,
                    "col": 4
                },
                "end": {
                    "line": 139,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 2,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 837,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 140,
                    "col": 11
                },
                "end": {
                    "line": 140,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 142,
                    "col": 18
                },
                "end": {
                    "line": 142,
                    "col": 21
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 836,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 4,
                    "col": 2
                },
                "end": {
                    "line": 5,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 18,
                    "col": 2
                },
                "end": {
                    "line": 26,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 36,
                    "col": 2
                },
                "end": {
                    "line": 37,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 47,
                    "col": 2
                },
                "end": {
                    "line": 47,
                    "col": 73
                }
            },
            {
                "start": {
                    "line": 59,
                    "col": 2
                },
                "end": {
                    "line": 66,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 76,
                    "col": 28
                },
                "end": {
                    "line": 76,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 101,
                    "col": 15
                },
                "end": {
                    "line": 101,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 102,
                    "col": 26
                },
                "end": {
                    "line": 102,
                    "col": 28
                }
            },
            {
                "start": {
                    "line": 116,
                    "col": 2
                },
                "end": {
                    "line": 123,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 117,
                    "col": 12
                },
                "end": {
                    "line": 117,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 118,
                    "col": 12
                },
                "end": {
                    "line": 118,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 119,
                    "col": 12
                },
                "end": {
                    "line": 119,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 120,
                    "col": 12
                },
                "end": {
                    "line": 120,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 121,
                    "col": 12
                },
                "end": {
                    "line": 121,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 147,
                    "col": 16
                },
                "end": {
                    "line": 147,
                    "col": 18
                }
            },
            {
                "start": {
                    "line": 162,
                    "col": 20
                },
                "end": {
                    "line": 162,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 163,
                    "col": 11
                },
                "end": {
                    "line": 163,
                    "col": 13
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 3,
            "pp": 0,
            "reader": 3,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 835,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 203,
                    "col": 32
                },
                "end": {
                    "line": 203,
                    "col": 46
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 4,
            "pp": 0,
            "reader": 3,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 834,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 221,
                    "col": 4
                },
                "end": {
                    "line": 221,
                    "col": 14
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 29,
            "query": 4,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 833,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 64,
                    "col": 17
                },
                "end": {
                    "line": 64,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 64,
                    "col": 17
                },
                "end": {
                    "line": 64,
                    "col": 22
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 832,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 146,
                    "col": 21
                },
                "end": {
                    "line": 146,
                    "col": 32
                }
            },
            {
                "start": {
                    "line": 149,
                    "col": 64
                },
                "end": {
                    "line": 149,
                    "col": 75
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 59
                },
                "end": {
                    "line": 150,
                    "col": 70
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 831,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 205,
                    "col": 21
                },
                "end": {
                    "line": 205,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 205,
                    "col": 52
                },
                "end": {
                    "line": 205,
                    "col": 53
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 830,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 256,
                    "col": 10
                },
                "end": {
                    "line": 256,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 829,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 4,
                    "col": 2
                },
                "end": {
                    "line": 5,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 18,
                    "col": 2
                },
                "end": {
                    "line": 26,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 36,
                    "col": 2
                },
                "end": {
                    "line": 37,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 47,
                    "col": 2
                },
                "end": {
                    "line": 47,
                    "col": 73
                }
            },
            {
                "start": {
                    "line": 59,
                    "col": 2
                },
                "end": {
                    "line": 66,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 76,
                    "col": 28
                },
                "end": {
                    "line": 76,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 101,
                    "col": 15
                },
                "end": {
                    "line": 101,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 102,
                    "col": 26
                },
                "end": {
                    "line": 102,
                    "col": 28
                }
            },
            {
                "start": {
                    "line": 116,
                    "col": 2
                },
                "end": {
                    "line": 123,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 117,
                    "col": 12
                },
                "end": {
                    "line": 117,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 118,
                    "col": 12
                },
                "end": {
                    "line": 118,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 119,
                    "col": 12
                },
                "end": {
                    "line": 119,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 120,
                    "col": 12
                },
                "end": {
                    "line": 120,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 121,
                    "col": 12
                },
                "end": {
                    "line": 121,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 147,
                    "col": 16
                },
                "end": {
                    "line": 147,
                    "col": 18
                }
            },
            {
                "start": {
                    "line": 162,
                    "col": 20
                },
                "end": {
                    "line": 162,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 163,
                    "col": 11
                },
                "end": {
                    "line": 163,
                    "col": 13
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 2,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 828,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 827,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 24,
                    "col": 10
                },
                "end": {
                    "line": 24,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 24,
                    "col": 10
                },
                "end": {
                    "line": 24,
                    "col": 20
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 4,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 826,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 207,
                    "col": 17
                },
                "end": {
                    "line": 207,
                    "col": 18
                }
            },
            {
                "start": {
                    "line": 207,
                    "col": 42
                },
                "end": {
                    "line": 207,
                    "col": 43
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 3,
            "pp": 0,
            "reader": 3,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 825,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 60,
                    "col": 13
                },
                "end": {
                    "line": 60,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 13
                },
                "end": {
                    "line": 60,
                    "col": 21
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 3,
            "pp": 0,
            "reader": 3,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 824,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 196,
                    "col": 22
                },
                "end": {
                    "line": 196,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 196,
                    "col": 65
                },
                "end": {
                    "line": 196,
                    "col": 69
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 823,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 156,
                    "col": 21
                },
                "end": {
                    "line": 156,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 156,
                    "col": 40
                },
                "end": {
                    "line": 156,
                    "col": 42
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 822,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 242,
                    "col": 9
                },
                "end": {
                    "line": 242,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 243,
                    "col": 13
                },
                "end": {
                    "line": 243,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 244,
                    "col": 15
                },
                "end": {
                    "line": 244,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 245,
                    "col": 29
                },
                "end": {
                    "line": 245,
                    "col": 37
                }
            },
            {
                "start": {
                    "line": 250,
                    "col": 6
                },
                "end": {
                    "line": 250,
                    "col": 14
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 821,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 223,
                    "col": 8
                },
                "end": {
                    "line": 223,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 224,
                    "col": 15
                },
                "end": {
                    "line": 224,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 2,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 820,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 63,
                    "col": 17
                },
                "end": {
                    "line": 63,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 63,
                    "col": 17
                },
                "end": {
                    "line": 63,
                    "col": 22
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 819,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 206,
                    "col": 29
                },
                "end": {
                    "line": 206,
                    "col": 40
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 818,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 165,
                    "col": 8
                },
                "end": {
                    "line": 165,
                    "col": 28
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 3,
            "pp": 0,
            "reader": 3,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 817,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 262,
                    "col": 2
                },
                "end": {
                    "line": 262,
                    "col": 17
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 3,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 816,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 261,
                    "col": 29
                },
                "end": {
                    "line": 261,
                    "col": 32
                }
            },
            {
                "start": {
                    "line": 262,
                    "col": 46
                },
                "end": {
                    "line": 262,
                    "col": 49
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 815,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 47,
                    "col": 2
                },
                "end": {
                    "line": 47,
                    "col": 73
                }
            },
            {
                "start": {
                    "line": 47,
                    "col": 30
                },
                "end": {
                    "line": 47,
                    "col": 48
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 814,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 213,
                    "col": 6
                },
                "end": {
                    "line": 213,
                    "col": 9
                }
            },
            {
                "start": {
                    "line": 214,
                    "col": 21
                },
                "end": {
                    "line": 214,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 813,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 203,
                    "col": 47
                },
                "end": {
                    "line": 203,
                    "col": 63
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 812,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 149,
                    "col": 41
                },
                "end": {
                    "line": 149,
                    "col": 63
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 811,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 228,
                    "col": 10
                },
                "end": {
                    "line": 228,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 229,
                    "col": 32
                },
                "end": {
                    "line": 229,
                    "col": 36
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 27,
            "query": 2,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 810,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 240,
                    "col": 4
                },
                "end": {
                    "line": 240,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 244,
                    "col": 24
                },
                "end": {
                    "line": 244,
                    "col": 36
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 809,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 79,
                    "col": 17
                },
                "end": {
                    "line": 79,
                    "col": 20
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 79,
                    "col": 17
                },
                "end": {
                    "line": 79,
                    "col": 20
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 79,
                    "col": 6
                },
                "end": {
                    "line": 79,
                    "col": 20
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 79,
                    "col": 6
                },
                "end": {
                    "line": 90,
                    "col": 19
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 6
                },
                "end": {
                    "line": 90,
                    "col": 19
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 6
                },
                "end": {
                    "line": 90,
                    "col": 19
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 76,
                    "col": 6
                },
                "end": {
                    "line": 90,
                    "col": 19
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 75,
                    "col": 4
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 74,
                    "col": 4
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 73,
                    "col": 21
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "proj_dir:string -> (string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 18
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 0
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 4,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 808,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 97,
                    "col": 33
                },
                "end": {
                    "line": 97,
                    "col": 36
                },
                "type": "exn",
                "tail": "no"
            },
            {
                "start": {
                    "line": 97,
                    "col": 33
                },
                "end": {
                    "line": 97,
                    "col": 36
                },
                "type": "exn",
                "tail": "no"
            },
            {
                "start": {
                    "line": 97,
                    "col": 13
                },
                "end": {
                    "line": 97,
                    "col": 37
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 10
                },
                "end": {
                    "line": 97,
                    "col": 38
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 8
                },
                "end": {
                    "line": 97,
                    "col": 38
                },
                "type": "Logs.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 92,
                    "col": 6
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 75,
                    "col": 4
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 74,
                    "col": 4
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 73,
                    "col": 21
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "proj_dir:string -> (string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 18
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 0
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 1,
            "pp": 0,
            "reader": 4,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 807,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 102,
                    "col": 52
                },
                "end": {
                    "line": 102,
                    "col": 62
                },
                "type": "'a option -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 102,
                    "col": 52
                },
                "end": {
                    "line": 102,
                    "col": 62
                },
                "type": "Ptime.t option -> Ptime.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 102,
                    "col": 16
                },
                "end": {
                    "line": 102,
                    "col": 62
                },
                "type": "Ptime.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 102,
                    "col": 4
                },
                "end": {
                    "line": 104,
                    "col": 44
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 101,
                    "col": 15
                },
                "end": {
                    "line": 104,
                    "col": 44
                },
                "type": "unit -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 18
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 0
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 806,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 76,
                    "col": 16
                },
                "end": {
                    "line": 76,
                    "col": 27
                },
                "type": "unit -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 76,
                    "col": 16
                },
                "end": {
                    "line": 76,
                    "col": 27
                },
                "type": "unit -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 76,
                    "col": 16
                },
                "end": {
                    "line": 76,
                    "col": 30
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 76,
                    "col": 6
                },
                "end": {
                    "line": 90,
                    "col": 19
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 75,
                    "col": 4
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 74,
                    "col": 4
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "(string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 73,
                    "col": 21
                },
                "end": {
                    "line": 99,
                    "col": 15
                },
                "type": "proj_dir:string -> (string, Logs.t) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 18
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 0
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 23,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 805,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 244,
                    "col": 2
                },
                "end": {
                    "line": 244,
                    "col": 14
                },
                "type": "Fpath.t -> Fpath.t list -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 244,
                    "col": 2
                },
                "end": {
                    "line": 244,
                    "col": 14
                },
                "type": "Fpath.t -> Fpath.t list -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 244,
                    "col": 2
                },
                "end": {
                    "line": 244,
                    "col": 36
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 244,
                    "col": 2
                },
                "end": {
                    "line": 259,
                    "col": 5
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 243,
                    "col": 2
                },
                "end": {
                    "line": 259,
                    "col": 5
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 242,
                    "col": 9
                },
                "end": {
                    "line": 259,
                    "col": 5
                },
                "type": "Fpath.t -> t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 804,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 155,
                    "col": 41
                },
                "end": {
                    "line": 155,
                    "col": 44
                },
                "type": "Command.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 155,
                    "col": 41
                },
                "end": {
                    "line": 155,
                    "col": 44
                },
                "type": "Command.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 155,
                    "col": 26
                },
                "end": {
                    "line": 155,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 155,
                    "col": 16
                },
                "end": {
                    "line": 155,
                    "col": 45
                },
                "type": "(_[< `Read | `Set_and_create > `Set_and_create ], t, Command.t list)\nFieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 152,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 47
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 42
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 32
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 27
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 21
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 15
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?perf:Performance.t ->\n?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 803,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 50,
                    "col": 4
                },
                "end": {
                    "line": 50,
                    "col": 18
                },
                "type": "Format.formatter -> ('a, Format.formatter, unit) format -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 50,
                    "col": 4
                },
                "end": {
                    "line": 50,
                    "col": 18
                },
                "type": "Format.formatter ->\n(string -> unit, Format.formatter, unit) format -> string -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 50,
                    "col": 4
                },
                "end": {
                    "line": 50,
                    "col": 70
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 13
                },
                "end": {
                    "line": 50,
                    "col": 70
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 9
                },
                "end": {
                    "line": 50,
                    "col": 70
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 46,
                    "col": 17
                },
                "end": {
                    "line": 53,
                    "col": 3
                },
                "type": "sig\n  type t = { sample_id : int; cmd : Merlin.Cmd.t; }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 46,
                    "col": 0
                },
                "end": {
                    "line": 53,
                    "col": 3
                },
                "type": "sig\n  type t = { sample_id : int; cmd : Merlin.Cmd.t; }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 802,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 104,
                    "col": 4
                },
                "end": {
                    "line": 104,
                    "col": 18
                },
                "type": "('a, unit, string) format -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 104,
                    "col": 4
                },
                "end": {
                    "line": 104,
                    "col": 18
                },
                "type": "(int -> int -> int -> string, unit, string) format ->\nint -> int -> int -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 104,
                    "col": 4
                },
                "end": {
                    "line": 104,
                    "col": 44
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 103,
                    "col": 4
                },
                "end": {
                    "line": 104,
                    "col": 44
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 102,
                    "col": 4
                },
                "end": {
                    "line": 104,
                    "col": 44
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 101,
                    "col": 15
                },
                "end": {
                    "line": 104,
                    "col": 44
                },
                "type": "unit -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 18
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 0
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 801,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 150,
                    "col": 31
                },
                "end": {
                    "line": 150,
                    "col": 35
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 150,
                    "col": 31
                },
                "end": {
                    "line": 150,
                    "col": 35
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 150,
                    "col": 30
                },
                "end": {
                    "line": 150,
                    "col": 78
                },
                "type": "'a list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 150,
                    "col": 10
                },
                "end": {
                    "line": 150,
                    "col": 78
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 149,
                    "col": 10
                },
                "end": {
                    "line": 150,
                    "col": 78
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 35
                },
                "end": {
                    "line": 150,
                    "col": 78
                },
                "type": "'a option -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 21
                },
                "end": {
                    "line": 150,
                    "col": 78
                },
                "type": "([> `Set_and_create ], t, 'a list) Fieldslib.Field.t_with_perm ->\n'a option -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 47
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 42
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 32
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 27
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 21
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 15
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?perf:Performance.t ->\n?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 32,
            "cpu": 32,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 800,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 262,
                    "col": 50
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "Backend.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 262,
                    "col": 50
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "Backend.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 262,
                    "col": 2
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 43
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 33
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 28
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?log:Logs.t -> ?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 23
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?cmd:Command.t -> ?log:Logs.t -> ?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 17
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?resp:Query_response.t ->\n?cmd:Command.t -> ?log:Logs.t -> ?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 11
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?perf:Performance.t ->\n?resp:Query_response.t ->\n?cmd:Command.t -> ?log:Logs.t -> ?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 4,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 799,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 136,
                    "col": 13
                },
                "end": {
                    "line": 136,
                    "col": 15
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 136,
                    "col": 8
                },
                "end": {
                    "line": 136,
                    "col": 15
                },
                "type": "(module Table)",
                "tail": "no"
            },
            {
                "start": {
                    "line": 133,
                    "col": 8
                },
                "end": {
                    "line": 136,
                    "col": 15
                },
                "type": "(module Table)",
                "tail": "no"
            },
            {
                "start": {
                    "line": 126,
                    "col": 24
                },
                "end": {
                    "line": 136,
                    "col": 15
                },
                "type": "string -> (module Table)",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 36,
            "cpu": 36,
            "query": 10,
            "pp": 0,
            "reader": 1,
            "ppx": 25,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 798,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 228,
                    "col": 48
                },
                "end": {
                    "line": 228,
                    "col": 50
                },
                "type": "path",
                "tail": "no"
            },
            {
                "start": {
                    "line": 228,
                    "col": 48
                },
                "end": {
                    "line": 228,
                    "col": 50
                },
                "type": "path",
                "tail": "no"
            },
            {
                "start": {
                    "line": 228,
                    "col": 37
                },
                "end": {
                    "line": 228,
                    "col": 50
                },
                "type": "path",
                "tail": "no"
            },
            {
                "start": {
                    "line": 228,
                    "col": 24
                },
                "end": {
                    "line": 228,
                    "col": 50
                },
                "type": "ext",
                "tail": "no"
            },
            {
                "start": {
                    "line": 228,
                    "col": 17
                },
                "end": {
                    "line": 228,
                    "col": 51
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 228,
                    "col": 6
                },
                "end": {
                    "line": 230,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 227,
                    "col": 12
                },
                "end": {
                    "line": 230,
                    "col": 23
                },
                "type": "Fpath.t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 227,
                    "col": 2
                },
                "end": {
                    "line": 230,
                    "col": 23
                },
                "type": "Fpath.t list -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 226,
                    "col": 17
                },
                "end": {
                    "line": 230,
                    "col": 23
                },
                "type": "Fpath.t -> Fpath.t list -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 797,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 203,
                    "col": 32
                },
                "end": {
                    "line": 203,
                    "col": 46
                },
                "type": "Format.formatter -> Performance.t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 203,
                    "col": 32
                },
                "end": {
                    "line": 203,
                    "col": 46
                },
                "type": "Format.formatter -> Performance.t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 203,
                    "col": 30
                },
                "end": {
                    "line": 203,
                    "col": 65
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 203,
                    "col": 20
                },
                "end": {
                    "line": 203,
                    "col": 66
                },
                "type": "(_[< `Read | `Set_and_create ], t, Performance.t list)\nFieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 202,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 196,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 195,
                    "col": 21
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 195,
                    "col": 11
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "dump_dir:Fpath.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 32,
            "cpu": 32,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 796,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 153,
                    "col": 45
                },
                "end": {
                    "line": 153,
                    "col": 49
                },
                "type": "Performance.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 153,
                    "col": 45
                },
                "end": {
                    "line": 153,
                    "col": 49
                },
                "type": "Performance.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 153,
                    "col": 30
                },
                "end": {
                    "line": 153,
                    "col": 49
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 153,
                    "col": 20
                },
                "end": {
                    "line": 153,
                    "col": 50
                },
                "type": "(_[< `Read | `Set_and_create > `Set_and_create ], t, Performance.t list)\nFieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 152,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 47
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 42
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 32
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 27
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 21
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 15
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?perf:Performance.t ->\n?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 32,
            "cpu": 31,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 795,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 235,
                    "col": 58
                },
                "end": {
                    "line": 235,
                    "col": 60
                },
                "type": "path",
                "tail": "no"
            },
            {
                "start": {
                    "line": 235,
                    "col": 58
                },
                "end": {
                    "line": 235,
                    "col": 60
                },
                "type": "path",
                "tail": "no"
            },
            {
                "start": {
                    "line": 235,
                    "col": 41
                },
                "end": {
                    "line": 235,
                    "col": 60
                },
                "type": "path",
                "tail": "no"
            },
            {
                "start": {
                    "line": 235,
                    "col": 28
                },
                "end": {
                    "line": 235,
                    "col": 60
                },
                "type": "ext",
                "tail": "no"
            },
            {
                "start": {
                    "line": 235,
                    "col": 21
                },
                "end": {
                    "line": 235,
                    "col": 61
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 235,
                    "col": 12
                },
                "end": {
                    "line": 235,
                    "col": 61
                },
                "type": "out_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 235,
                    "col": 6
                },
                "end": {
                    "line": 239,
                    "col": 15
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 234,
                    "col": 4
                },
                "end": {
                    "line": 239,
                    "col": 16
                },
                "type": "Fpath.t -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 233,
                    "col": 2
                },
                "end": {
                    "line": 240,
                    "col": 16
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 232,
                    "col": 28
                },
                "end": {
                    "line": 240,
                    "col": 16
                },
                "type": "Fpath.t -> bool",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 794,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 143,
                    "col": 9
                },
                "end": {
                    "line": 143,
                    "col": 21
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 143,
                    "col": 9
                },
                "end": {
                    "line": 143,
                    "col": 21
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 139,
                    "col": 4
                },
                "end": {
                    "line": 143,
                    "col": 21
                },
                "type": "Fpath.t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 32,
            "cpu": 32,
            "query": 5,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 793,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 130,
                    "col": 39
                },
                "end": {
                    "line": 130,
                    "col": 44
                },
                "type": "sig val file : Fpath.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 39
                },
                "end": {
                    "line": 130,
                    "col": 44
                },
                "type": "(module Table)",
                "tail": "no"
            },
            {
                "start": {
                    "line": 126,
                    "col": 24
                },
                "end": {
                    "line": 136,
                    "col": 15
                },
                "type": "string -> (module Table)",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 35,
            "cpu": 35,
            "query": 9,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 792,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 205,
                    "col": 26
                },
                "end": {
                    "line": 205,
                    "col": 27
                },
                "type": "(Format.formatter -> 'a -> unit) ->\nFpath.t -> ('b, t, 'a list) Fieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 205,
                    "col": 26
                },
                "end": {
                    "line": 205,
                    "col": 27
                },
                "type": "(Format.formatter -> Command.t -> unit) ->\nFpath.t ->\n(_[< `Read | `Set_and_create ], t, Command.t list)\nFieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 205,
                    "col": 26
                },
                "end": {
                    "line": 205,
                    "col": 53
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 205,
                    "col": 16
                },
                "end": {
                    "line": 205,
                    "col": 54
                },
                "type": "(_[< `Read | `Set_and_create ], t, Command.t list)\nFieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 202,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 196,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 195,
                    "col": 21
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 195,
                    "col": 11
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "dump_dir:Fpath.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 35,
            "cpu": 34,
            "query": 8,
            "pp": 0,
            "reader": 2,
            "ppx": 23,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 791,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 156,
                    "col": 43
                },
                "end": {
                    "line": 156,
                    "col": 51
                },
                "type": "Metadata.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 156,
                    "col": 43
                },
                "end": {
                    "line": 156,
                    "col": 51
                },
                "type": "Metadata.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 156,
                    "col": 27
                },
                "end": {
                    "line": 156,
                    "col": 51
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 156,
                    "col": 16
                },
                "end": {
                    "line": 156,
                    "col": 52
                },
                "type": "(_[< `Read | `Set_and_create > `Set_and_create ], t, Metadata.t list)\nFieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 152,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 47
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 42
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 32
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 27
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 21
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 15
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?perf:Performance.t ->\n?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 5,
            "pp": 0,
            "reader": 1,
            "ppx": 23,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 790,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 262,
                    "col": 50
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "Backend.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 262,
                    "col": 50
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "Backend.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 262,
                    "col": 2
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 43
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 33
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 28
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?log:Logs.t -> ?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 23
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?cmd:Command.t -> ?log:Logs.t -> ?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 17
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?resp:Query_response.t ->\n?cmd:Command.t -> ?log:Logs.t -> ?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 261,
                    "col": 11
                },
                "end": {
                    "line": 262,
                    "col": 57
                },
                "type": "?perf:Performance.t ->\n?resp:Query_response.t ->\n?cmd:Command.t -> ?log:Logs.t -> ?metadata:Metadata.t -> t -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 789,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 264,
                    "col": 33
                },
                "end": {
                    "line": 264,
                    "col": 44
                },
                "type": "dump_dir:Fpath.t -> Backend.t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 264,
                    "col": 33
                },
                "end": {
                    "line": 264,
                    "col": 44
                },
                "type": "dump_dir:Fpath.t -> Backend.t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 264,
                    "col": 33
                },
                "end": {
                    "line": 264,
                    "col": 62
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 264,
                    "col": 9
                },
                "end": {
                    "line": 264,
                    "col": 62
                },
                "type": "t -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 23,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 788,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 142,
                    "col": 18
                },
                "end": {
                    "line": 142,
                    "col": 21
                },
                "type": "Fpath.t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 142,
                    "col": 18
                },
                "end": {
                    "line": 142,
                    "col": 21
                },
                "type": "Fpath.t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 142,
                    "col": 8
                },
                "end": {
                    "line": 142,
                    "col": 21
                },
                "type": "Fpath.t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 142,
                    "col": 8
                },
                "end": {
                    "line": 142,
                    "col": 21
                },
                "type": "Fpath.t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 141,
                    "col": 8
                },
                "end": {
                    "line": 142,
                    "col": 21
                },
                "type": "Fpath.t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 140,
                    "col": 15
                },
                "end": {
                    "line": 142,
                    "col": 21
                },
                "type": "string -> Fpath.t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 140,
                    "col": 6
                },
                "end": {
                    "line": 142,
                    "col": 22
                },
                "type": "Fpath.t list -> string -> Fpath.t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 139,
                    "col": 4
                },
                "end": {
                    "line": 143,
                    "col": 21
                },
                "type": "Fpath.t list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 33,
            "cpu": 33,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 25,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 787,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 198,
                    "col": 23
                },
                "end": {
                    "line": 198,
                    "col": 42
                },
                "type": "('b, 'r, 'a) Fieldslib.Field.t_with_perm -> 'r -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 198,
                    "col": 23
                },
                "end": {
                    "line": 198,
                    "col": 42
                },
                "type": "('a, t, 'b list) Fieldslib.Field.t_with_perm -> t -> 'b list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 198,
                    "col": 23
                },
                "end": {
                    "line": 198,
                    "col": 60
                },
                "type": "'a list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 198,
                    "col": 6
                },
                "end": {
                    "line": 200,
                    "col": 53
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 25
                },
                "end": {
                    "line": 200,
                    "col": 53
                },
                "type": "('a, t, 'b list) Fieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 20
                },
                "end": {
                    "line": 200,
                    "col": 53
                },
                "type": "Fpath.t -> ('a, t, 'b list) Fieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 10
                },
                "end": {
                    "line": 200,
                    "col": 53
                },
                "type": "(Format.formatter -> 'a -> unit) ->\nFpath.t -> ('b, t, 'a list) Fieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 196,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 195,
                    "col": 21
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 195,
                    "col": 11
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "dump_dir:Fpath.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 32,
            "cpu": 32,
            "query": 7,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 786,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 199,
                    "col": 21
                },
                "end": {
                    "line": 199,
                    "col": 34
                },
                "type": "Fpath.t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 199,
                    "col": 21
                },
                "end": {
                    "line": 199,
                    "col": 34
                },
                "type": "Fpath.t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 199,
                    "col": 21
                },
                "end": {
                    "line": 199,
                    "col": 39
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 199,
                    "col": 6
                },
                "end": {
                    "line": 200,
                    "col": 53
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 198,
                    "col": 6
                },
                "end": {
                    "line": 200,
                    "col": 53
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 25
                },
                "end": {
                    "line": 200,
                    "col": 53
                },
                "type": "('a, t, 'b list) Fieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 20
                },
                "end": {
                    "line": 200,
                    "col": 53
                },
                "type": "Fpath.t -> ('a, t, 'b list) Fieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 10
                },
                "end": {
                    "line": 200,
                    "col": 53
                },
                "type": "(Format.formatter -> 'a -> unit) ->\nFpath.t -> ('b, t, 'a list) Fieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 197,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 196,
                    "col": 4
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 195,
                    "col": 21
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 195,
                    "col": 11
                },
                "end": {
                    "line": 207,
                    "col": 44
                },
                "type": "dump_dir:Fpath.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 32,
            "cpu": 31,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 23,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 785,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 41,
                    "col": 23
                },
                "end": {
                    "line": 41,
                    "col": 29
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 23
                },
                "end": {
                    "line": 41,
                    "col": 29
                },
                "type": "(string -> unit, Format.formatter, unit) format",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 4
                },
                "end": {
                    "line": 41,
                    "col": 70
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 13
                },
                "end": {
                    "line": 41,
                    "col": 70
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 9
                },
                "end": {
                    "line": 41,
                    "col": 70
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 24
                },
                "end": {
                    "line": 44,
                    "col": 3
                },
                "type": "sig\n  type t = { sample_id : int; merlin_reply : Merlin.Response.t option; }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 0
                },
                "end": {
                    "line": 44,
                    "col": 3
                },
                "type": "sig\n  type t = { sample_id : int; merlin_reply : Merlin.Response.t option; }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 784,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 154,
                    "col": 34
                },
                "end": {
                    "line": 154,
                    "col": 46
                },
                "type": "([> `Set_and_create ], t, 'a list) Fieldslib.Field.t_with_perm ->\n'a option -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 154,
                    "col": 34
                },
                "end": {
                    "line": 154,
                    "col": 46
                },
                "type": "(_[< `Read | `Set_and_create > `Set_and_create ], t, Query_response.t list)\nFieldslib.Field.t_with_perm -> Query_response.t option -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 154,
                    "col": 34
                },
                "end": {
                    "line": 154,
                    "col": 54
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 154,
                    "col": 23
                },
                "end": {
                    "line": 154,
                    "col": 55
                },
                "type": "(_[< `Read | `Set_and_create > `Set_and_create ], t, Query_response.t list)\nFieldslib.Field.t_with_perm -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 152,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 47
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 42
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 32
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 27
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 21
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 15
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?perf:Performance.t ->\n?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 35,
            "cpu": 35,
            "query": 9,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 783,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 149,
                    "col": 29
                },
                "end": {
                    "line": 149,
                    "col": 39
                },
                "type": "'a option -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 149,
                    "col": 29
                },
                "end": {
                    "line": 149,
                    "col": 39
                },
                "type": "(t -> 'a list -> unit) option -> t -> 'a list -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 149,
                    "col": 29
                },
                "end": {
                    "line": 149,
                    "col": 76
                },
                "type": "t -> 'a list -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 149,
                    "col": 10
                },
                "end": {
                    "line": 150,
                    "col": 78
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 35
                },
                "end": {
                    "line": 150,
                    "col": 78
                },
                "type": "'a option -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 21
                },
                "end": {
                    "line": 150,
                    "col": 78
                },
                "type": "([> `Set_and_create ], t, 'a list) Fieldslib.Field.t_with_perm ->\n'a option -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 146,
                    "col": 4
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 47
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 42
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 32
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 27
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 21
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 15
                },
                "end": {
                    "line": 157,
                    "col": 41
                },
                "type": "?perf:Performance.t ->\n?resp:Query_response.t ->\n?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 782,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 102,
                    "col": 32
                },
                "end": {
                    "line": 102,
                    "col": 48
                },
                "type": "float -> Ptime.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 102,
                    "col": 32
                },
                "end": {
                    "line": 102,
                    "col": 48
                },
                "type": "float -> Ptime.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 102,
                    "col": 16
                },
                "end": {
                    "line": 102,
                    "col": 48
                },
                "type": "Ptime.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 102,
                    "col": 16
                },
                "end": {
                    "line": 102,
                    "col": 62
                },
                "type": "Ptime.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 102,
                    "col": 4
                },
                "end": {
                    "line": 104,
                    "col": 44
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 101,
                    "col": 15
                },
                "end": {
                    "line": 104,
                    "col": 44
                },
                "type": "unit -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 18
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 0
                },
                "end": {
                    "line": 105,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    merlin : Merlin.t;\n    source_code_commit_sha : string option;\n    date : string;\n    total_time : float;\n    query_time : float;\n  }\n  val to_yojson : t -> Yojson.Safe.t\n  val _ : t -> Yojson.Safe.t\n  val pp : Format.formatter -> t -> unit\n  val file : Fpath.t\n  val get_commit_sha : proj_dir:string -> (string, Logs.t) result\n  val get_date : unit -> string\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 781,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 224,
                    "col": 19
                },
                "end": {
                    "line": 224,
                    "col": 24
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 224,
                    "col": 4
                },
                "end": {
                    "line": 224,
                    "col": 24
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 223,
                    "col": 4
                },
                "end": {
                    "line": 224,
                    "col": 24
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 214,
                    "col": 2
                },
                "end": {
                    "line": 224,
                    "col": 24
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 213,
                    "col": 2
                },
                "end": {
                    "line": 224,
                    "col": 24
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 212,
                    "col": 15
                },
                "end": {
                    "line": 224,
                    "col": 24
                },
                "type": "Fpath.t -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 780,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 164,
                    "col": 50
                },
                "end": {
                    "line": 164,
                    "col": 52
                },
                "type": "out_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 164,
                    "col": 50
                },
                "end": {
                    "line": 164,
                    "col": 52
                },
                "type": "out_channel",
                "tail": "no"
            },
            {
                "start": {
                    "line": 164,
                    "col": 18
                },
                "end": {
                    "line": 164,
                    "col": 52
                },
                "type": "Format.formatter",
                "tail": "no"
            },
            {
                "start": {
                    "line": 164,
                    "col": 8
                },
                "end": {
                    "line": 165,
                    "col": 80
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 163,
                    "col": 6
                },
                "end": {
                    "line": 165,
                    "col": 81
                },
                "type": "unit -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 161,
                    "col": 4
                },
                "end": {
                    "line": 165,
                    "col": 81
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 160,
                    "col": 4
                },
                "end": {
                    "line": 165,
                    "col": 81
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 159,
                    "col": 43
                },
                "end": {
                    "line": 165,
                    "col": 81
                },
                "type": "'a list -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 159,
                    "col": 33
                },
                "end": {
                    "line": 165,
                    "col": 81
                },
                "type": "filename:string -> 'a list -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 159,
                    "col": 22
                },
                "end": {
                    "line": 165,
                    "col": 81
                },
                "type": "formatter:(Format.formatter -> 'a -> unit) ->\nfilename:string -> 'a list -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 16
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 0
                },
                "end": {
                    "line": 208,
                    "col": 3
                },
                "type": "sig\n  type t = {\n    mutable performances : Performance.t list;\n    mutable query_responses : Query_response.t list;\n    mutable commands : Command.t list;\n    mutable metadata : Metadata.t list;\n    mutable logs : Logs.t list;\n  }\n  val logs : t -> Logs.t list\n  val set_logs : t -> Logs.t list -> unit\n  val metadata : t -> Metadata.t list\n  val set_metadata : t -> Metadata.t list -> unit\n  val commands : t -> Command.t list\n  val set_commands : t -> Command.t list -> unit\n  val query_responses : t -> Query_response.t list\n  val set_query_responses : t -> Query_response.t list -> unit\n  val performances : t -> Performance.t list\n  val set_performances : t -> Performance.t list -> unit\n  module Fields :\n    sig\n      val names : string list\n      val logs :\n        ([< `Read | `Set_and_create ], t, Logs.t list)\n        Fieldslib.Field.t_with_perm\n      val metadata :\n        ([< `Read | `Set_and_create ], t, Metadata.t list)\n        Fieldslib.Field.t_with_perm\n      val commands :\n        ([< `Read | `Set_and_create ], t, Command.t list)\n        Fieldslib.Field.t_with_perm\n      val query_responses :\n        ([< `Read | `Set_and_create ], t, Query_response.t list)\n        Fieldslib.Field.t_with_perm\n      val performances :\n        ([< `Read | `Set_and_create ], t, Performance.t list)\n        Fieldslib.Field.t_with_perm\n      val make_creator :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      'a -> ('b -> Performance.t list) * 'c) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm ->\n                         'c -> ('b -> Query_response.t list) * 'd) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'd -> ('b -> Command.t list) * 'e) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  'e -> ('b -> Metadata.t list) * 'f) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f -> ('b -> Logs.t list) * 'g) ->\n        'a -> ('b -> t) * 'g\n      val create :\n        performances:Performance.t list ->\n        query_responses:Query_response.t list ->\n        commands:Command.t list ->\n        metadata:Metadata.t list -> logs:Logs.t list -> t\n      val map :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> Performance.t list) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> Query_response.t list) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> Command.t list) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> Metadata.t list) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> Logs.t list) ->\n        t\n      val iter :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> unit) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> unit) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> unit) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> unit) ->\n        unit\n      val fold :\n        init:'a ->\n        performances:('a ->\n                      ([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'b) ->\n        query_responses:('b ->\n                         ([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'c) ->\n        commands:('c ->\n                  ([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'd) ->\n        metadata:('d ->\n                  ([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'e) ->\n        logs:('e ->\n              ([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'f) ->\n        'f\n      val map_poly :\n        ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user -> 'a list\n      val for_all :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val exists :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> bool) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> bool) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> bool) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> bool) ->\n        bool\n      val to_list :\n        performances:(([< `Read | `Set_and_create ], t, Performance.t list)\n                      Fieldslib.Field.t_with_perm -> 'a) ->\n        query_responses:(([< `Read | `Set_and_create ], t,\n                          Query_response.t list)\n                         Fieldslib.Field.t_with_perm -> 'a) ->\n        commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                  Fieldslib.Field.t_with_perm -> 'a) ->\n        logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n              Fieldslib.Field.t_with_perm -> 'a) ->\n        'a list\n      module Direct :\n        sig\n          val iter :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> unit) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> unit) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> unit) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> unit) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a\n          val fold :\n            t ->\n            init:'a ->\n            performances:('a ->\n                          ([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'b) ->\n            query_responses:('b ->\n                             ([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'c) ->\n            commands:('c ->\n                      ([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'd) ->\n            metadata:('d ->\n                      ([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'e) ->\n            logs:('e ->\n                  ([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'f) ->\n            'f\n          val for_all :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val exists :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> bool) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> bool) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> bool) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> bool) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> bool) ->\n            bool\n          val to_list :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> 'a) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t -> Query_response.t list -> 'a) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> 'a) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> 'a) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm -> t -> Logs.t list -> 'a) ->\n            'a list\n          val map :\n            t ->\n            performances:(([< `Read | `Set_and_create ], t,\n                           Performance.t list)\n                          Fieldslib.Field.t_with_perm ->\n                          t -> Performance.t list -> Performance.t list) ->\n            query_responses:(([< `Read | `Set_and_create ], t,\n                              Query_response.t list)\n                             Fieldslib.Field.t_with_perm ->\n                             t ->\n                             Query_response.t list -> Query_response.t list) ->\n            commands:(([< `Read | `Set_and_create ], t, Command.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Command.t list -> Command.t list) ->\n            metadata:(([< `Read | `Set_and_create ], t, Metadata.t list)\n                      Fieldslib.Field.t_with_perm ->\n                      t -> Metadata.t list -> Metadata.t list) ->\n            logs:(([< `Read | `Set_and_create ], t, Logs.t list)\n                  Fieldslib.Field.t_with_perm ->\n                  t -> Logs.t list -> Logs.t list) ->\n            t\n          val set_all_mutable_fields :\n            t ->\n            performances:Performance.t list ->\n            query_responses:Query_response.t list ->\n            commands:Command.t list ->\n            metadata:Metadata.t list -> logs:Logs.t list -> unit\n        end\n    end\n  val table_of_string : string -> (module Table)\n  val files : Fpath.t list\n  val add_data :\n    ?perf:Performance.t ->\n    ?resp:Query_response.t ->\n    ?cmd:Command.t -> ?metadata:Metadata.t -> ?log:Logs.t -> t -> unit\n  val write_json_list :\n    formatter:(Format.formatter -> 'a -> unit) ->\n    filename:string -> 'a list -> unit\n  val dump : dump_dir:Fpath.t -> t -> unit\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 32,
            "cpu": 32,
            "query": 6,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 779,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 254,
                    "col": 28
                },
                "end": {
                    "line": 254,
                    "col": 30
                }
            },
            "(match [] with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 778,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 86,
                    "col": 17
                },
                "end": {
                    "line": 87,
                    "col": 49
                }
            },
            "(match \"Warning: something went wrong trying to get the commit sha of the source code project: %s\"\nwith\n| \"\" -> _\n| _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 27,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 777,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 90,
                    "col": 16
                },
                "end": {
                    "line": 90,
                    "col": 19
                }
            },
            "(match err with | Logs.Error _ -> _ | Logs.Warning _ -> _ | Logs.Log _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 776,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 69,
                    "col": 64
                },
                "end": {
                    "line": 69,
                    "col": 68
                }
            },
            "(match data with\n| { merlin; source_code_commit_sha; date; total_time; query_time } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 29,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 775,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 228,
                    "col": 17
                },
                "end": {
                    "line": 228,
                    "col": 51
                }
            },
            "match let open Fpath in to_string (append dir fn) with | \"\" -> _ | _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 774,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 773,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 772,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 246,
                    "col": 4
                },
                "end": {
                    "line": 246,
                    "col": 69
                }
            },
            "(match Format.eprintf\n        (CamlinternalFormatBasics.Format\n           ((CamlinternalFormatBasics.String_literal\n               (\"It's not possible to write to the data files\\n\",\n                 (CamlinternalFormatBasics.Flush\n                    CamlinternalFormatBasics.End_of_format))),\n             \"It's not possible to write to the data files\\n%!\"))\nwith\n| () -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 771,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 256,
                    "col": 21
                },
                "end": {
                    "line": 256,
                    "col": 23
                }
            },
            "(match [] with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 770,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 235,
                    "col": 6
                },
                "end": {
                    "line": 239,
                    "col": 15
                }
            },
            "(match match open_out (let open Fpath in to_string (append data_path fn)) with\n      | exception _ -> true\n      | oc -> (close_out_noerr oc; false)\nwith\n| false -> _\n| true -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 769,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 104,
                    "col": 40
                },
                "end": {
                    "line": 104,
                    "col": 44
                }
            },
            "(match year with | 0 -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 768,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 206,
                    "col": 55
                },
                "end": {
                    "line": 206,
                    "col": 57
                }
            },
            "(match md with | Fieldslib.Field.Field _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 767,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 766,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 765,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 223,
                    "col": 4
                },
                "end": {
                    "line": 224,
                    "col": 24
                }
            },
            "(match let dir = Fpath.to_string data_path in Unix.mkdir dir 511 with\n| () -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 764,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 134,
                    "col": 10
                },
                "end": {
                    "line": 135,
                    "col": 28
                }
            },
            "(match \"Probably, there's a typo or an exhausitveness problem somewhere in the Data module.\"\nwith\n| \"\" -> _\n| _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 763,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 103,
                    "col": 32
                },
                "end": {
                    "line": 103,
                    "col": 56
                }
            },
            "match Ptime.to_date_time ?tz_offset_s:None epoch with | (_, _) -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 762,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 761,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 150,
                    "col": 10
                },
                "end": {
                    "line": 150,
                    "col": 78
                }
            },
            "(match field_setter tables (data :: (Fieldslib.Field.get table_field tables))\nwith\n| () -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 760,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 759,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: out_channel",
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 758,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 128,
                    "col": 27
                },
                "end": {
                    "line": 128,
                    "col": 58
                }
            },
            "let module M = (val ((module Query_response) : (module Table))) in _"
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 757,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 161,
                    "col": 4
                },
                "end": {
                    "line": 165,
                    "col": 81
                }
            },
            "match Fun.protect ~finally:(fun () -> close_out_noerr oc)\n        (fun () ->\n           let ppf = Format.formatter_of_out_channel oc in\n           Format.pp_print_list ?pp_sep:(Some Format.pp_print_newline)\n             formatter ppf table)\nwith\n| () -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 756,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: out_channel",
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 755,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: formatter",
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 754,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 261,
                    "col": 45
                },
                "end": {
                    "line": 261,
                    "col": 52
                }
            },
            "{ performances; query_responses; commands; metadata; logs }"
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 753,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 141,
                    "col": 41
                },
                "end": {
                    "line": 141,
                    "col": 51
                }
            },
            "(match field_name with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 752,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 97,
                    "col": 13
                },
                "end": {
                    "line": 97,
                    "col": 37
                }
            },
            "(match Printexc.to_string exc with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 751,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 199,
                    "col": 6
                },
                "end": {
                    "line": 200,
                    "col": 53
                }
            },
            "match let filename = get_file_path file in\n      write_json_list ~formatter ~filename data_piece\nwith\n| () -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 750,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 749,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/fpath/fpath.mli",
            "pos": {
                "line": 50,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 748,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/base/list.mli",
            "pos": {
                "line": 211,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 30,
            "query": 1,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 747,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 140,
                "col": 11
            }
        },
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 746,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 745,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 29,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 744,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/unix/unix.mli",
            "pos": {
                "line": 1212,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 743,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 172,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 742,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 146,
                "col": 21
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 741,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 205,
                "col": 21
            }
        },
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 740,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 116,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 739,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 30,
            "query": 5,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 738,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 18,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 737,
    "merlin_reply": {
        "class": "return",
        "value": "Several source files in your path have the same name, and merlin doesn't know which is the right one: /home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/astlib/location.ml, /home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/astlib/location.mli, /home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/location.ml, /home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/location.mli, /home/sonja/.opam/5.0.0~alpha0/lib/ocaml/compiler-libs/location.mli",
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 736,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 207,
                "col": 17
            }
        },
        "notifications": [],
        "timing": {
            "clock": 37,
            "cpu": 28,
            "query": 1,
            "pp": 0,
            "reader": 2,
            "ppx": 25,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 735,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 4,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 734,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 196,
                "col": 22
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 733,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 156,
                "col": 21
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 732,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 242,
                "col": 9
            }
        },
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 731,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 223,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 730,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 172,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 729,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 68,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 728,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/format.ml",
            "pos": {
                "line": 1252,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 727,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 145,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 726,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 261,
                "col": 29
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 725,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.mli",
            "pos": {
                "line": 39,
                "col": 13
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 724,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 213,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 723,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 32,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 722,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/base/field.ml",
            "pos": {
                "line": 58,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 721,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 228,
                "col": 10
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 720,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.ml",
            "pos": {
                "line": 138,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 24,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 702,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 20,
                    "col": 13
                },
                "end": {
                    "line": 20,
                    "col": 18
                }
            },
            {
                "start": {
                    "line": 24,
                    "col": 2
                },
                "end": {
                    "line": 24,
                    "col": 7
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 701,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 1,
                    "col": 5
                },
                "end": {
                    "line": 1,
                    "col": 6
                }
            },
            {
                "start": {
                    "line": 9,
                    "col": 3
                },
                "end": {
                    "line": 9,
                    "col": 4
                }
            },
            {
                "start": {
                    "line": 23,
                    "col": 2
                },
                "end": {
                    "line": 23,
                    "col": 3
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 700,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 22,
                    "col": 2
                },
                "end": {
                    "line": 22,
                    "col": 8
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 699,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 14
                },
                "end": {
                    "line": 5,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 6,
                    "col": 13
                },
                "end": {
                    "line": 6,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 9,
                    "col": 7
                },
                "end": {
                    "line": 9,
                    "col": 10
                }
            },
            {
                "start": {
                    "line": 21,
                    "col": 21
                },
                "end": {
                    "line": 21,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 698,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 20,
                    "col": 13
                },
                "end": {
                    "line": 20,
                    "col": 18
                }
            },
            {
                "start": {
                    "line": 24,
                    "col": 2
                },
                "end": {
                    "line": 24,
                    "col": 7
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 697,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 19,
                    "col": 9
                },
                "end": {
                    "line": 19,
                    "col": 17
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 3,
            "error": 0
        }
    }
}
{
    "sample_id": 696,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 14
                },
                "end": {
                    "line": 5,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 6,
                    "col": 13
                },
                "end": {
                    "line": 6,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 9,
                    "col": 7
                },
                "end": {
                    "line": 9,
                    "col": 10
                }
            },
            {
                "start": {
                    "line": 21,
                    "col": 21
                },
                "end": {
                    "line": 21,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 695,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 1,
                    "col": 5
                },
                "end": {
                    "line": 1,
                    "col": 6
                }
            },
            {
                "start": {
                    "line": 9,
                    "col": 3
                },
                "end": {
                    "line": 9,
                    "col": 4
                }
            },
            {
                "start": {
                    "line": 23,
                    "col": 2
                },
                "end": {
                    "line": 23,
                    "col": 3
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 694,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 9,
                    "col": 12
                },
                "end": {
                    "line": 9,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 693,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 8,
                    "col": 21
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 692,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 7,
                    "col": 8
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 691,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 14
                },
                "end": {
                    "line": 5,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 6,
                    "col": 13
                },
                "end": {
                    "line": 6,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 9,
                    "col": 7
                },
                "end": {
                    "line": 9,
                    "col": 10
                }
            },
            {
                "start": {
                    "line": 21,
                    "col": 21
                },
                "end": {
                    "line": 21,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 690,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 14
                },
                "end": {
                    "line": 5,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 6,
                    "col": 13
                },
                "end": {
                    "line": 6,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 9,
                    "col": 7
                },
                "end": {
                    "line": 9,
                    "col": 10
                }
            },
            {
                "start": {
                    "line": 21,
                    "col": 21
                },
                "end": {
                    "line": 21,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 662,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 661,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 660,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 37,
            "cpu": 37,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 36,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 632,
    "merlin_reply": {
        "class": "error",
        "value": "Nothing to do",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 631,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on signature",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 630,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on signature",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 612,
    "merlin_reply": {
        "class": "return",
        "value": "\"float\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 611,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.mli",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 610,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.mli",
            "pos": {
                "line": 52,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 609,
    "merlin_reply": {
        "class": "return",
        "value": "\"int\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 608,
    "merlin_reply": {
        "class": "return",
        "value": "\"float\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 9,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 607,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 4,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 606,
    "merlin_reply": {
        "class": "return",
        "value": "\"int\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 605,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.mli",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 604,
    "merlin_reply": {
        "class": "return",
        "value": "\"option\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 603,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 19,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 602,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.ml",
            "pos": {
                "line": 3,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 601,
    "merlin_reply": {
        "class": "return",
        "value": "\"int\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 600,
    "merlin_reply": {
        "class": "return",
        "value": "\"int\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 585,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 15,
                    "col": 22
                },
                "end": {
                    "line": 15,
                    "col": 48
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 43,
            "cpu": 42,
            "query": 24,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 584,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 1,
                    "col": 5
                },
                "end": {
                    "line": 1,
                    "col": 6
                }
            },
            {
                "start": {
                    "line": 4,
                    "col": 16
                },
                "end": {
                    "line": 4,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 5,
                    "col": 29
                },
                "end": {
                    "line": 5,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 7,
                    "col": 15
                },
                "end": {
                    "line": 7,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 40
                },
                "end": {
                    "line": 11,
                    "col": 41
                }
            },
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 583,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 48
                },
                "end": {
                    "line": 11,
                    "col": 61
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 582,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 1,
                    "col": 5
                },
                "end": {
                    "line": 1,
                    "col": 6
                }
            },
            {
                "start": {
                    "line": 4,
                    "col": 16
                },
                "end": {
                    "line": 4,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 5,
                    "col": 29
                },
                "end": {
                    "line": 5,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 7,
                    "col": 15
                },
                "end": {
                    "line": 7,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 40
                },
                "end": {
                    "line": 11,
                    "col": 41
                }
            },
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 581,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 20
                },
                "end": {
                    "line": 11,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 42
                },
                "end": {
                    "line": 11,
                    "col": 46
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 580,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 63
                },
                "end": {
                    "line": 11,
                    "col": 69
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 579,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 28
                },
                "end": {
                    "line": 11,
                    "col": 35
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 578,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 7,
                    "col": 20
                },
                "end": {
                    "line": 7,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 13
                },
                "end": {
                    "line": 11,
                    "col": 19
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 3,
            "error": 0
        }
    }
}
{
    "sample_id": 577,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 20
                },
                "end": {
                    "line": 11,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 42
                },
                "end": {
                    "line": 11,
                    "col": 46
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 576,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 7,
                    "col": 20
                },
                "end": {
                    "line": 7,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 13
                },
                "end": {
                    "line": 11,
                    "col": 19
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 575,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 1,
                    "col": 5
                },
                "end": {
                    "line": 1,
                    "col": 6
                }
            },
            {
                "start": {
                    "line": 4,
                    "col": 16
                },
                "end": {
                    "line": 4,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 5,
                    "col": 29
                },
                "end": {
                    "line": 5,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 7,
                    "col": 15
                },
                "end": {
                    "line": 7,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 40
                },
                "end": {
                    "line": 11,
                    "col": 41
                }
            },
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 574,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 34
                },
                "end": {
                    "line": 5,
                    "col": 38
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 573,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 1,
                    "col": 5
                },
                "end": {
                    "line": 1,
                    "col": 6
                }
            },
            {
                "start": {
                    "line": 4,
                    "col": 16
                },
                "end": {
                    "line": 4,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 5,
                    "col": 29
                },
                "end": {
                    "line": 5,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 7,
                    "col": 15
                },
                "end": {
                    "line": 7,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 40
                },
                "end": {
                    "line": 11,
                    "col": 41
                }
            },
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 572,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 9
                },
                "end": {
                    "line": 5,
                    "col": 25
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 30,
            "cpu": 30,
            "query": 12,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 571,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 4,
                    "col": 21
                },
                "end": {
                    "line": 4,
                    "col": 34
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 570,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 1,
                    "col": 5
                },
                "end": {
                    "line": 1,
                    "col": 6
                }
            },
            {
                "start": {
                    "line": 4,
                    "col": 16
                },
                "end": {
                    "line": 4,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 5,
                    "col": 29
                },
                "end": {
                    "line": 5,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 7,
                    "col": 15
                },
                "end": {
                    "line": 7,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 40
                },
                "end": {
                    "line": 11,
                    "col": 41
                }
            },
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 18
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 543,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 542,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 541,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 540,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 513,
    "merlin_reply": {
        "class": "error",
        "value": "Nothing to do",
        "notifications": [],
        "timing": {
            "clock": 39,
            "cpu": 39,
            "query": 0,
            "pp": 0,
            "reader": 21,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 512,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on signature",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 511,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on signature",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 510,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on signature",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 495,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/astlib/ast_412.ml",
            "pos": {
                "line": 928,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 494,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.mli",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 493,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/rresult/rresult.mli",
            "pos": {
                "line": 98,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 492,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.mli",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 491,
    "merlin_reply": {
        "class": "return",
        "value": "\"list\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 490,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 246,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 489,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/fpath/fpath.mli",
            "pos": {
                "line": 50,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 488,
    "merlin_reply": {
        "class": "return",
        "value": "\"string\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 487,
    "merlin_reply": {
        "class": "return",
        "value": "\"list\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 486,
    "merlin_reply": {
        "class": "return",
        "value": "\"string\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 485,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.mli",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 484,
    "merlin_reply": {
        "class": "return",
        "value": "\"unit\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 483,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.mli",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 482,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/format.ml",
            "pos": {
                "line": 136,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 481,
    "merlin_reply": {
        "class": "return",
        "value": "'Yojson.Safe.t' seems to originate from 'Type' whose ML file could not be found",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 480,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/file.mli",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 479,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 20,
                    "col": 9
                },
                "end": {
                    "line": 20,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 20,
                    "col": 9
                },
                "end": {
                    "line": 20,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 28,
                    "col": 9
                },
                "end": {
                    "line": 28,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 28,
                    "col": 9
                },
                "end": {
                    "line": 28,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 40,
                    "col": 10
                },
                "end": {
                    "line": 40,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 40,
                    "col": 10
                },
                "end": {
                    "line": 40,
                    "col": 27
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 478,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 69,
                    "col": 39
                },
                "end": {
                    "line": 69,
                    "col": 41
                }
            },
            {
                "start": {
                    "line": 75,
                    "col": 36
                },
                "end": {
                    "line": 75,
                    "col": 38
                }
            },
            {
                "start": {
                    "line": 116,
                    "col": 12
                },
                "end": {
                    "line": 116,
                    "col": 14
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 477,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 11,
                    "col": 43
                }
            },
            {
                "start": {
                    "line": 20,
                    "col": 39
                },
                "end": {
                    "line": 20,
                    "col": 49
                }
            },
            {
                "start": {
                    "line": 28,
                    "col": 39
                },
                "end": {
                    "line": 28,
                    "col": 49
                }
            },
            {
                "start": {
                    "line": 40,
                    "col": 40
                },
                "end": {
                    "line": 40,
                    "col": 50
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 476,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 103,
                    "col": 6
                },
                "end": {
                    "line": 103,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 110,
                    "col": 10
                },
                "end": {
                    "line": 110,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 134,
                    "col": 16
                },
                "end": {
                    "line": 134,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 16
                },
                "end": {
                    "line": 138,
                    "col": 27
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 475,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 18,
                    "col": 43
                },
                "end": {
                    "line": 18,
                    "col": 46
                }
            },
            {
                "start": {
                    "line": 44,
                    "col": 32
                },
                "end": {
                    "line": 44,
                    "col": 35
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 474,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 109,
                    "col": 37
                },
                "end": {
                    "line": 109,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 137,
                    "col": 43
                },
                "end": {
                    "line": 137,
                    "col": 61
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 473,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 52,
                    "col": 38
                },
                "end": {
                    "line": 52,
                    "col": 42
                }
            },
            {
                "start": {
                    "line": 53,
                    "col": 24
                },
                "end": {
                    "line": 53,
                    "col": 28
                }
            },
            {
                "start": {
                    "line": 58,
                    "col": 53
                },
                "end": {
                    "line": 58,
                    "col": 57
                }
            },
            {
                "start": {
                    "line": 72,
                    "col": 23
                },
                "end": {
                    "line": 72,
                    "col": 27
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 472,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 88,
                    "col": 6
                },
                "end": {
                    "line": 88,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 91,
                    "col": 3
                },
                "end": {
                    "line": 91,
                    "col": 10
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 471,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 20,
                    "col": 50
                },
                "end": {
                    "line": 20,
                    "col": 59
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 470,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 11,
                    "col": 43
                }
            },
            {
                "start": {
                    "line": 20,
                    "col": 39
                },
                "end": {
                    "line": 20,
                    "col": 49
                }
            },
            {
                "start": {
                    "line": 28,
                    "col": 39
                },
                "end": {
                    "line": 28,
                    "col": 49
                }
            },
            {
                "start": {
                    "line": 40,
                    "col": 40
                },
                "end": {
                    "line": 40,
                    "col": 50
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 469,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 20,
                    "col": 28
                },
                "end": {
                    "line": 20,
                    "col": 38
                }
            },
            {
                "start": {
                    "line": 28,
                    "col": 28
                },
                "end": {
                    "line": 28,
                    "col": 38
                }
            },
            {
                "start": {
                    "line": 40,
                    "col": 29
                },
                "end": {
                    "line": 40,
                    "col": 39
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 468,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 93,
                    "col": 69
                }
            },
            {
                "start": {
                    "line": 103,
                    "col": 23
                },
                "end": {
                    "line": 103,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 110,
                    "col": 27
                },
                "end": {
                    "line": 110,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 134,
                    "col": 45
                },
                "end": {
                    "line": 134,
                    "col": 49
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 33
                },
                "end": {
                    "line": 138,
                    "col": 37
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 467,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 100,
                    "col": 14
                },
                "end": {
                    "line": 100,
                    "col": 35
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 466,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 94,
                    "col": 15
                },
                "end": {
                    "line": 94,
                    "col": 19
                }
            },
            {
                "start": {
                    "line": 100,
                    "col": 54
                },
                "end": {
                    "line": 100,
                    "col": 58
                }
            },
            {
                "start": {
                    "line": 107,
                    "col": 55
                },
                "end": {
                    "line": 107,
                    "col": 59
                }
            },
            {
                "start": {
                    "line": 117,
                    "col": 51
                },
                "end": {
                    "line": 117,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 124,
                    "col": 20
                },
                "end": {
                    "line": 124,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 465,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 38,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 48,
                    "col": 24
                },
                "end": {
                    "line": 48,
                    "col": 25
                }
            },
            {
                "start": {
                    "line": 49,
                    "col": 27
                },
                "end": {
                    "line": 49,
                    "col": 28
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 464,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 75,
                    "col": 53
                },
                "end": {
                    "line": 75,
                    "col": 56
                }
            },
            {
                "start": {
                    "line": 75,
                    "col": 75
                },
                "end": {
                    "line": 75,
                    "col": 78
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 463,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 113,
                    "col": 14
                },
                "end": {
                    "line": 113,
                    "col": 18
                }
            },
            {
                "start": {
                    "line": 135,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 139,
                    "col": 16
                },
                "end": {
                    "line": 139,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 141,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 10
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 4,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 462,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 23
                },
                "end": {
                    "line": 38,
                    "col": 32
                }
            },
            {
                "start": {
                    "line": 46,
                    "col": 43
                },
                "end": {
                    "line": 46,
                    "col": 52
                }
            },
            {
                "start": {
                    "line": 49,
                    "col": 30
                },
                "end": {
                    "line": 49,
                    "col": 39
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 461,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 38,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 48,
                    "col": 24
                },
                "end": {
                    "line": 48,
                    "col": 25
                }
            },
            {
                "start": {
                    "line": 49,
                    "col": 27
                },
                "end": {
                    "line": 49,
                    "col": 28
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 460,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 103,
                    "col": 6
                },
                "end": {
                    "line": 103,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 110,
                    "col": 10
                },
                "end": {
                    "line": 110,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 134,
                    "col": 16
                },
                "end": {
                    "line": 134,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 16
                },
                "end": {
                    "line": 138,
                    "col": 27
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 459,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 94,
                    "col": 15
                },
                "end": {
                    "line": 94,
                    "col": 19
                }
            },
            {
                "start": {
                    "line": 100,
                    "col": 54
                },
                "end": {
                    "line": 100,
                    "col": 58
                }
            },
            {
                "start": {
                    "line": 107,
                    "col": 55
                },
                "end": {
                    "line": 107,
                    "col": 59
                }
            },
            {
                "start": {
                    "line": 117,
                    "col": 51
                },
                "end": {
                    "line": 117,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 124,
                    "col": 20
                },
                "end": {
                    "line": 124,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 458,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 52,
                    "col": 38
                },
                "end": {
                    "line": 52,
                    "col": 42
                }
            },
            {
                "start": {
                    "line": 53,
                    "col": 24
                },
                "end": {
                    "line": 53,
                    "col": 28
                }
            },
            {
                "start": {
                    "line": 58,
                    "col": 53
                },
                "end": {
                    "line": 58,
                    "col": 57
                }
            },
            {
                "start": {
                    "line": 72,
                    "col": 23
                },
                "end": {
                    "line": 72,
                    "col": 27
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 457,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 89,
                    "col": 32
                },
                "end": {
                    "line": 89,
                    "col": 43
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 456,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 58,
                    "col": 25
                },
                "end": {
                    "line": 58,
                    "col": 52
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 455,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 68,
                    "col": 10
                },
                "end": {
                    "line": 68,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 72,
                    "col": 14
                },
                "end": {
                    "line": 72,
                    "col": 21
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 454,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 35,
                    "col": 26
                },
                "end": {
                    "line": 35,
                    "col": 28
                }
            },
            {
                "start": {
                    "line": 36,
                    "col": 26
                },
                "end": {
                    "line": 36,
                    "col": 28
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 453,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 26
                },
                "end": {
                    "line": 27,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 30,
                    "col": 41
                },
                "end": {
                    "line": 30,
                    "col": 50
                }
            },
            {
                "start": {
                    "line": 33,
                    "col": 31
                },
                "end": {
                    "line": 33,
                    "col": 40
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 452,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 78,
                    "col": 43
                },
                "end": {
                    "line": 78,
                    "col": 46
                }
            },
            {
                "start": {
                    "line": 80,
                    "col": 30
                },
                "end": {
                    "line": 80,
                    "col": 33
                }
            },
            {
                "start": {
                    "line": 84,
                    "col": 33
                },
                "end": {
                    "line": 84,
                    "col": 36
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 451,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 3,
                    "col": 21
                },
                "end": {
                    "line": 3,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 450,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 0,
                    "col": -1
                },
                "end": {
                    "line": 0,
                    "col": -1
                }
            },
            {
                "start": {
                    "line": 30,
                    "col": 64
                },
                "end": {
                    "line": 30,
                    "col": 68
                }
            },
            {
                "start": {
                    "line": 46,
                    "col": 59
                },
                "end": {
                    "line": 46,
                    "col": 63
                }
            },
            {
                "start": {
                    "line": 54,
                    "col": 19
                },
                "end": {
                    "line": 54,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 62,
                    "col": 54
                },
                "end": {
                    "line": 62,
                    "col": 58
                }
            },
            {
                "start": {
                    "line": 75,
                    "col": 27
                },
                "end": {
                    "line": 75,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 89,
                    "col": 44
                },
                "end": {
                    "line": 89,
                    "col": 48
                }
            },
            {
                "start": {
                    "line": 96,
                    "col": 4
                },
                "end": {
                    "line": 96,
                    "col": 8
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 23,
            "query": 4,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 449,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 138,
                    "col": 16
                },
                "end": {
                    "line": 138,
                    "col": 27
                },
                "type": "?perf:Data.Performance.t ->\n?resp:Data.Query_response.t ->\n?cmd:Data.Command.t ->\n?log:Data.Logs.t -> ?metadata:Data.Metadata.t -> Data.t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 16
                },
                "end": {
                    "line": 138,
                    "col": 27
                },
                "type": "?perf:Data.Performance.t ->\n?resp:Data.Query_response.t ->\n?cmd:Data.Command.t ->\n?log:Data.Logs.t -> ?metadata:Data.Metadata.t -> Data.t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 16
                },
                "end": {
                    "line": 138,
                    "col": 37
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 16
                },
                "end": {
                    "line": 139,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 137,
                    "col": 16
                },
                "end": {
                    "line": 139,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 118,
                    "col": 12
                },
                "end": {
                    "line": 139,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 116,
                    "col": 45
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 114,
                    "col": 8
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 31
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 19
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "query_time:float -> sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 106,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 448,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 134,
                    "col": 45
                },
                "end": {
                    "line": 134,
                    "col": 49
                },
                "type": "Data.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 134,
                    "col": 45
                },
                "end": {
                    "line": 134,
                    "col": 49
                },
                "type": "Data.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 134,
                    "col": 16
                },
                "end": {
                    "line": 134,
                    "col": 49
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 134,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 133,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 120,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 118,
                    "col": 12
                },
                "end": {
                    "line": 139,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 116,
                    "col": 45
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 114,
                    "col": 8
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 31
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 19
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "query_time:float -> sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 106,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 447,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 117,
                    "col": 57
                },
                "end": {
                    "line": 117,
                    "col": 60
                },
                "type": "Warnings.loc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 117,
                    "col": 57
                },
                "end": {
                    "line": 117,
                    "col": 60
                },
                "type": "Warnings.loc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 117,
                    "col": 22
                },
                "end": {
                    "line": 117,
                    "col": 67
                },
                "type": "Merlin.Cmd.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 116,
                    "col": 45
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 114,
                    "col": 8
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 31
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 19
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "query_time:float -> sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 106,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 446,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 91,
                    "col": 34
                },
                "end": {
                    "line": 91,
                    "col": 44
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 91,
                    "col": 34
                },
                "end": {
                    "line": 91,
                    "col": 44
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 91,
                    "col": 2
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 2
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 2
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 54
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "Merlin.Cmd.t -> int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 35
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "int -> Merlin.Cmd.t -> int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 23
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "query_time:float ->\nint -> Merlin.Cmd.t -> int list * int * Merlin.Response.t option * float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 445,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 133,
                    "col": 53
                },
                "end": {
                    "line": 133,
                    "col": 55
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 133,
                    "col": 53
                },
                "end": {
                    "line": 133,
                    "col": 55
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 133,
                    "col": 26
                },
                "end": {
                    "line": 133,
                    "col": 62
                },
                "type": "Data.Command.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 133,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 120,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 118,
                    "col": 12
                },
                "end": {
                    "line": 139,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 116,
                    "col": 45
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 114,
                    "col": 8
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 31
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 19
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "query_time:float -> sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 106,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 444,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 124,
                    "col": 20
                },
                "end": {
                    "line": 124,
                    "col": 24
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 124,
                    "col": 20
                },
                "end": {
                    "line": 124,
                    "col": 24
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 121,
                    "col": 18
                },
                "end": {
                    "line": 128,
                    "col": 19
                },
                "type": "Data.Performance.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 120,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 118,
                    "col": 12
                },
                "end": {
                    "line": 139,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 116,
                    "col": 45
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 114,
                    "col": 8
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 31
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 19
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "query_time:float -> sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 106,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 443,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 72,
                    "col": 56
                },
                "end": {
                    "line": 72,
                    "col": 67
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 56
                },
                "end": {
                    "line": 72,
                    "col": 67
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 43
                },
                "end": {
                    "line": 72,
                    "col": 67
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 11
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "t * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 68,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 60,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 59,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 2
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 43
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 38
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 26
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "id_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 13
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "sample_size:int ->\nid_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 442,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 70,
                    "col": 55
                },
                "end": {
                    "line": 70,
                    "col": 64
                },
                "type": "(Warnings.loc * Longident.t option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 55
                },
                "end": {
                    "line": 70,
                    "col": 64
                },
                "type": "(Warnings.loc * Longident.t option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 8
                },
                "end": {
                    "line": 70,
                    "col": 64
                },
                "type": "sample list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 69,
                    "col": 8
                },
                "end": {
                    "line": 70,
                    "col": 64
                },
                "type": "sample list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 68,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 60,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 59,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 2
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 43
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 38
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 26
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "id_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 13
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "sample_size:int ->\nid_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 441,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 22,
                    "col": 66
                },
                "end": {
                    "line": 22,
                    "col": 79
                },
                "type": "longident",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 66
                },
                "end": {
                    "line": 22,
                    "col": 79
                },
                "type": "longident",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 61
                },
                "end": {
                    "line": 22,
                    "col": 79
                },
                "type": "longident option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 51
                },
                "end": {
                    "line": 22,
                    "col": 80
                },
                "type": "location * longident option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 10
                },
                "end": {
                    "line": 22,
                    "col": 80
                },
                "type": "(location * longident option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 8
                },
                "end": {
                    "line": 24,
                    "col": 30
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 6
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 8
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 26
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "Ast.longident_loc ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 26
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\nAst.longident_loc ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 4
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "Ast.longident_loc ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 47,
            "cpu": 47,
            "query": 24,
            "pp": 0,
            "reader": 3,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 440,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 22,
                    "col": 66
                },
                "end": {
                    "line": 22,
                    "col": 79
                },
                "type": "longident",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 66
                },
                "end": {
                    "line": 22,
                    "col": 79
                },
                "type": "longident",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 61
                },
                "end": {
                    "line": 22,
                    "col": 79
                },
                "type": "longident option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 51
                },
                "end": {
                    "line": 22,
                    "col": 80
                },
                "type": "location * longident option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 10
                },
                "end": {
                    "line": 22,
                    "col": 80
                },
                "type": "(location * longident option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 8
                },
                "end": {
                    "line": 24,
                    "col": 30
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 6
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 8
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 26
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "Ast.longident_loc ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 26
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\nAst.longident_loc ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 4
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "Ast.longident_loc ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 46,
            "cpu": 45,
            "query": 25,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 439,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 22,
                    "col": 52
                },
                "end": {
                    "line": 22,
                    "col": 59
                },
                "type": "location",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 52
                },
                "end": {
                    "line": 22,
                    "col": 59
                },
                "type": "location",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 51
                },
                "end": {
                    "line": 22,
                    "col": 80
                },
                "type": "location * longident option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 10
                },
                "end": {
                    "line": 22,
                    "col": 80
                },
                "type": "(location * longident option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 8
                },
                "end": {
                    "line": 24,
                    "col": 30
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 6
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 8
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 26
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "Ast.longident_loc ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 26
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\nAst.longident_loc ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 4
                },
                "end": {
                    "line": 25,
                    "col": 29
                },
                "type": "Ast.longident_loc ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 40,
            "cpu": 40,
            "query": 20,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 438,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 141,
                    "col": 23
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "sample list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 141,
                    "col": 23
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "sample list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 141,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 106,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 437,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 125,
                    "col": 20
                },
                "end": {
                    "line": 125,
                    "col": 30
                },
                "type": "Merlin.Query_type.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 125,
                    "col": 20
                },
                "end": {
                    "line": 125,
                    "col": 30
                },
                "type": "Merlin.Query_type.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 121,
                    "col": 18
                },
                "end": {
                    "line": 128,
                    "col": 19
                },
                "type": "Data.Performance.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 120,
                    "col": 16
                },
                "end": {
                    "line": 135,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 118,
                    "col": 12
                },
                "end": {
                    "line": 139,
                    "col": 37
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 116,
                    "col": 45
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 114,
                    "col": 8
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 31
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 19
                },
                "end": {
                    "line": 139,
                    "col": 38
                },
                "type": "query_time:float -> sample list -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 106,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 436,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 85,
                    "col": 58
                },
                "end": {
                    "line": 85,
                    "col": 68
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 85,
                    "col": 58
                },
                "end": {
                    "line": 85,
                    "col": 68
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 85,
                    "col": 8
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 84,
                    "col": 8
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 83,
                    "col": 8
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 82,
                    "col": 8
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 79,
                    "col": 4
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 51
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 47
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "Merlin.Response.t option -> int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 43
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int ->\nMerlin.Response.t option -> int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 35
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list ->\nint ->\nMerlin.Response.t option -> int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 23
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "query_time:float ->\nint list ->\nint ->\nMerlin.Response.t option -> int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 2
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 54
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "Merlin.Cmd.t -> int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 35
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "int -> Merlin.Cmd.t -> int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 23
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "query_time:float ->\nint -> Merlin.Cmd.t -> int list * int * Merlin.Response.t option * float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 435,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 42
                },
                "end": {
                    "line": 33,
                    "col": 47
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 42
                },
                "end": {
                    "line": 33,
                    "col": 47
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 30
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 11
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 25
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 23
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "expression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 23
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\nexpression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "expression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 37,
            "cpu": 37,
            "query": 17,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 434,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 59,
                    "col": 51
                },
                "end": {
                    "line": 59,
                    "col": 61
                },
                "type": "Merlin.Query_type.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 59,
                    "col": 51
                },
                "end": {
                    "line": 59,
                    "col": 61
                },
                "type": "Merlin.Query_type.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 59,
                    "col": 22
                },
                "end": {
                    "line": 59,
                    "col": 61
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 59,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 2
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 43
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 38
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 26
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "id_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 13
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "sample_size:int ->\nid_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 1,
            "pp": 0,
            "reader": 4,
            "ppx": 21,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 433,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 141,
                    "col": 23
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "sample list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 141,
                    "col": 23
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "sample list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 141,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 113,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 106,
                    "col": 6
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 432,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 40,
                    "col": 29
                },
                "end": {
                    "line": 40,
                    "col": 39
                },
                "type": "Merlin.Query_type.t -> node -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 29
                },
                "end": {
                    "line": 40,
                    "col": 39
                },
                "type": "Merlin.Query_type.t -> node -> bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 29
                },
                "end": {
                    "line": 40,
                    "col": 62
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 10
                },
                "end": {
                    "line": 40,
                    "col": 63
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 23
                },
                "type": "bool * bool * pattern_desc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 39,
                    "col": 6
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 22
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\npattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 4
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 41,
            "cpu": 41,
            "query": 20,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 431,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 40,
                    "col": 51
                },
                "end": {
                    "line": 40,
                    "col": 62
                },
                "type": "node",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 51
                },
                "end": {
                    "line": 40,
                    "col": 62
                },
                "type": "node",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 29
                },
                "end": {
                    "line": 40,
                    "col": 62
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 10
                },
                "end": {
                    "line": 40,
                    "col": 63
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 23
                },
                "type": "bool * bool * pattern_desc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 39,
                    "col": 6
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 22
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\npattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 4
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 37,
            "cpu": 37,
            "query": 18,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 430,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 95,
                    "col": 8
                },
                "end": {
                    "line": 95,
                    "col": 27
                },
                "type": "sample list -> Warnings.loc option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 8
                },
                "end": {
                    "line": 95,
                    "col": 27
                },
                "type": "sample list -> Warnings.loc option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 8
                },
                "end": {
                    "line": 95,
                    "col": 35
                },
                "type": "Warnings.loc option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 429,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 84,
                    "col": 37
                },
                "end": {
                    "line": 84,
                    "col": 48
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 84,
                    "col": 37
                },
                "end": {
                    "line": 84,
                    "col": 48
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 84,
                    "col": 25
                },
                "end": {
                    "line": 84,
                    "col": 48
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 84,
                    "col": 8
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 83,
                    "col": 8
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 82,
                    "col": 8
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 79,
                    "col": 4
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 51
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 47
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "Merlin.Response.t option -> int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 43
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int ->\nMerlin.Response.t option -> int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 35
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "int list ->\nint ->\nMerlin.Response.t option -> int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 23
                },
                "end": {
                    "line": 86,
                    "col": 33
                },
                "type": "query_time:float ->\nint list ->\nint ->\nMerlin.Response.t option -> int -> int list * int * Merlin.Response.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 2
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 54
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "Merlin.Cmd.t -> int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 35
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "int -> Merlin.Cmd.t -> int list * int * Merlin.Response.t option * float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 77,
                    "col": 23
                },
                "end": {
                    "line": 91,
                    "col": 45
                },
                "type": "query_time:float ->\nint -> Merlin.Cmd.t -> int list * int * Merlin.Response.t option * float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 428,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 41,
                    "col": 10
                },
                "end": {
                    "line": 41,
                    "col": 15
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 10
                },
                "end": {
                    "line": 41,
                    "col": 15
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 23
                },
                "type": "bool * bool * pattern_desc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 39,
                    "col": 6
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 22
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\npattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 4
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 35,
            "cpu": 35,
            "query": 15,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 427,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 100,
                    "col": 54
                },
                "end": {
                    "line": 100,
                    "col": 58
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 100,
                    "col": 54
                },
                "end": {
                    "line": 100,
                    "col": 58
                },
                "type": "File.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 100,
                    "col": 39
                },
                "end": {
                    "line": 100,
                    "col": 58
                },
                "type": "Yojson.Safe.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 100,
                    "col": 13
                },
                "end": {
                    "line": 100,
                    "col": 59
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 99,
                    "col": 10
                },
                "end": {
                    "line": 101,
                    "col": 54
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 98,
                    "col": 8
                },
                "end": {
                    "line": 101,
                    "col": 54
                },
                "type": "Data.Logs.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 97,
                    "col": 6
                },
                "end": {
                    "line": 104,
                    "col": 16
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 95,
                    "col": 2
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 4
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 65
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 45
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 33
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "query_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 25
                },
                "end": {
                    "line": 141,
                    "col": 30
                },
                "type": "merlin:Merlin.t ->\nquery_time:float -> repeats_per_sample:int -> Data.t -> t -> float",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 426,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 11
                },
                "type": "pattern",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 11
                },
                "type": "pattern",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 21
                },
                "type": "pattern_desc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 23
                },
                "type": "bool * bool * pattern_desc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 39,
                    "col": 6
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 22
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\npattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 4
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 42,
            "cpu": 42,
            "query": 21,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 425,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 72,
                    "col": 56
                },
                "end": {
                    "line": 72,
                    "col": 67
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 56
                },
                "end": {
                    "line": 72,
                    "col": 67
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 43
                },
                "end": {
                    "line": 72,
                    "col": 67
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 11
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "t * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 72,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 68,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 60,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 59,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 2
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 43
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 38
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 26
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "id_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 13
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "sample_size:int ->\nid_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 424,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 32,
                    "col": 28
                },
                "end": {
                    "line": 32,
                    "col": 41
                },
                "type": "(location * longident option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 28
                },
                "end": {
                    "line": 32,
                    "col": 41
                },
                "type": "(location * longident option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 27
                },
                "end": {
                    "line": 32,
                    "col": 49
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 8
                },
                "end": {
                    "line": 32,
                    "col": 49
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 8
                },
                "end": {
                    "line": 32,
                    "col": 49
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 25
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 23
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "expression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 23
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\nexpression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "expression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 45,
            "cpu": 45,
            "query": 25,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 423,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 64
                },
                "end": {
                    "line": 30,
                    "col": 68
                },
                "type": "'a option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 64
                },
                "end": {
                    "line": 30,
                    "col": 68
                },
                "type": "longident option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 51
                },
                "end": {
                    "line": 30,
                    "col": 69
                },
                "type": "location * longident option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 10
                },
                "end": {
                    "line": 30,
                    "col": 69
                },
                "type": "(location * longident option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 8
                },
                "end": {
                    "line": 32,
                    "col": 49
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 25
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 23
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "expression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 23
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\nexpression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 33,
                    "col": 48
                },
                "type": "expression ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 40,
            "cpu": 39,
            "query": 20,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 422,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 62,
                    "col": 10
                },
                "end": {
                    "line": 62,
                    "col": 24
                },
                "type": "placeholder:'a ->\nrandom_state:Reservoir.Random_state.t -> int -> 'a Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 62,
                    "col": 10
                },
                "end": {
                    "line": 62,
                    "col": 24
                },
                "type": "placeholder:Warnings.loc * Longident.t option ->\nrandom_state:Reservoir.Random_state.t ->\nint -> (Warnings.loc * Longident.t option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 62,
                    "col": 10
                },
                "end": {
                    "line": 63,
                    "col": 23
                },
                "type": "(Warnings.loc * Longident.t option) Reservoir.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 61,
                    "col": 8
                },
                "end": {
                    "line": 66,
                    "col": 56
                },
                "type": "(Warnings.loc * Longident.t option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 60,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 59,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 58,
                    "col": 6
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 53,
                    "col": 2
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "(t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 43
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 38
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 26
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "id_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 52,
                    "col": 13
                },
                "end": {
                    "line": 72,
                    "col": 68
                },
                "type": "sample_size:int ->\nid_counter:int -> File.t -> Merlin.Query_type.t -> (t * int) option",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 421,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 22,
            "query": 3,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 420,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 12
                },
                "end": {
                    "line": 42,
                    "col": 21
                },
                "type": "pattern_desc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 21
                },
                "type": "pattern_desc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 23
                },
                "type": "bool * bool * pattern_desc",
                "tail": "no"
            },
            {
                "start": {
                    "line": 39,
                    "col": 6
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 22
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 20
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold ->\npattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 4
                },
                "end": {
                    "line": 49,
                    "col": 47
                },
                "type": "pattern ->\n(location * longident option) Reservoir.t * bool ->\n(location * longident option) Reservoir.t * bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((location * longident option) Reservoir.t * bool) Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 12,
                    "col": 2
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 33
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "Merlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 19
                },
                "end": {
                    "line": 50,
                    "col": 5
                },
                "type": "random_state:Reservoir.Random_state.t ->\nMerlin.Query_type.t ->\n((Warnings.loc * Longident.t option) Reservoir.t * bool)\nPpxlib.Ast_traverse.fold",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 36,
            "cpu": 36,
            "query": 17,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 419,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 418,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: exn",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 417,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 100,
                    "col": 13
                },
                "end": {
                    "line": 100,
                    "col": 59
                }
            },
            "(match Yojson.Safe.to_string ?buf:None ?len:None ?suf:None ?std:None\n        (File.to_yojson file)\nwith\n| \"\" -> _\n| _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 416,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 69,
                    "col": 43
                },
                "end": {
                    "line": 69,
                    "col": 49
                }
            },
            "(match sample with | (_, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 415,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 414,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 103,
                    "col": 19
                },
                "end": {
                    "line": 103,
                    "col": 22
                }
            },
            "(match log with\n| Data.Logs.Error _ -> _\n| Data.Logs.Warning _ -> _\n| Data.Logs.Log _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 413,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on object type",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 412,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 63,
                    "col": 12
                },
                "end": {
                    "line": 63,
                    "col": 23
                }
            },
            "(match sample_size with | 0 -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 24,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 411,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 410,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 4,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 409,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 21,
                    "col": 8
                },
                "end": {
                    "line": 24,
                    "col": 30
                }
            },
            "(match let new_reservoir =\n        Reservoir.update ~random_state reservoir\n          (new_loc, (Some new_longident)) in\n      (new_reservoir, in_vb)\nwith\n| (_, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 408,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 407,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 406,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 1,
            "error": 0
        }
    }
}
{
    "sample_id": 405,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 32,
                    "col": 27
                },
                "end": {
                    "line": 32,
                    "col": 49
                }
            },
            "(match (new_reservoir, in_vb) with | (_, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 404,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 403,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 83,
                    "col": 26
                },
                "end": {
                    "line": 83,
                    "col": 61
                }
            },
            "match Merlin.Response.get_timing next_res with | 0 -> _ | _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 402,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 125,
                    "col": 20
                },
                "end": {
                    "line": 125,
                    "col": 30
                }
            },
            "(match query_type with\n| Merlin.Query_type.Locate -> _\n| Merlin.Query_type.Case_analysis -> _\n| Merlin.Query_type.Type_enclosing -> _\n| Merlin.Query_type.Occurrences -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 401,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on object type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 400,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 117,
                    "col": 57
                },
                "end": {
                    "line": 117,
                    "col": 60
                }
            },
            "(match loc with | { loc_start; loc_end; loc_ghost } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 399,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 398,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 118,
                    "col": 18
                },
                "end": {
                    "line": 118,
                    "col": 71
                }
            },
            "(match analyze_one_sample ~query_time repeats_per_sample cmd with\n| (_, _, _, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 397,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 396,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 395,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 48,
                    "col": 10
                },
                "end": {
                    "line": 48,
                    "col": 48
                }
            },
            "(match super#pattern p (new_reservoir, false) with | (_, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 394,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 51
                },
                "end": {
                    "line": 30,
                    "col": 69
                }
            },
            "(match ((e.pexp_loc), None) with | (_, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 4,
            "error": 0
        }
    }
}
{
    "sample_id": 393,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 392,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 134,
                    "col": 29
                },
                "end": {
                    "line": 134,
                    "col": 33
                }
            },
            "(match perf with\n| { sample_id; timings; max_timing; file; query_type; loc } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 391,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 390,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 389,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 15,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 388,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 3,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 387,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 11,
                "col": 33
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 386,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.mli",
            "pos": {
                "line": 63,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 385,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/ast/ast.ml",
            "pos": {
                "line": 78,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 384,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/printexc.ml",
            "pos": {
                "line": 73,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 383,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 52,
                "col": 38
            }
        },
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 5,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 382,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 88,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 381,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 17,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 380,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 11,
                "col": 33
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 379,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 22,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 378,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 93,
                "col": 65
            }
        },
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 377,
    "merlin_reply": {
        "class": "return",
        "value": "'Yojson.Safe.to_string' seems to originate from 'Write' whose ML file could not be found",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 376,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 94,
                "col": 15
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 375,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 38,
                "col": 20
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 374,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 75,
                "col": 53
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 373,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 113,
                "col": 14
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 372,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 38,
                "col": 23
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 371,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 38,
                "col": 20
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 370,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.mli",
            "pos": {
                "line": 63,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 369,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 94,
                "col": 15
            }
        },
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 368,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 52,
                "col": 38
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 367,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/int.ml",
            "pos": {
                "line": 31,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 366,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.mli",
            "pos": {
                "line": 8,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 22,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 365,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 68,
                "col": 10
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 364,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 35,
                "col": 26
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 363,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 27,
                "col": 26
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 362,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 78,
                "col": 43
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 361,
    "merlin_reply": {
        "class": "return",
        "value": "\"int\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 360,
    "merlin_reply": {
        "class": "return",
        "value": "\"None\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 359,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 43
                },
                "end": {
                    "line": 31,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 47
                },
                "end": {
                    "line": 34,
                    "col": 55
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 358,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 14
                },
                "end": {
                    "line": 30,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 11
                },
                "end": {
                    "line": 31,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 26
                },
                "end": {
                    "line": 31,
                    "col": 29
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 39
                },
                "end": {
                    "line": 31,
                    "col": 42
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 357,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 24
                },
                "end": {
                    "line": 31,
                    "col": 25
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 24
                },
                "end": {
                    "line": 34,
                    "col": 25
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 38
                },
                "end": {
                    "line": 34,
                    "col": 39
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 0,
            "pp": 0,
            "reader": 10,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 356,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 14
                },
                "end": {
                    "line": 30,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 11
                },
                "end": {
                    "line": 31,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 26
                },
                "end": {
                    "line": 31,
                    "col": 29
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 39
                },
                "end": {
                    "line": 31,
                    "col": 42
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 355,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 15
                },
                "end": {
                    "line": 31,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 15
                },
                "end": {
                    "line": 34,
                    "col": 23
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 354,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 24
                },
                "end": {
                    "line": 33,
                    "col": 31
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 353,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 24
                },
                "end": {
                    "line": 31,
                    "col": 25
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 24
                },
                "end": {
                    "line": 34,
                    "col": 25
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 38
                },
                "end": {
                    "line": 34,
                    "col": 39
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 6,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 352,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 14
                },
                "end": {
                    "line": 33,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 26
                },
                "end": {
                    "line": 34,
                    "col": 29
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 43
                },
                "end": {
                    "line": 34,
                    "col": 46
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 351,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 8
                },
                "end": {
                    "line": 27,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 36,
                    "col": 36
                },
                "end": {
                    "line": 36,
                    "col": 39
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 350,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 31
                },
                "end": {
                    "line": 38,
                    "col": 46
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 349,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 15
                },
                "end": {
                    "line": 31,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 15
                },
                "end": {
                    "line": 34,
                    "col": 23
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 348,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 21,
                    "col": 10
                },
                "end": {
                    "line": 21,
                    "col": 25
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 347,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 43
                },
                "end": {
                    "line": 31,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 47
                },
                "end": {
                    "line": 34,
                    "col": 55
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 21,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 346,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 14
                },
                "end": {
                    "line": 33,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 26
                },
                "end": {
                    "line": 34,
                    "col": 29
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 43
                },
                "end": {
                    "line": 34,
                    "col": 46
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 345,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 29
                },
                "end": {
                    "line": 13,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 16,
                    "col": 73
                },
                "end": {
                    "line": 16,
                    "col": 75
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 344,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 15,
                    "col": 11
                },
                "end": {
                    "line": 15,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 16,
                    "col": 63
                },
                "end": {
                    "line": 16,
                    "col": 72
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 343,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 16,
                    "col": 38
                },
                "end": {
                    "line": 16,
                    "col": 39
                }
            },
            {
                "start": {
                    "line": 16,
                    "col": 59
                },
                "end": {
                    "line": 16,
                    "col": 60
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 342,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 25,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 36,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 22
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 341,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 16,
                    "col": 28
                },
                "end": {
                    "line": 16,
                    "col": 37
                }
            },
            {
                "start": {
                    "line": 16,
                    "col": 45
                },
                "end": {
                    "line": 16,
                    "col": 54
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 340,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 13,
                    "col": 38
                },
                "end": {
                    "line": 13,
                    "col": 39
                }
            },
            {
                "start": {
                    "line": 16,
                    "col": 43
                },
                "end": {
                    "line": 16,
                    "col": 44
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 28,
            "query": 10,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 339,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 14,
                    "col": 18
                }
            },
            {
                "start": {
                    "line": 16,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 22
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 338,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 14,
                    "col": 18
                }
            },
            {
                "start": {
                    "line": 16,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 22
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 337,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 10
                },
                "end": {
                    "line": 11,
                    "col": 21
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 336,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 6,
                    "col": 19
                },
                "end": {
                    "line": 6,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 6,
                    "col": 37
                },
                "end": {
                    "line": 6,
                    "col": 38
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 335,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 25,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 30,
                    "col": 20
                },
                "end": {
                    "line": 30,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 33,
                    "col": 20
                },
                "end": {
                    "line": 33,
                    "col": 23
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 334,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 6,
                    "col": 23
                },
                "end": {
                    "line": 6,
                    "col": 34
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 333,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 30
                },
                "end": {
                    "line": 31,
                    "col": 37
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 30
                },
                "end": {
                    "line": 34,
                    "col": 37
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 332,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 19
                },
                "end": {
                    "line": 5,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 5,
                    "col": 34
                },
                "end": {
                    "line": 5,
                    "col": 35
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 331,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 23
                },
                "end": {
                    "line": 5,
                    "col": 33
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 330,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 2,
                    "col": 10
                },
                "end": {
                    "line": 2,
                    "col": 23
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 27,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 329,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 16,
                    "col": 59
                },
                "end": {
                    "line": 16,
                    "col": 60
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 59
                },
                "end": {
                    "line": 16,
                    "col": 60
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 55
                },
                "end": {
                    "line": 16,
                    "col": 61
                },
                "type": "'a * 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 43
                },
                "end": {
                    "line": 16,
                    "col": 61
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 38
                },
                "end": {
                    "line": 16,
                    "col": 61
                },
                "type": "'a -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 23
                },
                "end": {
                    "line": 16,
                    "col": 62
                },
                "type": "'a -> 'b -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 21
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 6
                },
                "end": {
                    "line": 16,
                    "col": 76
                },
                "type": "'a -> 'b -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 38
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 32
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "init:'a -> ('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 28
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 24
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 14
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 0
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 22,
            "query": 4,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 328,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 16,
                    "col": 56
                },
                "end": {
                    "line": 16,
                    "col": 57
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 56
                },
                "end": {
                    "line": 16,
                    "col": 57
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 55
                },
                "end": {
                    "line": 16,
                    "col": 61
                },
                "type": "'a * 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 43
                },
                "end": {
                    "line": 16,
                    "col": 61
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 38
                },
                "end": {
                    "line": 16,
                    "col": 61
                },
                "type": "'a -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 23
                },
                "end": {
                    "line": 16,
                    "col": 62
                },
                "type": "'a -> 'b -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 21
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 6
                },
                "end": {
                    "line": 16,
                    "col": 76
                },
                "type": "'a -> 'b -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 38
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 32
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "init:'a -> ('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 28
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 24
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 14
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 0
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 3,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 327,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 47
                },
                "end": {
                    "line": 34,
                    "col": 55
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 43
                },
                "end": {
                    "line": 34,
                    "col": 55
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 326,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 43
                },
                "end": {
                    "line": 31,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 39
                },
                "end": {
                    "line": 31,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 325,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 36,
                    "col": 31
                },
                "end": {
                    "line": 36,
                    "col": 35
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 36,
                    "col": 31
                },
                "end": {
                    "line": 36,
                    "col": 35
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 36,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 324,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 20
                },
                "end": {
                    "line": 33,
                    "col": 23
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 20
                },
                "end": {
                    "line": 33,
                    "col": 23
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 20
                },
                "end": {
                    "line": 33,
                    "col": 31
                },
                "type": "Lexing.position",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 323,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 16,
                    "col": 59
                },
                "end": {
                    "line": 16,
                    "col": 60
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 59
                },
                "end": {
                    "line": 16,
                    "col": 60
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 55
                },
                "end": {
                    "line": 16,
                    "col": 61
                },
                "type": "'a * 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 43
                },
                "end": {
                    "line": 16,
                    "col": 61
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 38
                },
                "end": {
                    "line": 16,
                    "col": 61
                },
                "type": "'a -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 23
                },
                "end": {
                    "line": 16,
                    "col": 62
                },
                "type": "'a -> 'b -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 21
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 6
                },
                "end": {
                    "line": 16,
                    "col": 76
                },
                "type": "'a -> 'b -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 38
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 32
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "init:'a -> ('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 28
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 24
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 14
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 0
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 3,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 322,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 30
                },
                "end": {
                    "line": 34,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 26
                },
                "end": {
                    "line": 34,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 41
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 321,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 30
                },
                "end": {
                    "line": 31,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 26
                },
                "end": {
                    "line": 31,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 11
                },
                "end": {
                    "line": 31,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 320,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 24
                },
                "end": {
                    "line": 31,
                    "col": 25
                },
                "type": "int -> int -> int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 11
                },
                "end": {
                    "line": 31,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 319,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 39
                },
                "end": {
                    "line": 31,
                    "col": 42
                },
                "type": "Lexing.position",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 39
                },
                "end": {
                    "line": 31,
                    "col": 42
                },
                "type": "Lexing.position",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 39
                },
                "end": {
                    "line": 31,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 318,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 16,
                    "col": 73
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 73
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 21
                },
                "end": {
                    "line": 16,
                    "col": 75
                },
                "type": "'a -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 6
                },
                "end": {
                    "line": 16,
                    "col": 76
                },
                "type": "'a -> 'b -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 38
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 32
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "init:'a -> ('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 28
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 24
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 14
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 0
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 317,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 30
                },
                "end": {
                    "line": 31,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 26
                },
                "end": {
                    "line": 31,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 11
                },
                "end": {
                    "line": 31,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 316,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 58
                },
                "end": {
                    "line": 38,
                    "col": 61
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 58
                },
                "end": {
                    "line": 38,
                    "col": 61
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 30
                },
                "end": {
                    "line": 38,
                    "col": 62
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 22
                },
                "end": {
                    "line": 38,
                    "col": 62
                },
                "type": "[> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 16
                },
                "end": {
                    "line": 38,
                    "col": 62
                },
                "type": "t -> [> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 6,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 315,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 17,
                    "col": 11
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 11
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 38
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 32
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "init:'a -> ('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 28
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 24
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 14
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 0
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 314,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 17,
                    "col": 11
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 11
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 38
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 32
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "init:'a -> ('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 28
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 24
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 14
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 0
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 313,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 17,
                    "col": 11
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 17,
                    "col": 11
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 4
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 38
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 32
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "init:'a -> ('a -> 'b * 'c -> 'a) -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 28
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l2:'a t -> init:'b -> ('b -> 'c * 'a -> 'b) -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 13,
                    "col": 24
                },
                "end": {
                    "line": 17,
                    "col": 13
                },
                "type": "l1:'a t -> l2:'b t -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 14
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 0
                },
                "end": {
                    "line": 18,
                    "col": 3
                },
                "type": "sig\n  type 'a t = 'a list = [] | (::) of 'a * 'a list\n  val length : 'a list -> int\n  val compare_lengths : 'a list -> 'b list -> int\n  val compare_length_with : 'a list -> int -> int\n  val cons : 'a -> 'a list -> 'a list\n  val hd : 'a list -> 'a\n  val tl : 'a list -> 'a list\n  val nth : 'a list -> int -> 'a\n  val nth_opt : 'a list -> int -> 'a option\n  val rev : 'a list -> 'a list\n  val init : int -> (int -> 'a) -> 'a list\n  val append : 'a list -> 'a list -> 'a list\n  val rev_append : 'a list -> 'a list -> 'a list\n  val concat : 'a list list -> 'a list\n  val flatten : 'a list list -> 'a list\n  val equal : ('a -> 'a -> bool) -> 'a list -> 'a list -> bool\n  val compare : ('a -> 'a -> int) -> 'a list -> 'a list -> int\n  val iter : ('a -> unit) -> 'a list -> unit\n  val iteri : (int -> 'a -> unit) -> 'a list -> unit\n  val map : ('a -> 'b) -> 'a list -> 'b list\n  val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list\n  val rev_map : ('a -> 'b) -> 'a list -> 'b list\n  val filter_map : ('a -> 'b option) -> 'a list -> 'b list\n  val concat_map : ('a -> 'b list) -> 'a list -> 'b list\n  val fold_left_map : ('a -> 'b -> 'a * 'c) -> 'a -> 'b list -> 'a * 'c list\n  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a\n  val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b\n  val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit\n  val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list\n  val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a\n  val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c\n  val for_all : ('a -> bool) -> 'a list -> bool\n  val exists : ('a -> bool) -> 'a list -> bool\n  val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool\n  val mem : 'a -> 'a list -> bool\n  val memq : 'a -> 'a list -> bool\n  val find : ('a -> bool) -> 'a list -> 'a\n  val find_opt : ('a -> bool) -> 'a list -> 'a option\n  val find_map : ('a -> 'b option) -> 'a list -> 'b option\n  val filter : ('a -> bool) -> 'a list -> 'a list\n  val find_all : ('a -> bool) -> 'a list -> 'a list\n  val filteri : (int -> 'a -> bool) -> 'a list -> 'a list\n  val partition : ('a -> bool) -> 'a list -> 'a list * 'a list\n  val partition_map :\n    ('a -> ('b, 'c) Either.t) -> 'a list -> 'b list * 'c list\n  val assoc : 'a -> ('a * 'b) list -> 'b\n  val assoc_opt : 'a -> ('a * 'b) list -> 'b option\n  val assq : 'a -> ('a * 'b) list -> 'b\n  val assq_opt : 'a -> ('a * 'b) list -> 'b option\n  val mem_assoc : 'a -> ('a * 'b) list -> bool\n  val mem_assq : 'a -> ('a * 'b) list -> bool\n  val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list\n  val split : ('a * 'b) list -> 'a list * 'b list\n  val combine : 'a list -> 'b list -> ('a * 'b) list\n  val sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list\n  val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list\n  val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list\n  val to_seq : 'a list -> 'a Seq.t\n  val of_seq : 'a Seq.t -> 'a list\n  val fold_over_product :\n    l1:'a list -> l2:'b list -> init:'c -> ('c -> 'a * 'b -> 'c) -> 'c\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 5,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 312,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 20
                },
                "end": {
                    "line": 30,
                    "col": 23
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 20
                },
                "end": {
                    "line": 30,
                    "col": 23
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 20
                },
                "end": {
                    "line": 30,
                    "col": 33
                },
                "type": "Lexing.position",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 3,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 311,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 6,
                    "col": 37
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "'a -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 37
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "'a -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 23
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 19
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "('a -> ('b, 'c) result) -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 17
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 18
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 2
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 16
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 0
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 310,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 58
                },
                "end": {
                    "line": 38,
                    "col": 61
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 58
                },
                "end": {
                    "line": 38,
                    "col": 61
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 30
                },
                "end": {
                    "line": 38,
                    "col": 62
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 22
                },
                "end": {
                    "line": 38,
                    "col": 62
                },
                "type": "[> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 16
                },
                "end": {
                    "line": 38,
                    "col": 62
                },
                "type": "t -> [> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 309,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 36,
                    "col": 36
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 36,
                    "col": 36
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 36,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 308,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 52
                },
                "end": {
                    "line": 38,
                    "col": 57
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 52
                },
                "end": {
                    "line": 38,
                    "col": 57
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 30
                },
                "end": {
                    "line": 38,
                    "col": 62
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 22
                },
                "end": {
                    "line": 38,
                    "col": 62
                },
                "type": "[> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 16
                },
                "end": {
                    "line": 38,
                    "col": 62
                },
                "type": "t -> [> `String of string ]",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 307,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 6,
                    "col": 37
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "'a -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 37
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "'a -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 23
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 19
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "('a -> ('b, 'c) result) -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 17
                },
                "end": {
                    "line": 6,
                    "col": 38
                },
                "type": "('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 18
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 2
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 16
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 0
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 306,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 47
                },
                "end": {
                    "line": 34,
                    "col": 55
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 43
                },
                "end": {
                    "line": 34,
                    "col": 55
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 6,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 305,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 15
                },
                "end": {
                    "line": 34,
                    "col": 23
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 23
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 41
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 304,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 34
                },
                "end": {
                    "line": 5,
                    "col": 35
                },
                "type": "'a -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 34
                },
                "end": {
                    "line": 5,
                    "col": 35
                },
                "type": "'a -> 'b",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 23
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 19
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a -> 'b) -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 17
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 18
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 2
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 16
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 0
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 303,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 40
                },
                "end": {
                    "line": 34,
                    "col": 41
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 41
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 6
                },
                "end": {
                    "line": 34,
                    "col": 56
                },
                "type": "int * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 19
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 17
                },
                "end": {
                    "line": 36,
                    "col": 39
                },
                "type": "edge -> Format.formatter -> t -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 18
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Ppxlib.Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 0
                },
                "end": {
                    "line": 39,
                    "col": 3
                },
                "type": "sig\n  type t =\n    Warnings.loc = {\n    loc_start : Lexing.position;\n    loc_end : Lexing.position;\n    loc_ghost : bool;\n  }\n  val in_file : string -> t\n  val set_filename : t -> string -> t\n  val none : t\n  val init : Lexing.lexbuf -> string -> unit\n  val raise_errorf : ?loc:t -> ('a, Format.formatter, unit, 'b) format4 -> 'a\n  val of_lexbuf : Lexing.lexbuf -> t\n  val report_exception : Format.formatter -> exn -> unit\n  val print : Format.formatter -> t -> unit\n  type nonrec 'a loc = 'a Location.loc = { txt : 'a; loc : t; }\n  val compare_pos : Lexing.position -> Lexing.position -> int\n  val min_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val max_pos : Lexing.position -> Lexing.position -> Lexing.position\n  val compare : t -> t -> int\n  module Error = Location.Error\n  val error_extensionf :\n    loc:t ->\n    ('a, Format.formatter, unit, Ppxlib__Import.extension) format4 -> 'a\n  exception Error of Error.t\n  type edge = Left | Right\n  val print_edge : edge -> Format.formatter -> t -> unit\n  val to_yojson : t -> [> `String of string ]\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 302,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 36
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 36
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 23
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 19
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a -> 'b) -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 17
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 18
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 2
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 16
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 0
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 301,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 36
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 36
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 23
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 19
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a -> 'b) -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 17
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 18
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 2
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 16
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 0
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 300,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 36
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 36
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 23
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 19
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a -> 'b) -> ('b, 'c) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 17
                },
                "end": {
                    "line": 5,
                    "col": 37
                },
                "type": "('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 18
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 2
                },
                "end": {
                    "line": 7,
                    "col": 5
                },
                "type": "sig\n  val ( let+ ) : ('a, 'b) result -> ('a -> 'c) -> ('c, 'b) result\n  val ( let* ) :\n    ('a, 'b) result -> ('a -> ('c, 'b) result) -> ('c, 'b) result\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 16
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 1,
                    "col": 0
                },
                "end": {
                    "line": 8,
                    "col": 3
                },
                "type": "sig\n  type ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n  val ok : 'a -> ('a, 'e) result\n  val error : 'e -> ('a, 'e) result\n  val value : ('a, 'e) result -> default:'a -> 'a\n  val get_ok : ('a, 'e) result -> 'a\n  val get_error : ('a, 'e) result -> 'e\n  val bind : ('a, 'e) result -> ('a -> ('b, 'e) result) -> ('b, 'e) result\n  val join : (('a, 'e) result, 'e) result -> ('a, 'e) result\n  val map : ('a -> 'b) -> ('a, 'e) result -> ('b, 'e) result\n  val map_error : ('e -> 'f) -> ('a, 'e) result -> ('a, 'f) result\n  val fold : ok:('a -> 'c) -> error:('e -> 'c) -> ('a, 'e) result -> 'c\n  val iter : ('a -> unit) -> ('a, 'e) result -> unit\n  val iter_error : ('e -> unit) -> ('a, 'e) result -> unit\n  val is_ok : ('a, 'e) result -> bool\n  val is_error : ('a, 'e) result -> bool\n  val equal :\n    ok:('a -> 'a -> bool) ->\n    error:('e -> 'e -> bool) -> ('a, 'e) result -> ('a, 'e) result -> bool\n  val compare :\n    ok:('a -> 'a -> int) ->\n    error:('e -> 'e -> int) -> ('a, 'e) result -> ('a, 'e) result -> int\n  val to_option : ('a, 'e) result -> 'a option\n  val to_list : ('a, 'e) result -> 'a list\n  val to_seq : ('a, 'e) result -> 'a Seq.t\n  module Syntax :\n    sig\n      val ( let+ ) : ('a, 'b) t -> ('a -> 'c) -> ('c, 'b) t\n      val ( let* ) : ('a, 'b) t -> ('a -> ('c, 'b) t) -> ('c, 'b) t\n    end\nend",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 4,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 299,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-immediate type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 298,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 297,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 27,
                    "col": 4
                },
                "end": {
                    "line": 36,
                    "col": 39
                }
            },
            "match let (col, line) =\n        match e with\n        | Left ->\n            let pos = loc.loc_start in\n            ((pos.pos_cnum - pos.pos_bol), (pos.pos_lnum))\n        | Right ->\n            let pos = loc.loc_end in\n            (((pos.pos_cnum - pos.pos_bol) - 1), (pos.pos_lnum)) in\n      Format.fprintf ppf\n        (CamlinternalFormatBasics.Format\n           ((CamlinternalFormatBasics.Int\n               (CamlinternalFormatBasics.Int_i,\n                 CamlinternalFormatBasics.No_padding,\n                 CamlinternalFormatBasics.No_precision,\n                 (CamlinternalFormatBasics.Char_literal\n                    (':',\n                      (CamlinternalFormatBasics.Int\n                         (CamlinternalFormatBasics.Int_i,\n                           CamlinternalFormatBasics.No_padding,\n                           CamlinternalFormatBasics.No_precision,\n                           CamlinternalFormatBasics.End_of_format)))))),\n             \"%i:%i\")) line col\nwith\n| () -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 9,
            "error": 0
        }
    }
}
{
    "sample_id": 296,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 295,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 20
                },
                "end": {
                    "line": 33,
                    "col": 23
                }
            },
            "(match loc with | { loc_start; loc_end; loc_ghost } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 294,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on value_binding",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 293,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 292,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 26
                },
                "end": {
                    "line": 34,
                    "col": 29
                }
            },
            "(match pos with | { pos_fname; pos_lnum; pos_bol; pos_cnum } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 291,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-immediate type",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 290,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 58
                },
                "end": {
                    "line": 38,
                    "col": 61
                }
            },
            "(match loc with | { loc_start; loc_end; loc_ghost } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 289,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 25,
                    "col": 23
                },
                "end": {
                    "line": 25,
                    "col": 26
                }
            },
            "{ loc_start; loc_end; loc_ghost }"
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 288,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 287,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 286,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 285,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 284,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 6,
                    "col": 35
                },
                "end": {
                    "line": 6,
                    "col": 36
                }
            },
            "(match x with | Ok _ -> _ | Error _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 283,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 282,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-immediate type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 281,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: formatter",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 280,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 37
                }
            },
            "(match pos.pos_cnum - pos.pos_bol with | 0 -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 279,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 10
                },
                "end": {
                    "line": 34,
                    "col": 56
                }
            },
            "(match (((pos.pos_cnum - pos.pos_bol) - 1), (pos.pos_lnum)) with | (_, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 278,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 34,
                    "col": 11
                },
                "end": {
                    "line": 34,
                    "col": 14
                }
            },
            "(match pos with | { pos_fname; pos_lnum; pos_bol; pos_cnum } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 277,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 36
                },
                "end": {
                    "line": 5,
                    "col": 37
                }
            },
            "(match x with | Ok _ -> _ | Error _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 276,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 36,
                    "col": 23
                },
                "end": {
                    "line": 36,
                    "col": 30
                }
            },
            "(match \"%i:%i\" with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 32,
            "cpu": 31,
            "query": 0,
            "pp": 0,
            "reader": 13,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 275,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 10
                },
                "end": {
                    "line": 31,
                    "col": 52
                }
            },
            "(match ((pos.pos_cnum - pos.pos_bol), (pos.pos_lnum)) with | (_, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 274,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 23
                },
                "end": {
                    "line": 5,
                    "col": 37
                }
            },
            "match Result.map f x with | Ok _ -> _ | Error _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 273,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 38,
                    "col": 16
                },
                "end": {
                    "line": 38,
                    "col": 19
                }
            },
            "{ loc_start; loc_end; loc_ghost }"
        ],
        "notifications": [],
        "timing": {
            "clock": 32,
            "cpu": 32,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 14,
            "error": 0
        }
    }
}
{
    "sample_id": 272,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 271,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 17
                },
                "end": {
                    "line": 5,
                    "col": 18
                }
            },
            "Ok _ | Error _"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 270,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 269,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/lexing.ml",
            "pos": {
                "line": 18,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 268,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 30,
                "col": 14
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 267,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 93,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 266,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 30,
                "col": 14
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 265,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/lexing.ml",
            "pos": {
                "line": 18,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 264,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/location.ml",
            "pos": {
                "line": 4,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 263,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 93,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 262,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 33,
                "col": 14
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 261,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 27,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 260,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/format.ml",
            "pos": {
                "line": 1467,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 259,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/lexing.ml",
            "pos": {
                "line": 18,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 258,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ppxlib/location.ml",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 257,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/lexing.ml",
            "pos": {
                "line": 18,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 256,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 33,
                "col": 14
            }
        },
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 255,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 13,
                "col": 29
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 254,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 15,
                "col": 11
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 253,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 16,
                "col": 38
            }
        },
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 0,
            "pp": 0,
            "reader": 10,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 252,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 25,
                "col": 19
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 251,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 16,
                "col": 28
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 250,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 13,
                "col": 38
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 2,
            "error": 0
        }
    }
}
{
    "sample_id": 249,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/list.ml",
            "pos": {
                "line": 118,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 248,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/list.ml",
            "pos": {
                "line": 118,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 247,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/list.ml",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 31,
            "cpu": 31,
            "query": 13,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 246,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 6,
                "col": 19
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 245,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 25,
                "col": 23
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 244,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/result.ml",
            "pos": {
                "line": 23,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 243,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/lexing.ml",
            "pos": {
                "line": 18,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 242,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/import.ml",
            "pos": {
                "line": 5,
                "col": 19
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 241,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/result.ml",
            "pos": {
                "line": 25,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 29,
            "cpu": 29,
            "query": 11,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 240,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/result.ml",
            "pos": {
                "line": 1,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 239,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 32,
                    "col": 17
                },
                "end": {
                    "line": 32,
                    "col": 30
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 238,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 19,
                    "col": 6
                },
                "end": {
                    "line": 19,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 23,
                    "col": 4
                },
                "end": {
                    "line": 23,
                    "col": 5
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 21,
            "query": 4,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 237,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 54,
                    "col": 12
                },
                "end": {
                    "line": 54,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 66,
                    "col": 33
                },
                "end": {
                    "line": 66,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 69,
                    "col": 40
                },
                "end": {
                    "line": 69,
                    "col": 52
                }
            },
            {
                "start": {
                    "line": 72,
                    "col": 33
                },
                "end": {
                    "line": 72,
                    "col": 45
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 236,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 55,
                    "col": 48
                },
                "end": {
                    "line": 55,
                    "col": 49
                }
            },
            {
                "start": {
                    "line": 61,
                    "col": 19
                },
                "end": {
                    "line": 61,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 67,
                    "col": 44
                },
                "end": {
                    "line": 67,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 73,
                    "col": 6
                },
                "end": {
                    "line": 73,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 85,
                    "col": 19
                },
                "end": {
                    "line": 85,
                    "col": 20
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 235,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 17,
                    "col": 15
                },
                "end": {
                    "line": 17,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 21,
                    "col": 28
                },
                "end": {
                    "line": 21,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 67,
                    "col": 30
                },
                "end": {
                    "line": 67,
                    "col": 32
                }
            },
            {
                "start": {
                    "line": 73,
                    "col": 22
                },
                "end": {
                    "line": 73,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 21,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 234,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 93,
                    "col": 6
                },
                "end": {
                    "line": 93,
                    "col": 10
                }
            },
            {
                "start": {
                    "line": 94,
                    "col": 12
                },
                "end": {
                    "line": 94,
                    "col": 16
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 233,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 8
                },
                "end": {
                    "line": 31,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 33,
                    "col": 26
                },
                "end": {
                    "line": 33,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 33,
                    "col": 44
                },
                "end": {
                    "line": 33,
                    "col": 53
                }
            },
            {
                "start": {
                    "line": 37,
                    "col": 19
                },
                "end": {
                    "line": 37,
                    "col": 28
                }
            },
            {
                "start": {
                    "line": 38,
                    "col": 25
                },
                "end": {
                    "line": 38,
                    "col": 34
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 232,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 8
                },
                "end": {
                    "line": 33,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 26
                },
                "end": {
                    "line": 34,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 35,
                    "col": 17
                },
                "end": {
                    "line": 35,
                    "col": 21
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 231,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 8
                },
                "end": {
                    "line": 33,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 26
                },
                "end": {
                    "line": 34,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 35,
                    "col": 17
                },
                "end": {
                    "line": 35,
                    "col": 21
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 230,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 55,
                    "col": 6
                },
                "end": {
                    "line": 55,
                    "col": 15
                }
            },
            {
                "start": {
                    "line": 57,
                    "col": 13
                },
                "end": {
                    "line": 57,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 59,
                    "col": 6
                },
                "end": {
                    "line": 59,
                    "col": 15
                }
            },
            {
                "start": {
                    "line": 70,
                    "col": 13
                },
                "end": {
                    "line": 70,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 76,
                    "col": 6
                },
                "end": {
                    "line": 76,
                    "col": 15
                }
            },
            {
                "start": {
                    "line": 83,
                    "col": 6
                },
                "end": {
                    "line": 83,
                    "col": 15
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 229,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 49,
                    "col": 36
                },
                "end": {
                    "line": 49,
                    "col": 37
                }
            },
            {
                "start": {
                    "line": 50,
                    "col": 29
                },
                "end": {
                    "line": 50,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 51,
                    "col": 39
                },
                "end": {
                    "line": 51,
                    "col": 40
                }
            },
            {
                "start": {
                    "line": 52,
                    "col": 30
                },
                "end": {
                    "line": 52,
                    "col": 31
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 228,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 22
                },
                "end": {
                    "line": 42,
                    "col": 25
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 227,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 55,
                    "col": 48
                },
                "end": {
                    "line": 55,
                    "col": 49
                }
            },
            {
                "start": {
                    "line": 61,
                    "col": 19
                },
                "end": {
                    "line": 61,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 67,
                    "col": 44
                },
                "end": {
                    "line": 67,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 73,
                    "col": 6
                },
                "end": {
                    "line": 73,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 85,
                    "col": 19
                },
                "end": {
                    "line": 85,
                    "col": 20
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 226,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 91,
                    "col": 17
                },
                "end": {
                    "line": 91,
                    "col": 28
                }
            },
            {
                "start": {
                    "line": 94,
                    "col": 27
                },
                "end": {
                    "line": 94,
                    "col": 38
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 225,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 54,
                    "col": 12
                },
                "end": {
                    "line": 54,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 66,
                    "col": 33
                },
                "end": {
                    "line": 66,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 69,
                    "col": 40
                },
                "end": {
                    "line": 69,
                    "col": 52
                }
            },
            {
                "start": {
                    "line": 72,
                    "col": 33
                },
                "end": {
                    "line": 72,
                    "col": 45
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 224,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 8
                },
                "end": {
                    "line": 30,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 37
                },
                "end": {
                    "line": 31,
                    "col": 46
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 55
                },
                "end": {
                    "line": 31,
                    "col": 64
                }
            },
            {
                "start": {
                    "line": 41,
                    "col": 26
                },
                "end": {
                    "line": 41,
                    "col": 35
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 223,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 89,
                    "col": 4
                },
                "end": {
                    "line": 89,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 94,
                    "col": 61
                },
                "end": {
                    "line": 94,
                    "col": 64
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 222,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 94,
                    "col": 22
                },
                "end": {
                    "line": 94,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 94,
                    "col": 44
                },
                "end": {
                    "line": 94,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 94,
                    "col": 65
                },
                "end": {
                    "line": 94,
                    "col": 66
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 221,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 55,
                    "col": 45
                },
                "end": {
                    "line": 55,
                    "col": 46
                }
            },
            {
                "start": {
                    "line": 61,
                    "col": 16
                },
                "end": {
                    "line": 61,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 64,
                    "col": 25
                },
                "end": {
                    "line": 64,
                    "col": 26
                }
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 85,
                    "col": 16
                },
                "end": {
                    "line": 85,
                    "col": 17
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 220,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 16,
                    "col": 12
                },
                "end": {
                    "line": 16,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 20,
                    "col": 12
                },
                "end": {
                    "line": 20,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 66,
                    "col": 14
                },
                "end": {
                    "line": 66,
                    "col": 32
                }
            },
            {
                "start": {
                    "line": 72,
                    "col": 14
                },
                "end": {
                    "line": 72,
                    "col": 32
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 219,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 14
                },
                "end": {
                    "line": 42,
                    "col": 16
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 6,
            "error": 0
        }
    }
}
{
    "sample_id": 218,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 52,
                    "col": 33
                },
                "end": {
                    "line": 52,
                    "col": 38
                }
            },
            {
                "start": {
                    "line": 55,
                    "col": 35
                },
                "end": {
                    "line": 55,
                    "col": 40
                }
            },
            {
                "start": {
                    "line": 61,
                    "col": 6
                },
                "end": {
                    "line": 61,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 78,
                    "col": 6
                },
                "end": {
                    "line": 78,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 85,
                    "col": 6
                },
                "end": {
                    "line": 85,
                    "col": 11
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 217,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 8
                },
                "end": {
                    "line": 30,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 37
                },
                "end": {
                    "line": 31,
                    "col": 46
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 55
                },
                "end": {
                    "line": 31,
                    "col": 64
                }
            },
            {
                "start": {
                    "line": 41,
                    "col": 26
                },
                "end": {
                    "line": 41,
                    "col": 35
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 216,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 69,
                    "col": 23
                },
                "end": {
                    "line": 69,
                    "col": 39
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 215,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 21,
                    "col": 6
                },
                "end": {
                    "line": 21,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 21,
                    "col": 46
                },
                "end": {
                    "line": 21,
                    "col": 47
                }
            },
            {
                "start": {
                    "line": 31,
                    "col": 34
                },
                "end": {
                    "line": 31,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 33,
                    "col": 23
                },
                "end": {
                    "line": 33,
                    "col": 24
                }
            },
            {
                "start": {
                    "line": 38,
                    "col": 36
                },
                "end": {
                    "line": 38,
                    "col": 37
                }
            },
            {
                "start": {
                    "line": 62,
                    "col": 34
                },
                "end": {
                    "line": 62,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 67,
                    "col": 8
                },
                "end": {
                    "line": 67,
                    "col": 9
                }
            },
            {
                "start": {
                    "line": 67,
                    "col": 48
                },
                "end": {
                    "line": 67,
                    "col": 49
                }
            },
            {
                "start": {
                    "line": 79,
                    "col": 34
                },
                "end": {
                    "line": 79,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 86,
                    "col": 34
                },
                "end": {
                    "line": 86,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 94,
                    "col": 46
                },
                "end": {
                    "line": 94,
                    "col": 47
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 214,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 36,
                    "col": 10
                },
                "end": {
                    "line": 36,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 13
                }
            },
            {
                "start": {
                    "line": 42,
                    "col": 18
                },
                "end": {
                    "line": 42,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 44,
                    "col": 19
                },
                "end": {
                    "line": 44,
                    "col": 22
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 213,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 55,
                    "col": 53
                },
                "end": {
                    "line": 55,
                    "col": 65
                }
            },
            {
                "start": {
                    "line": 56,
                    "col": 5
                },
                "end": {
                    "line": 56,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 57,
                    "col": 24
                },
                "end": {
                    "line": 57,
                    "col": 36
                }
            },
            {
                "start": {
                    "line": 62,
                    "col": 21
                },
                "end": {
                    "line": 62,
                    "col": 33
                }
            },
            {
                "start": {
                    "line": 64,
                    "col": 10
                },
                "end": {
                    "line": 64,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 79,
                    "col": 21
                },
                "end": {
                    "line": 79,
                    "col": 33
                }
            },
            {
                "start": {
                    "line": 86,
                    "col": 21
                },
                "end": {
                    "line": 86,
                    "col": 33
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 212,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 28
                },
                "end": {
                    "line": 5,
                    "col": 33
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 211,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 19
                },
                "end": {
                    "line": 5,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 9,
                    "col": 17
                },
                "end": {
                    "line": 9,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 11,
                    "col": 17
                },
                "end": {
                    "line": 11,
                    "col": 20
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 210,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 55,
                    "col": 48
                },
                "end": {
                    "line": 55,
                    "col": 49
                }
            },
            {
                "start": {
                    "line": 61,
                    "col": 19
                },
                "end": {
                    "line": 61,
                    "col": 20
                }
            },
            {
                "start": {
                    "line": 67,
                    "col": 44
                },
                "end": {
                    "line": 67,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 73,
                    "col": 6
                },
                "end": {
                    "line": 73,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 85,
                    "col": 19
                },
                "end": {
                    "line": 85,
                    "col": 20
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 209,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 21,
                    "col": 36
                },
                "end": {
                    "line": 21,
                    "col": 38
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 35
                },
                "end": {
                    "line": 21,
                    "col": 44
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 31
                },
                "end": {
                    "line": 21,
                    "col": 44
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 21
                },
                "end": {
                    "line": 21,
                    "col": 45
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 8
                },
                "end": {
                    "line": 21,
                    "col": 45
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 4
                },
                "end": {
                    "line": 21,
                    "col": 45
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 4
                },
                "end": {
                    "line": 21,
                    "col": 49
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 4
                },
                "end": {
                    "line": 21,
                    "col": 49
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 2
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 29
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "int -> state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 15
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "random_state:Random.State.t -> int -> state",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 28,
            "cpu": 28,
            "query": 0,
            "pp": 0,
            "reader": 9,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 208,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 79,
                    "col": 36
                },
                "end": {
                    "line": 79,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 79,
                    "col": 21
                },
                "end": {
                    "line": 79,
                    "col": 37
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 75,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 71,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 69,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 207,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 14
                },
                "end": {
                    "line": 42,
                    "col": 16
                },
                "type": "int ref -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 39,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 43,
                    "col": 10
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 36,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 45,
                    "col": 8
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 206,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 52,
                    "col": 2
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 2
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 50,
                    "col": 2
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 36
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "int -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 22
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "random_state:Random_state.t -> int -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 9
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "placeholder:'a -> random_state:Random_state.t -> int -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 205,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 17
                },
                "end": {
                    "line": 42,
                    "col": 18
                },
                "type": "int ref -> int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 17
                },
                "end": {
                    "line": 42,
                    "col": 21
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 17
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 39,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 43,
                    "col": 10
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 36,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 45,
                    "col": 8
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 204,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 82,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 203,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 67,
                    "col": 41
                },
                "end": {
                    "line": 67,
                    "col": 43
                },
                "type": "float -> float -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 37
                },
                "end": {
                    "line": 67,
                    "col": 46
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 33
                },
                "end": {
                    "line": 67,
                    "col": 46
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 23
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 10
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 66,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 202,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 29,
                    "col": 14
                },
                "end": {
                    "line": 29,
                    "col": 27
                },
                "type": "File.t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 14
                },
                "end": {
                    "line": 29,
                    "col": 27
                },
                "type": "File.t -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 14
                },
                "end": {
                    "line": 29,
                    "col": 32
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 201,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 7
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 7
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 66,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 200,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 51,
                    "col": 39
                },
                "end": {
                    "line": 51,
                    "col": 40
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 39
                },
                "end": {
                    "line": 51,
                    "col": 40
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 14
                },
                "end": {
                    "line": 51,
                    "col": 40
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 2
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 50,
                    "col": 2
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 36
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "int -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 22
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "random_state:Random_state.t -> int -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 9
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "placeholder:'a -> random_state:Random_state.t -> int -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 199,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 35,
                    "col": 24
                },
                "end": {
                    "line": 35,
                    "col": 25
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 17
                },
                "end": {
                    "line": 35,
                    "col": 25
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 45,
                    "col": 8
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 198,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 23
                },
                "end": {
                    "line": 33,
                    "col": 24
                },
                "type": "int -> int -> int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 15
                },
                "end": {
                    "line": 33,
                    "col": 41
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 15
                },
                "end": {
                    "line": 33,
                    "col": 53
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 197,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 36
                },
                "end": {
                    "line": 42,
                    "col": 41
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 36
                },
                "end": {
                    "line": 42,
                    "col": 41
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 26
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 17
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 39,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 43,
                    "col": 10
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 36,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 45,
                    "col": 8
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 196,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 76,
                    "col": 6
                },
                "end": {
                    "line": 76,
                    "col": 15
                },
                "type": "'a array",
                "tail": "no"
            },
            {
                "start": {
                    "line": 76,
                    "col": 6
                },
                "end": {
                    "line": 76,
                    "col": 15
                },
                "type": "'a array",
                "tail": "no"
            },
            {
                "start": {
                    "line": 75,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 71,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 69,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 195,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 44,
                    "col": 19
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "int ref",
                "tail": "no"
            },
            {
                "start": {
                    "line": 44,
                    "col": 19
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "int ref",
                "tail": "no"
            },
            {
                "start": {
                    "line": 44,
                    "col": 18
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 44,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 36,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 45,
                    "col": 8
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 194,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 44
                },
                "end": {
                    "line": 33,
                    "col": 53
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 44
                },
                "end": {
                    "line": 33,
                    "col": 53
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 15
                },
                "end": {
                    "line": 33,
                    "col": 53
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 193,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 75,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 71,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 69,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 192,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 70,
                    "col": 41
                },
                "end": {
                    "line": 70,
                    "col": 46
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 41
                },
                "end": {
                    "line": 70,
                    "col": 46
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 13
                },
                "end": {
                    "line": 70,
                    "col": 46
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 69,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 191,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 56,
                    "col": 20
                },
                "end": {
                    "line": 56,
                    "col": 21
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 20
                },
                "end": {
                    "line": 56,
                    "col": 21
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 5
                },
                "end": {
                    "line": 56,
                    "col": 21
                },
                "type": "bool",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 190,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 67,
                    "col": 37
                },
                "end": {
                    "line": 67,
                    "col": 46
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 33
                },
                "end": {
                    "line": 67,
                    "col": 46
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 23
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 10
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 66,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 189,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 78,
                    "col": 20
                },
                "end": {
                    "line": 78,
                    "col": 25
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 20
                },
                "end": {
                    "line": 78,
                    "col": 25
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 78,
                    "col": 14
                },
                "end": {
                    "line": 78,
                    "col": 38
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 75,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 71,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 69,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 188,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 51,
                    "col": 39
                },
                "end": {
                    "line": 51,
                    "col": 40
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 39
                },
                "end": {
                    "line": 51,
                    "col": 40
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 14
                },
                "end": {
                    "line": 51,
                    "col": 40
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 51,
                    "col": 2
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 50,
                    "col": 2
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 36
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "int -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 22
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "random_state:Random_state.t -> int -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 49,
                    "col": 9
                },
                "end": {
                    "line": 52,
                    "col": 58
                },
                "type": "placeholder:'a -> random_state:Random_state.t -> int -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 187,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 21,
                    "col": 39
                },
                "end": {
                    "line": 21,
                    "col": 41
                },
                "type": "float -> float -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 35
                },
                "end": {
                    "line": 21,
                    "col": 44
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 31
                },
                "end": {
                    "line": 21,
                    "col": 44
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 21
                },
                "end": {
                    "line": 21,
                    "col": 45
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 8
                },
                "end": {
                    "line": 21,
                    "col": 45
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 4
                },
                "end": {
                    "line": 21,
                    "col": 45
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 21,
                    "col": 4
                },
                "end": {
                    "line": 21,
                    "col": 49
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 20,
                    "col": 4
                },
                "end": {
                    "line": 21,
                    "col": 49
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 2
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 29
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "int -> state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 15
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "random_state:Random.State.t -> int -> state",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 7,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 186,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 67,
                    "col": 28
                },
                "end": {
                    "line": 67,
                    "col": 29
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 28
                },
                "end": {
                    "line": 67,
                    "col": 29
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 24
                },
                "end": {
                    "line": 67,
                    "col": 29
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 23
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 10
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 66,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 185,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 67,
                    "col": 44
                },
                "end": {
                    "line": 67,
                    "col": 45
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 44
                },
                "end": {
                    "line": 67,
                    "col": 45
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 37
                },
                "end": {
                    "line": 67,
                    "col": 46
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 33
                },
                "end": {
                    "line": 67,
                    "col": 46
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 23
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 10
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 66,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 184,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 44
                },
                "end": {
                    "line": 33,
                    "col": 53
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 44
                },
                "end": {
                    "line": 33,
                    "col": 53
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 15
                },
                "end": {
                    "line": 33,
                    "col": 53
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 183,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 94,
                    "col": 65
                },
                "end": {
                    "line": 94,
                    "col": 66
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 65
                },
                "end": {
                    "line": 94,
                    "col": 66
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 60
                },
                "end": {
                    "line": 94,
                    "col": 77
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 27
                },
                "end": {
                    "line": 94,
                    "col": 77
                },
                "type": "'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 17
                },
                "end": {
                    "line": 94,
                    "col": 78
                },
                "type": "int -> 'a",
                "tail": "no"
            },
            {
                "start": {
                    "line": 94,
                    "col": 2
                },
                "end": {
                    "line": 94,
                    "col": 78
                },
                "type": "'a list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 93,
                    "col": 2
                },
                "end": {
                    "line": 94,
                    "col": 78
                },
                "type": "'a list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 92,
                    "col": 4
                },
                "end": {
                    "line": 94,
                    "col": 78
                },
                "type": "'a t -> 'b list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 91,
                    "col": 29
                },
                "end": {
                    "line": 94,
                    "col": 78
                },
                "type": "id_counter:int -> 'a t -> 'b list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 91,
                    "col": 16
                },
                "end": {
                    "line": 94,
                    "col": 78
                },
                "type": "make_sample:(id:int -> 'a -> 'b) -> id_counter:int -> 'a t -> 'b list",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 182,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 23,
                    "col": 2
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 2
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 29
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "int -> state",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 15
                },
                "end": {
                    "line": 23,
                    "col": 10
                },
                "type": "random_state:Random.State.t -> int -> state",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 181,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 67,
                    "col": 30
                },
                "end": {
                    "line": 67,
                    "col": 32
                },
                "type": "float -> float -> float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 23
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 10
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 47
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 66,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 65,
                    "col": 4
                },
                "end": {
                    "line": 80,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 56,
                    "col": 2
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 68
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 55,
                    "col": 4
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "'a t -> 'a -> 'a t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 54,
                    "col": 11
                },
                "end": {
                    "line": 87,
                    "col": 5
                },
                "type": "random_state:Random_state.t -> 'a t -> 'a -> 'a t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 180,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 40,
                    "col": 36
                },
                "end": {
                    "line": 40,
                    "col": 41
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 36
                },
                "end": {
                    "line": 40,
                    "col": 41
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 31
                },
                "end": {
                    "line": 40,
                    "col": 42
                },
                "type": "char",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 21
                },
                "end": {
                    "line": 40,
                    "col": 42
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 40,
                    "col": 10
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 39,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 38,
                    "col": 8
                },
                "end": {
                    "line": 42,
                    "col": 42
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 43,
                    "col": 10
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 36,
                    "col": 6
                },
                "end": {
                    "line": 44,
                    "col": 22
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 45,
                    "col": 8
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 35,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 34,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 33,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 32,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 29,
                    "col": 4
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 11
                },
                "end": {
                    "line": 46,
                    "col": 26
                },
                "type": "File.t -> t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 22
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random.State.t val make : File.t -> Random.State.t end",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 0
                },
                "end": {
                    "line": 47,
                    "col": 3
                },
                "type": "sig type t = Random_state.t val make : File.t -> Random_state.t end",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 179,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 178,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 177,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 41,
                    "col": 22
                },
                "end": {
                    "line": 41,
                    "col": 35
                }
            },
            "match j * char_size with | 0 -> _ | _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 176,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 44,
                    "col": 18
                },
                "end": {
                    "line": 44,
                    "col": 22
                }
            },
            "(match !int with | 0 -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 175,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 174,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 57,
                    "col": 13
                },
                "end": {
                    "line": 57,
                    "col": 46
                }
            },
            "(match reservoir.(update_index) <- input with | () -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 173,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 67,
                    "col": 6
                },
                "end": {
                    "line": 67,
                    "col": 51
                }
            },
            "match (i + (int_of_float ((log r) /. (log (1. -. w))))) + 1 with\n| 0 -> _\n| _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 172,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 171,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 64,
                    "col": 7
                },
                "end": {
                    "line": 87,
                    "col": 5
                }
            },
            "(match if update_index = i\n      then\n        let new_i =\n          let r = Random.State.float random_state 1.0 in\n          (i + (int_of_float ((log r) /. (log (1. -. w))))) + 1 in\n        let random_index = Random.State.int random_state k in\n        match reservoir.(random_index) <- input with\n        | () ->\n            let new_w =\n              let r = Random.State.float random_state 1.0 in\n              w *. (exp ((log r) /. (float_of_int k))) in\n            {\n              update_index = (update_index + 1);\n              state = { w = new_w; i = new_i };\n              desired_size = k;\n              reservoir\n            }\n      else\n        {\n          update_index = (update_index + 1);\n          state = { w; i };\n          desired_size = k;\n          reservoir\n        }\nwith\n| { reservoir; desired_size; state; update_index } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 170,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 169,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 35,
                    "col": 12
                },
                "end": {
                    "line": 35,
                    "col": 13
                }
            },
            "match 0 with | 0 -> _ | _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 168,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 15
                },
                "end": {
                    "line": 33,
                    "col": 53
                }
            },
            "match (length + (int_chars - 1)) / int_chars with | 0 -> _ | _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 167,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 37,
                    "col": 14
                },
                "end": {
                    "line": 37,
                    "col": 15
                }
            },
            "match 0 with | 0 -> _ | _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 0,
            "pp": 0,
            "reader": 7,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 166,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 165,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 26
                },
                "end": {
                    "line": 42,
                    "col": 42
                }
            },
            "(match code lsl shift with | 0 -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 164,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 163,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 58,
                    "col": 4
                },
                "end": {
                    "line": 63,
                    "col": 5
                }
            },
            "(match {\n        update_index = (update_index + 1);\n        state = { w; i };\n        desired_size = k;\n        reservoir\n      }\nwith\n| { reservoir; desired_size; state; update_index } -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 162,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 161,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 52,
                    "col": 55
                },
                "end": {
                    "line": 52,
                    "col": 56
                }
            },
            "(match 0 with | 0 -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 160,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 62,
                    "col": 21
                },
                "end": {
                    "line": 62,
                    "col": 33
                }
            },
            "(match update_index with | 0 -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 159,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 158,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 92,
                    "col": 4
                },
                "end": {
                    "line": 92,
                    "col": 48
                }
            },
            "{ reservoir; desired_size = 0; update_index;_}\n| { reservoir; desired_size = _; update_index;_}"
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 157,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 156,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 155,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 154,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 153,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 91,
                    "col": 30
                },
                "end": {
                    "line": 91,
                    "col": 40
                }
            },
            "0 | _"
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 152,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 151,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 64,
                    "col": 25
                },
                "end": {
                    "line": 64,
                    "col": 26
                }
            },
            "(match i with | 0 -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 150,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 39,
                    "col": 19
                },
                "end": {
                    "line": 39,
                    "col": 25
                }
            },
            "(match length with | 0 -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 7,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 149,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/string.ml",
            "pos": {
                "line": 24,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 148,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 19,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 2,
            "error": 0
        }
    }
}
{
    "sample_id": 147,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 54,
                "col": 12
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 146,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 55,
                "col": 48
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 145,
    "merlin_reply": {
        "class": "return",
        "value": "Not in environment ''",
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 26,
            "query": 6,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 144,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 93,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 143,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 31,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 142,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 33,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 141,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 33,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 140,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 55,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 139,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 49,
                "col": 36
            }
        },
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 6,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 138,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 101,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 137,
    "merlin_reply": {
        "class": "return",
        "value": "Already at definition point",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 136,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 91,
                "col": 17
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 135,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 54,
                "col": 12
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 134,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 30,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 133,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 89,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 132,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 94,
                "col": 22
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 131,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 55,
                "col": 45
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 130,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/random.ml",
            "pos": {
                "line": 159,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 27,
            "cpu": 27,
            "query": 0,
            "pp": 0,
            "reader": 8,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 129,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 128,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 7,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 127,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 30,
                "col": 8
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 126,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/random.ml",
            "pos": {
                "line": 85,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 125,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 92,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 124,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 36,
                "col": 10
            }
        },
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 123,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 55,
                "col": 53
            }
        },
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 122,
    "merlin_reply": {
        "class": "return",
        "value": "\"float\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 121,
    "merlin_reply": {
        "class": "return",
        "value": "\"int\" is a builtin, and it is therefore impossible to jump to its definition",
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 120,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/reservoir.ml",
            "pos": {
                "line": 55,
                "col": 48
            }
        },
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 119,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 18,
                    "col": 6
                },
                "end": {
                    "line": 18,
                    "col": 10
                }
            },
            {
                "start": {
                    "line": 30,
                    "col": 29
                },
                "end": {
                    "line": 30,
                    "col": 33
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 36
                },
                "end": {
                    "line": 34,
                    "col": 40
                }
            },
            {
                "start": {
                    "line": 47,
                    "col": 31
                },
                "end": {
                    "line": 47,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 28
                },
                "end": {
                    "line": 60,
                    "col": 32
                }
            },
            {
                "start": {
                    "line": 61,
                    "col": 16
                },
                "end": {
                    "line": 61,
                    "col": 20
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 118,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 12
                },
                "end": {
                    "line": 30,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 47,
                    "col": 14
                },
                "end": {
                    "line": 47,
                    "col": 25
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 6
                },
                "end": {
                    "line": 60,
                    "col": 17
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 117,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 62,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 26,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 116,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 5,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 17
                },
                "end": {
                    "line": 34,
                    "col": 35
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 115,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 77,
                    "col": 2
                },
                "end": {
                    "line": 77,
                    "col": 3
                }
            },
            {
                "start": {
                    "line": 81,
                    "col": 63
                },
                "end": {
                    "line": 81,
                    "col": 64
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 54
                },
                "end": {
                    "line": 88,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 54
                },
                "end": {
                    "line": 97,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 36
                },
                "end": {
                    "line": 108,
                    "col": 37
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 54
                },
                "end": {
                    "line": 112,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 71
                },
                "end": {
                    "line": 130,
                    "col": 72
                }
            },
            {
                "start": {
                    "line": 137,
                    "col": 50
                },
                "end": {
                    "line": 137,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 42
                },
                "end": {
                    "line": 138,
                    "col": 43
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 71
                },
                "end": {
                    "line": 138,
                    "col": 72
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 50
                },
                "end": {
                    "line": 145,
                    "col": 51
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 114,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 81,
                    "col": 13
                },
                "end": {
                    "line": 81,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 81,
                    "col": 40
                },
                "end": {
                    "line": 81,
                    "col": 41
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 13
                },
                "end": {
                    "line": 88,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 30
                },
                "end": {
                    "line": 88,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 13
                },
                "end": {
                    "line": 97,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 38
                },
                "end": {
                    "line": 97,
                    "col": 39
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 13
                },
                "end": {
                    "line": 108,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 20
                },
                "end": {
                    "line": 108,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 13
                },
                "end": {
                    "line": 112,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 26
                },
                "end": {
                    "line": 112,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 10
                },
                "end": {
                    "line": 130,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 47
                },
                "end": {
                    "line": 130,
                    "col": 48
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 13
                },
                "end": {
                    "line": 138,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 44
                },
                "end": {
                    "line": 138,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 13
                },
                "end": {
                    "line": 145,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 26
                },
                "end": {
                    "line": 145,
                    "col": 27
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 113,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 99,
                    "col": 4
                },
                "end": {
                    "line": 99,
                    "col": 8
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 51
                },
                "end": {
                    "line": 150,
                    "col": 55
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 112,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 81,
                    "col": 7
                },
                "end": {
                    "line": 81,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 7
                },
                "end": {
                    "line": 88,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 7
                },
                "end": {
                    "line": 97,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 7
                },
                "end": {
                    "line": 108,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 7
                },
                "end": {
                    "line": 112,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 4
                },
                "end": {
                    "line": 130,
                    "col": 9
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 7
                },
                "end": {
                    "line": 138,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 7
                },
                "end": {
                    "line": 145,
                    "col": 12
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 111,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 30
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 2,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 110,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 26,
                    "col": 14
                },
                "end": {
                    "line": 26,
                    "col": 31
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 4,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 109,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 18,
                    "col": 6
                },
                "end": {
                    "line": 18,
                    "col": 10
                }
            },
            {
                "start": {
                    "line": 30,
                    "col": 29
                },
                "end": {
                    "line": 30,
                    "col": 33
                }
            },
            {
                "start": {
                    "line": 34,
                    "col": 36
                },
                "end": {
                    "line": 34,
                    "col": 40
                }
            },
            {
                "start": {
                    "line": 47,
                    "col": 31
                },
                "end": {
                    "line": 47,
                    "col": 35
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 28
                },
                "end": {
                    "line": 60,
                    "col": 32
                }
            },
            {
                "start": {
                    "line": 61,
                    "col": 16
                },
                "end": {
                    "line": 61,
                    "col": 20
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 108,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 22,
                    "col": 54
                },
                "end": {
                    "line": 22,
                    "col": 58
                }
            },
            {
                "start": {
                    "line": 23,
                    "col": 56
                },
                "end": {
                    "line": 23,
                    "col": 60
                }
            },
            {
                "start": {
                    "line": 28,
                    "col": 60
                },
                "end": {
                    "line": 28,
                    "col": 64
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 107,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 23,
                    "col": 14
                },
                "end": {
                    "line": 23,
                    "col": 30
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 106,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 15,
                    "col": 60
                },
                "end": {
                    "line": 15,
                    "col": 62
                }
            },
            {
                "start": {
                    "line": 42,
                    "col": 34
                },
                "end": {
                    "line": 42,
                    "col": 36
                }
            },
            {
                "start": {
                    "line": 50,
                    "col": 42
                },
                "end": {
                    "line": 50,
                    "col": 44
                }
            },
            {
                "start": {
                    "line": 161,
                    "col": 4
                },
                "end": {
                    "line": 161,
                    "col": 6
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 105,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 50,
                    "col": 12
                },
                "end": {
                    "line": 50,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 54,
                    "col": 10
                },
                "end": {
                    "line": 54,
                    "col": 14
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 22,
            "cpu": 22,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 104,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 81,
                    "col": 13
                },
                "end": {
                    "line": 81,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 81,
                    "col": 40
                },
                "end": {
                    "line": 81,
                    "col": 41
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 13
                },
                "end": {
                    "line": 88,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 30
                },
                "end": {
                    "line": 88,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 13
                },
                "end": {
                    "line": 97,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 38
                },
                "end": {
                    "line": 97,
                    "col": 39
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 13
                },
                "end": {
                    "line": 108,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 20
                },
                "end": {
                    "line": 108,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 13
                },
                "end": {
                    "line": 112,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 26
                },
                "end": {
                    "line": 112,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 10
                },
                "end": {
                    "line": 130,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 47
                },
                "end": {
                    "line": 130,
                    "col": 48
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 13
                },
                "end": {
                    "line": 138,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 44
                },
                "end": {
                    "line": 138,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 13
                },
                "end": {
                    "line": 145,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 26
                },
                "end": {
                    "line": 145,
                    "col": 27
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 20,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 103,
    "merlin_reply": {
        "class": "return",
        "value": [],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 102,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 150,
                    "col": 18
                },
                "end": {
                    "line": 150,
                    "col": 19
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 27
                },
                "end": {
                    "line": 150,
                    "col": 28
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 38
                },
                "end": {
                    "line": 150,
                    "col": 39
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 49
                },
                "end": {
                    "line": 150,
                    "col": 50
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 56
                },
                "end": {
                    "line": 150,
                    "col": 57
                }
            },
            {
                "start": {
                    "line": 151,
                    "col": 6
                },
                "end": {
                    "line": 151,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 151,
                    "col": 20
                },
                "end": {
                    "line": 151,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 151,
                    "col": 33
                },
                "end": {
                    "line": 151,
                    "col": 34
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 101,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 130,
                    "col": 17
                },
                "end": {
                    "line": 130,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 20
                },
                "end": {
                    "line": 138,
                    "col": 24
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 24,
            "cpu": 24,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 100,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 77,
                    "col": 2
                },
                "end": {
                    "line": 77,
                    "col": 3
                }
            },
            {
                "start": {
                    "line": 81,
                    "col": 63
                },
                "end": {
                    "line": 81,
                    "col": 64
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 54
                },
                "end": {
                    "line": 88,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 54
                },
                "end": {
                    "line": 97,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 36
                },
                "end": {
                    "line": 108,
                    "col": 37
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 54
                },
                "end": {
                    "line": 112,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 71
                },
                "end": {
                    "line": 130,
                    "col": 72
                }
            },
            {
                "start": {
                    "line": 137,
                    "col": 50
                },
                "end": {
                    "line": 137,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 42
                },
                "end": {
                    "line": 138,
                    "col": 43
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 71
                },
                "end": {
                    "line": 138,
                    "col": 72
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 50
                },
                "end": {
                    "line": 145,
                    "col": 51
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 99,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 126,
                    "col": 14
                },
                "end": {
                    "line": 126,
                    "col": 16
                }
            },
            {
                "start": {
                    "line": 126,
                    "col": 49
                },
                "end": {
                    "line": 126,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 126,
                    "col": 53
                },
                "end": {
                    "line": 126,
                    "col": 55
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 98,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 77,
                    "col": 2
                },
                "end": {
                    "line": 77,
                    "col": 3
                }
            },
            {
                "start": {
                    "line": 81,
                    "col": 63
                },
                "end": {
                    "line": 81,
                    "col": 64
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 54
                },
                "end": {
                    "line": 88,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 54
                },
                "end": {
                    "line": 97,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 36
                },
                "end": {
                    "line": 108,
                    "col": 37
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 54
                },
                "end": {
                    "line": 112,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 71
                },
                "end": {
                    "line": 130,
                    "col": 72
                }
            },
            {
                "start": {
                    "line": 137,
                    "col": 50
                },
                "end": {
                    "line": 137,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 42
                },
                "end": {
                    "line": 138,
                    "col": 43
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 71
                },
                "end": {
                    "line": 138,
                    "col": 72
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 50
                },
                "end": {
                    "line": 145,
                    "col": 51
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 22,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 97,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 150,
                    "col": 18
                },
                "end": {
                    "line": 150,
                    "col": 19
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 27
                },
                "end": {
                    "line": 150,
                    "col": 28
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 38
                },
                "end": {
                    "line": 150,
                    "col": 39
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 49
                },
                "end": {
                    "line": 150,
                    "col": 50
                }
            },
            {
                "start": {
                    "line": 150,
                    "col": 56
                },
                "end": {
                    "line": 150,
                    "col": 57
                }
            },
            {
                "start": {
                    "line": 151,
                    "col": 6
                },
                "end": {
                    "line": 151,
                    "col": 7
                }
            },
            {
                "start": {
                    "line": 151,
                    "col": 20
                },
                "end": {
                    "line": 151,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 151,
                    "col": 33
                },
                "end": {
                    "line": 151,
                    "col": 34
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 96,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 12
                },
                "end": {
                    "line": 30,
                    "col": 23
                }
            },
            {
                "start": {
                    "line": 47,
                    "col": 14
                },
                "end": {
                    "line": 47,
                    "col": 25
                }
            },
            {
                "start": {
                    "line": 60,
                    "col": 6
                },
                "end": {
                    "line": 60,
                    "col": 17
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 95,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 81,
                    "col": 13
                },
                "end": {
                    "line": 81,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 81,
                    "col": 40
                },
                "end": {
                    "line": 81,
                    "col": 41
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 13
                },
                "end": {
                    "line": 88,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 30
                },
                "end": {
                    "line": 88,
                    "col": 31
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 13
                },
                "end": {
                    "line": 97,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 38
                },
                "end": {
                    "line": 97,
                    "col": 39
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 13
                },
                "end": {
                    "line": 108,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 20
                },
                "end": {
                    "line": 108,
                    "col": 21
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 13
                },
                "end": {
                    "line": 112,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 26
                },
                "end": {
                    "line": 112,
                    "col": 27
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 10
                },
                "end": {
                    "line": 130,
                    "col": 11
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 47
                },
                "end": {
                    "line": 130,
                    "col": 48
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 13
                },
                "end": {
                    "line": 138,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 44
                },
                "end": {
                    "line": 138,
                    "col": 45
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 13
                },
                "end": {
                    "line": 145,
                    "col": 14
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 26
                },
                "end": {
                    "line": 145,
                    "col": 27
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 94,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 77,
                    "col": 2
                },
                "end": {
                    "line": 77,
                    "col": 3
                }
            },
            {
                "start": {
                    "line": 81,
                    "col": 63
                },
                "end": {
                    "line": 81,
                    "col": 64
                }
            },
            {
                "start": {
                    "line": 88,
                    "col": 54
                },
                "end": {
                    "line": 88,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 97,
                    "col": 54
                },
                "end": {
                    "line": 97,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 108,
                    "col": 36
                },
                "end": {
                    "line": 108,
                    "col": 37
                }
            },
            {
                "start": {
                    "line": 112,
                    "col": 54
                },
                "end": {
                    "line": 112,
                    "col": 55
                }
            },
            {
                "start": {
                    "line": 130,
                    "col": 71
                },
                "end": {
                    "line": 130,
                    "col": 72
                }
            },
            {
                "start": {
                    "line": 137,
                    "col": 50
                },
                "end": {
                    "line": 137,
                    "col": 51
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 42
                },
                "end": {
                    "line": 138,
                    "col": 43
                }
            },
            {
                "start": {
                    "line": 138,
                    "col": 71
                },
                "end": {
                    "line": 138,
                    "col": 72
                }
            },
            {
                "start": {
                    "line": 145,
                    "col": 50
                },
                "end": {
                    "line": 145,
                    "col": 51
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 93,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 8,
                    "col": 6
                },
                "end": {
                    "line": 8,
                    "col": 12
                }
            },
            {
                "start": {
                    "line": 33,
                    "col": 44
                },
                "end": {
                    "line": 33,
                    "col": 50
                }
            },
            {
                "start": {
                    "line": 52,
                    "col": 10
                },
                "end": {
                    "line": 52,
                    "col": 30
                }
            },
            {
                "start": {
                    "line": 62,
                    "col": 25
                },
                "end": {
                    "line": 62,
                    "col": 31
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 23,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 92,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 12
                },
                "end": {
                    "line": 42,
                    "col": 22
                }
            },
            {
                "start": {
                    "line": 55,
                    "col": 10
                },
                "end": {
                    "line": 55,
                    "col": 20
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 25,
            "cpu": 25,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 91,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 4,
                    "col": 56
                }
            },
            {
                "start": {
                    "line": 23,
                    "col": 32
                },
                "end": {
                    "line": 23,
                    "col": 43
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 21,
            "cpu": 21,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 90,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 46,
                    "col": 12
                },
                "end": {
                    "line": 46,
                    "col": 17
                }
            },
            {
                "start": {
                    "line": 63,
                    "col": 4
                },
                "end": {
                    "line": 63,
                    "col": 9
                }
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 89,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 130,
                    "col": 74
                },
                "end": {
                    "line": 130,
                    "col": 77
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 74
                },
                "end": {
                    "line": 130,
                    "col": 77
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 74
                },
                "end": {
                    "line": 130,
                    "col": 77
                },
                "type": "string option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 49
                },
                "end": {
                    "line": 130,
                    "col": 77
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 12
                },
                "end": {
                    "line": 130,
                    "col": 77
                },
                "type": "Merlin.Query_type.t list t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 4
                },
                "end": {
                    "line": 130,
                    "col": 77
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 129,
                    "col": 2
                },
                "end": {
                    "line": 130,
                    "col": 78
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 123,
                    "col": 2
                },
                "end": {
                    "line": 130,
                    "col": 78
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 2
                },
                "end": {
                    "line": 130,
                    "col": 78
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 19,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 88,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 138,
                    "col": 25
                },
                "end": {
                    "line": 138,
                    "col": 26
                },
                "type": "string conv",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 25
                },
                "end": {
                    "line": 138,
                    "col": 26
                },
                "type": "string conv",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 19
                },
                "end": {
                    "line": 138,
                    "col": 27
                },
                "type": "string list conv",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 15
                },
                "end": {
                    "line": 138,
                    "col": 43
                },
                "type": "info -> string list t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 15
                },
                "end": {
                    "line": 138,
                    "col": 77
                },
                "type": "string list t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 7
                },
                "end": {
                    "line": 138,
                    "col": 77
                },
                "type": "string list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 2
                },
                "end": {
                    "line": 138,
                    "col": 78
                },
                "type": "string list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 137,
                    "col": 2
                },
                "end": {
                    "line": 138,
                    "col": 78
                },
                "type": "string list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 133,
                    "col": 2
                },
                "end": {
                    "line": 138,
                    "col": 78
                },
                "type": "string list Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 87,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 31,
                    "col": 13
                },
                "end": {
                    "line": 31,
                    "col": 15
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 13
                },
                "end": {
                    "line": 31,
                    "col": 15
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 31,
                    "col": 12
                },
                "end": {
                    "line": 31,
                    "col": 28
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 12
                },
                "end": {
                    "line": 31,
                    "col": 28
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 12
                },
                "end": {
                    "line": 31,
                    "col": 28
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 23,
                    "col": 8
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 53
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 36
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int -> File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 31
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 20,
            "cpu": 20,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 86,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 138,
                    "col": 30
                },
                "end": {
                    "line": 138,
                    "col": 34
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 28
                },
                "end": {
                    "line": 138,
                    "col": 43
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 15
                },
                "end": {
                    "line": 138,
                    "col": 43
                },
                "type": "info -> string list t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 15
                },
                "end": {
                    "line": 138,
                    "col": 77
                },
                "type": "string list t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 7
                },
                "end": {
                    "line": 138,
                    "col": 77
                },
                "type": "string list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 2
                },
                "end": {
                    "line": 138,
                    "col": 78
                },
                "type": "string list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 137,
                    "col": 2
                },
                "end": {
                    "line": 138,
                    "col": 78
                },
                "type": "string list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 133,
                    "col": 2
                },
                "end": {
                    "line": 138,
                    "col": 78
                },
                "type": "string list Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 17,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 85,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 88,
                    "col": 50
                },
                "end": {
                    "line": 88,
                    "col": 53
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 50
                },
                "end": {
                    "line": 88,
                    "col": 55
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 37
                },
                "end": {
                    "line": 88,
                    "col": 55
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 32
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 15
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "string t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 7
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 2
                },
                "end": {
                    "line": 88,
                    "col": 61
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 84,
                    "col": 2
                },
                "end": {
                    "line": 88,
                    "col": 61
                },
                "type": "string Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 1,
            "pp": 0,
            "reader": 1,
            "ppx": 16,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 84,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 42,
                    "col": 34
                },
                "end": {
                    "line": 42,
                    "col": 36
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 25
                },
                "end": {
                    "line": 42,
                    "col": 36
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 42,
                    "col": 8
                },
                "end": {
                    "line": 57,
                    "col": 9
                },
                "type": "Data.Metadata.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 41,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 31
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 37,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 31
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 31
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 16,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 83,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 97,
                    "col": 40
                },
                "end": {
                    "line": 97,
                    "col": 44
                },
                "type": "?deprecated:string ->\n?absent:string ->\n?docs:string ->\n?docv:string -> ?doc:string -> ?env:Cmd.Env.info -> string list -> info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 97,
                    "col": 40
                },
                "end": {
                    "line": 97,
                    "col": 44
                },
                "type": "?deprecated:string ->\n?absent:string ->\n?docs:string ->\n?docv:string -> ?doc:string -> ?env:Cmd.Env.info -> string list -> info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 97,
                    "col": 40
                },
                "end": {
                    "line": 97,
                    "col": 60
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 97,
                    "col": 15
                },
                "end": {
                    "line": 97,
                    "col": 60
                },
                "type": "string option t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 97,
                    "col": 7
                },
                "end": {
                    "line": 97,
                    "col": 60
                },
                "type": "string option Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 97,
                    "col": 2
                },
                "end": {
                    "line": 97,
                    "col": 61
                },
                "type": "string option Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 91,
                    "col": 2
                },
                "end": {
                    "line": 97,
                    "col": 61
                },
                "type": "string option Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 23,
            "cpu": 22,
            "query": 1,
            "pp": 0,
            "reader": 4,
            "ppx": 18,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 82,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 112,
                    "col": 54
                },
                "end": {
                    "line": 112,
                    "col": 55
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 50
                },
                "end": {
                    "line": 112,
                    "col": 55
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 33
                },
                "end": {
                    "line": 112,
                    "col": 55
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 28
                },
                "end": {
                    "line": 112,
                    "col": 60
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 15
                },
                "end": {
                    "line": 112,
                    "col": 60
                },
                "type": "int t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 7
                },
                "end": {
                    "line": 112,
                    "col": 60
                },
                "type": "int Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 2
                },
                "end": {
                    "line": 112,
                    "col": 61
                },
                "type": "int Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 111,
                    "col": 2
                },
                "end": {
                    "line": 112,
                    "col": 61
                },
                "type": "int Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 14,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 81,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 8,
                    "col": 39
                },
                "end": {
                    "line": 8,
                    "col": 54
                },
                "type": "Merlin.frontend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 39
                },
                "end": {
                    "line": 8,
                    "col": 54
                },
                "type": "Merlin.frontend",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 15
                },
                "end": {
                    "line": 8,
                    "col": 54
                },
                "type": "Merlin.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 80,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 15,
                    "col": 34
                },
                "end": {
                    "line": 15,
                    "col": 46
                },
                "type": "float -> int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 34
                },
                "end": {
                    "line": 15,
                    "col": 46
                },
                "type": "float -> int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 34
                },
                "end": {
                    "line": 15,
                    "col": 62
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 62
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 4
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 79,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 30,
                    "col": 25
                },
                "end": {
                    "line": 30,
                    "col": 28
                },
                "type": "Data.Logs.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 25
                },
                "end": {
                    "line": 30,
                    "col": 28
                },
                "type": "Data.Logs.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 25
                },
                "end": {
                    "line": 30,
                    "col": 28
                },
                "type": "Data.Logs.t option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 12
                },
                "end": {
                    "line": 30,
                    "col": 33
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 30,
                    "col": 12
                },
                "end": {
                    "line": 31,
                    "col": 28
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 12
                },
                "end": {
                    "line": 31,
                    "col": 28
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 23,
                    "col": 8
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 53
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 36
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int -> File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 31
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 15,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 78,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 30
                },
                "type": "int -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 30
                },
                "type": "int -> string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 62
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 4
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 77,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 16,
                    "col": 45
                },
                "end": {
                    "line": 16,
                    "col": 47
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 45
                },
                "end": {
                    "line": 16,
                    "col": 47
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 39
                },
                "end": {
                    "line": 16,
                    "col": 47
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 27
                },
                "end": {
                    "line": 16,
                    "col": 47
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 16
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 16,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 4
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 76,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 28,
                    "col": 19
                },
                "end": {
                    "line": 28,
                    "col": 65
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 16
                },
                "end": {
                    "line": 28,
                    "col": 66
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 26,
                    "col": 14
                },
                "end": {
                    "line": 28,
                    "col": 66
                },
                "type": "Data.Logs.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 12
                },
                "end": {
                    "line": 31,
                    "col": 28
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 23,
                    "col": 8
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 53
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 36
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int -> File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 31
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 75,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 145,
                    "col": 50
                },
                "end": {
                    "line": 145,
                    "col": 51
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 46
                },
                "end": {
                    "line": 145,
                    "col": 51
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 33
                },
                "end": {
                    "line": 145,
                    "col": 51
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 28
                },
                "end": {
                    "line": 145,
                    "col": 56
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 15
                },
                "end": {
                    "line": 145,
                    "col": 56
                },
                "type": "int t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 7
                },
                "end": {
                    "line": 145,
                    "col": 56
                },
                "type": "int Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 2
                },
                "end": {
                    "line": 145,
                    "col": 57
                },
                "type": "int Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 141,
                    "col": 2
                },
                "end": {
                    "line": 145,
                    "col": 57
                },
                "type": "int Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 74,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 151,
                    "col": 8
                },
                "end": {
                    "line": 151,
                    "col": 19
                },
                "type": "Merlin.Query_type.t list t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 151,
                    "col": 8
                },
                "end": {
                    "line": 151,
                    "col": 19
                },
                "type": "Merlin.Query_type.t list t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 150,
                    "col": 6
                },
                "end": {
                    "line": 151,
                    "col": 19
                },
                "type": "(string list -> int -> unit) t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 150,
                    "col": 6
                },
                "end": {
                    "line": 151,
                    "col": 32
                },
                "type": "(int -> unit) t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 150,
                    "col": 6
                },
                "end": {
                    "line": 151,
                    "col": 53
                },
                "type": "unit t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 149,
                    "col": 4
                },
                "end": {
                    "line": 151,
                    "col": 54
                },
                "type": "unit Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 148,
                    "col": 2
                },
                "end": {
                    "line": 159,
                    "col": 17
                },
                "type": "unit Cmd.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 73,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 77,
                    "col": 2
                },
                "end": {
                    "line": 77,
                    "col": 3
                },
                "type": "[> `P of string | `S of string ] list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 70,
                    "col": 4
                },
                "end": {
                    "line": 77,
                    "col": 3
                },
                "type": "[> `P of string | `S of string ] list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 68,
                    "col": 2
                },
                "end": {
                    "line": 77,
                    "col": 3
                },
                "type": "[> `P of string | `S of string ] list",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 3,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 72,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 126,
                    "col": 20
                },
                "end": {
                    "line": 126,
                    "col": 56
                },
                "type": "string * Merlin.Query_type.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 126,
                    "col": 9
                },
                "end": {
                    "line": 126,
                    "col": 57
                },
                "type": "Merlin.Query_type.t -> string * Merlin.Query_type.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 125,
                    "col": 7
                },
                "end": {
                    "line": 127,
                    "col": 30
                },
                "type": "(string * Merlin.Query_type.t) list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 124,
                    "col": 4
                },
                "end": {
                    "line": 127,
                    "col": 30
                },
                "type": "Merlin.Query_type.t Cmdliner.Arg.conv",
                "tail": "no"
            },
            {
                "start": {
                    "line": 123,
                    "col": 2
                },
                "end": {
                    "line": 130,
                    "col": 78
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 2
                },
                "end": {
                    "line": 130,
                    "col": 78
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 71,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 81,
                    "col": 40
                },
                "end": {
                    "line": 81,
                    "col": 41
                },
                "type": "(info -> string t) -> info -> string t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 81,
                    "col": 15
                },
                "end": {
                    "line": 81,
                    "col": 69
                },
                "type": "string t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 81,
                    "col": 7
                },
                "end": {
                    "line": 81,
                    "col": 69
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 81,
                    "col": 2
                },
                "end": {
                    "line": 81,
                    "col": 70
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 80,
                    "col": 2
                },
                "end": {
                    "line": 81,
                    "col": 70
                },
                "type": "string Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 3,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 70,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 88,
                    "col": 26
                },
                "end": {
                    "line": 88,
                    "col": 29
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 15
                },
                "end": {
                    "line": 88,
                    "col": 29
                },
                "type": "info -> string t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 15
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "string t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 7
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 2
                },
                "end": {
                    "line": 88,
                    "col": 61
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 84,
                    "col": 2
                },
                "end": {
                    "line": 88,
                    "col": 61
                },
                "type": "string Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 69,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 81,
                    "col": 66
                },
                "end": {
                    "line": 81,
                    "col": 69
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 81,
                    "col": 66
                },
                "end": {
                    "line": 81,
                    "col": 69
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 81,
                    "col": 66
                },
                "end": {
                    "line": 81,
                    "col": 69
                },
                "type": "string option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 81,
                    "col": 42
                },
                "end": {
                    "line": 81,
                    "col": 69
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 81,
                    "col": 15
                },
                "end": {
                    "line": 81,
                    "col": 69
                },
                "type": "string t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 81,
                    "col": 7
                },
                "end": {
                    "line": 81,
                    "col": 69
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 81,
                    "col": 2
                },
                "end": {
                    "line": 81,
                    "col": 70
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 80,
                    "col": 2
                },
                "end": {
                    "line": 81,
                    "col": 70
                },
                "type": "string Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 15,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 68,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 130,
                    "col": 71
                },
                "end": {
                    "line": 130,
                    "col": 72
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 67
                },
                "end": {
                    "line": 130,
                    "col": 72
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 54
                },
                "end": {
                    "line": 130,
                    "col": 72
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 49
                },
                "end": {
                    "line": 130,
                    "col": 77
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 12
                },
                "end": {
                    "line": 130,
                    "col": 77
                },
                "type": "Merlin.Query_type.t list t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 130,
                    "col": 4
                },
                "end": {
                    "line": 130,
                    "col": 77
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 129,
                    "col": 2
                },
                "end": {
                    "line": 130,
                    "col": 78
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 123,
                    "col": 2
                },
                "end": {
                    "line": 130,
                    "col": 78
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 115,
                    "col": 2
                },
                "end": {
                    "line": 130,
                    "col": 78
                },
                "type": "Merlin.Query_type.t list Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 15,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 67,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 138,
                    "col": 67
                },
                "end": {
                    "line": 138,
                    "col": 70
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 67
                },
                "end": {
                    "line": 138,
                    "col": 72
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 51
                },
                "end": {
                    "line": 138,
                    "col": 72
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 46
                },
                "end": {
                    "line": 138,
                    "col": 77
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 15
                },
                "end": {
                    "line": 138,
                    "col": 77
                },
                "type": "string list t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 7
                },
                "end": {
                    "line": 138,
                    "col": 77
                },
                "type": "string list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 138,
                    "col": 2
                },
                "end": {
                    "line": 138,
                    "col": 78
                },
                "type": "string list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 137,
                    "col": 2
                },
                "end": {
                    "line": 138,
                    "col": 78
                },
                "type": "string list Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 133,
                    "col": 2
                },
                "end": {
                    "line": 138,
                    "col": 78
                },
                "type": "string list Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 66,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 145,
                    "col": 53
                },
                "end": {
                    "line": 145,
                    "col": 56
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 53
                },
                "end": {
                    "line": 145,
                    "col": 56
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 53
                },
                "end": {
                    "line": 145,
                    "col": 56
                },
                "type": "string option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 28
                },
                "end": {
                    "line": 145,
                    "col": 56
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 15
                },
                "end": {
                    "line": 145,
                    "col": 56
                },
                "type": "int t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 7
                },
                "end": {
                    "line": 145,
                    "col": 56
                },
                "type": "int Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 145,
                    "col": 2
                },
                "end": {
                    "line": 145,
                    "col": 57
                },
                "type": "int Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 141,
                    "col": 2
                },
                "end": {
                    "line": 145,
                    "col": 57
                },
                "type": "int Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 65,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 108,
                    "col": 36
                },
                "end": {
                    "line": 108,
                    "col": 37
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 108,
                    "col": 27
                },
                "end": {
                    "line": 108,
                    "col": 37
                },
                "type": "string list",
                "tail": "no"
            },
            {
                "start": {
                    "line": 108,
                    "col": 22
                },
                "end": {
                    "line": 108,
                    "col": 42
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 108,
                    "col": 15
                },
                "end": {
                    "line": 108,
                    "col": 42
                },
                "type": "bool t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 108,
                    "col": 7
                },
                "end": {
                    "line": 108,
                    "col": 42
                },
                "type": "bool Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 108,
                    "col": 2
                },
                "end": {
                    "line": 108,
                    "col": 43
                },
                "type": "bool Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 100,
                    "col": 2
                },
                "end": {
                    "line": 108,
                    "col": 43
                },
                "type": "bool Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 64,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 88,
                    "col": 57
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 57
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 57
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "string option",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 32
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 15
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "string t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 7
                },
                "end": {
                    "line": 88,
                    "col": 60
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 88,
                    "col": 2
                },
                "end": {
                    "line": 88,
                    "col": 61
                },
                "type": "string Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 84,
                    "col": 2
                },
                "end": {
                    "line": 88,
                    "col": 61
                },
                "type": "string Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 15,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 63,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 112,
                    "col": 28
                },
                "end": {
                    "line": 112,
                    "col": 32
                },
                "type": "?deprecated:string ->\n?absent:string ->\n?docs:string ->\n?docv:string -> ?doc:string -> ?env:Cmd.Env.info -> string list -> info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 28
                },
                "end": {
                    "line": 112,
                    "col": 32
                },
                "type": "?deprecated:string ->\n?absent:string ->\n?docs:string ->\n?docv:string -> ?doc:string -> ?env:Cmd.Env.info -> string list -> info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 28
                },
                "end": {
                    "line": 112,
                    "col": 60
                },
                "type": "info",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 15
                },
                "end": {
                    "line": 112,
                    "col": 60
                },
                "type": "int t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 7
                },
                "end": {
                    "line": 112,
                    "col": 60
                },
                "type": "int Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 112,
                    "col": 2
                },
                "end": {
                    "line": 112,
                    "col": 61
                },
                "type": "int Term.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 111,
                    "col": 2
                },
                "end": {
                    "line": 112,
                    "col": 61
                },
                "type": "int Term.t",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 62,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 28,
                    "col": 45
                },
                "end": {
                    "line": 28,
                    "col": 59
                },
                "type": "File.t -> Yojson.Safe.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 45
                },
                "end": {
                    "line": 28,
                    "col": 59
                },
                "type": "File.t -> Yojson.Safe.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 45
                },
                "end": {
                    "line": 28,
                    "col": 64
                },
                "type": "Yojson.Safe.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 28,
                    "col": 19
                },
                "end": {
                    "line": 28,
                    "col": 65
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 27,
                    "col": 16
                },
                "end": {
                    "line": 28,
                    "col": 66
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 26,
                    "col": 14
                },
                "end": {
                    "line": 28,
                    "col": 66
                },
                "type": "Data.Logs.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 25,
                    "col": 12
                },
                "end": {
                    "line": 31,
                    "col": 28
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 23,
                    "col": 8
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 53
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 36
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int -> File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 31
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 4,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 61,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 15,
                    "col": 60
                },
                "end": {
                    "line": 15,
                    "col": 62
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 50
                },
                "end": {
                    "line": 15,
                    "col": 62
                },
                "type": "float",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 34
                },
                "end": {
                    "line": 15,
                    "col": 62
                },
                "type": "int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 17
                },
                "end": {
                    "line": 15,
                    "col": 62
                },
                "type": "string",
                "tail": "no"
            },
            {
                "start": {
                    "line": 15,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 14,
                    "col": 8
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 11,
                    "col": 4
                },
                "end": {
                    "line": 16,
                    "col": 48
                },
                "type": "Fpath.t",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 60,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 33,
                    "col": 12
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 23,
                    "col": 8
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 53
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 36
                },
                "end": {
                    "line": 35,
                    "col": 30
                },
                "type": "float * int -> File.t * Merlin.Query_type.t -> float * int",
                "tail": "no"
            },
            {
                "start": {
                    "line": 22,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 31
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 19,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 18,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 10,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 9,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 8,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 6,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 5,
                    "col": 4
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 69
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 57
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 45
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 40
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "bool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 31
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 22
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            },
            {
                "start": {
                    "line": 4,
                    "col": 10
                },
                "end": {
                    "line": 65,
                    "col": 13
                },
                "type": "string ->\nstring ->\nstring option ->\nbool -> int -> Merlin.Query_type.t list -> string list -> int -> unit",
                "tail": "no"
            }
        ],
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 59,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 121,
                    "col": 6
                },
                "end": {
                    "line": 121,
                    "col": 52
                }
            },
            "(match all_query_types ^ \". Defaults to all of them.\" with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 15,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 15,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 58,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 57,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 56,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 137,
                    "col": 21
                },
                "end": {
                    "line": 137,
                    "col": 33
                }
            },
            "(match (\"ml\", \"ml\") with | (_, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 15,
            "query": 2,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 55,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 81,
                    "col": 63
                },
                "end": {
                    "line": 81,
                    "col": 64
                }
            },
            "(match [] with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 54,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: float",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 53,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 88,
                    "col": 39
                },
                "end": {
                    "line": 88,
                    "col": 48
                }
            },
            "(match \"project\" with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 15,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 52,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 14,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 51,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 7,
                    "col": 2
                },
                "end": {
                    "line": 65,
                    "col": 13
                }
            },
            "match let merlin_path = Fpath.v merlin_path in\n      let merlin = Merlin.make merlin_path merlin_frontend in\n      let proj_path = Fpath.v (Unix.realpath proj_dir) in\n      let data_dir =\n        match data_dir with\n        | Some dir -> Fpath.v dir\n        | None ->\n            let proj_name = Fpath.basename proj_path in\n            let ts = Int.to_string (Int.of_float (Unix.time ())) in\n            Fpath.v (\"data/\" ^ (proj_name ^ (\"+\" ^ ts))) in\n      let data = Data.init data_dir in\n      match File.get_files ~extensions proj_path with\n      | Ok files ->\n          let side_effectively_add_data (qt, id_counter) (file, query_type) =\n            match Samples.generate ~sample_size ~id_counter file query_type\n            with\n            | None ->\n                let log =\n                  Data.Logs.Warning\n                    (Format.sprintf\n                       (CamlinternalFormatBasics.Format\n                          ((CamlinternalFormatBasics.String_literal\n                              (\"File \",\n                                (CamlinternalFormatBasics.String\n                                   (CamlinternalFormatBasics.No_padding,\n                                     (CamlinternalFormatBasics.String_literal\n                                        (\" couldn't be parsed and was ignored.\\n\",\n                                          CamlinternalFormatBasics.End_of_format)))))),\n                            \"File %s couldn't be parsed and was ignored.\\n\"))\n                       (Yojson.Safe.to_string ?buf:None ?len:None ?suf:None\n                          ?std:None (File.to_yojson file))) in\n                (Data.update ?perf:None ?resp:None ?cmd:None ?log:(Some log)\n                   ?metadata:None data;\n                 (qt, id_counter))\n            | Some (samples, new_id_counter) ->\n                ((Samples.add_analysis_to_data ~merlin ~query_time:qt\n                    ~repeats_per_sample data samples), new_id_counter) in\n          let (total_query_time, _last_sample_id) =\n            List.fold_over_product ~l1:files ~l2:query_types ~init:(0., 0)\n              side_effectively_add_data in\n          let metadata =\n            let total_time = Sys.time () in\n            let source_code_commit_sha =\n              match Data.Metadata.get_commit_sha ~proj_dir with\n              | Ok sha -> Some sha\n              | Error log ->\n                  (Data.update ?perf:None ?resp:None ?cmd:None\n                     ?log:(Some log) ?metadata:None data;\n                   None) in\n            let date = Data.Metadata.get_date () in\n            {\n              Data.Metadata.query_time = total_query_time;\n              Data.Metadata.total_time = total_time;\n              Data.Metadata.date = date;\n              Data.Metadata.source_code_commit_sha = source_code_commit_sha;\n              Data.Metadata.merlin = merlin\n            } in\n          (Data.update ?perf:None ?resp:None ?cmd:None ?log:None\n             ?metadata:(Some metadata) data;\n           Data.dump data;\n           Merlin.stop_server merlin)\n      | Error (`Msg err) ->\n          (Printf.eprintf\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String\n                    (CamlinternalFormatBasics.No_padding,\n                      CamlinternalFormatBasics.End_of_format)), \"%s\")) err;\n           exit 50)\nwith\n| () -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 50,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 14,
                    "col": 24
                },
                "end": {
                    "line": 14,
                    "col": 48
                }
            },
            "match Fpath.basename proj_path with | \"\" -> _ | _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 49,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 25,
                    "col": 12
                },
                "end": {
                    "line": 31,
                    "col": 28
                }
            },
            "(match let log =\n        Data.Logs.Warning\n          (Format.sprintf\n             (CamlinternalFormatBasics.Format\n                ((CamlinternalFormatBasics.String_literal\n                    (\"File \",\n                      (CamlinternalFormatBasics.String\n                         (CamlinternalFormatBasics.No_padding,\n                           (CamlinternalFormatBasics.String_literal\n                              (\" couldn't be parsed and was ignored.\\n\",\n                                CamlinternalFormatBasics.End_of_format)))))),\n                  \"File %s couldn't be parsed and was ignored.\\n\"))\n             (Yojson.Safe.to_string ?buf:None ?len:None ?suf:None ?std:None\n                (File.to_yojson file))) in\n      Data.update ?perf:None ?resp:None ?cmd:None ?log:(Some log)\n        ?metadata:None data;\n      (qt, id_counter)\nwith\n| (_, _) -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 48,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 47,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 11,
                    "col": 10
                },
                "end": {
                    "line": 11,
                    "col": 18
                }
            },
            "(match data_dir with | None -> _ | Some _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 15,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 46,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on case",
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 45,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 138,
                    "col": 71
                },
                "end": {
                    "line": 138,
                    "col": 72
                }
            },
            "(match [] with | [] -> _ | _::_ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 44,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 43,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 42,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 117,
                    "col": 6
                },
                "end": {
                    "line": 118,
                    "col": 27
                }
            },
            "match (String.concat \", \")\n        (List.map Merlin.Query_type.to_string Merlin.Query_type.all)\nwith\n| \"\" -> _\n| _ -> _"
        ],
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 41,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 64,
                    "col": 21
                },
                "end": {
                    "line": 64,
                    "col": 25
                }
            },
            "(match \"%s\" with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 40,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: info",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 39,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 62,
                    "col": 6
                },
                "end": {
                    "line": 62,
                    "col": 31
                }
            },
            "(match Merlin.stop_server merlin with | () -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 38,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 126,
                    "col": 21
                },
                "end": {
                    "line": 126,
                    "col": 51
                }
            },
            "(match Merlin.Query_type.to_string qt with | \"\" -> _ | _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 37,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 36,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: info",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 35,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 34,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on non-destructible type: t",
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 33,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 19,
            "cpu": 19,
            "query": 0,
            "pp": 0,
            "reader": 5,
            "ppx": 14,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 32,
    "merlin_reply": {
        "class": "error",
        "value": "Destruct not allowed on arrow type",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 31,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 12,
                    "col": 6
                },
                "end": {
                    "line": 12,
                    "col": 14
                }
            },
            "Some \"\" | Some _"
        ],
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 13,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 30,
    "merlin_reply": {
        "class": "return",
        "value": [
            {
                "start": {
                    "line": 28,
                    "col": 19
                },
                "end": {
                    "line": 28,
                    "col": 65
                }
            },
            "(match Yojson.Safe.to_string ?buf:None ?len:None ?suf:None ?std:None\n        (File.to_yojson file)\nwith\n| \"\" -> _\n| _ -> _)"
        ],
        "notifications": [],
        "timing": {
            "clock": 18,
            "cpu": 18,
            "query": 0,
            "pp": 0,
            "reader": 4,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 29,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 18,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 28,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.mli",
            "pos": {
                "line": 63,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 27,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/merlin.ml",
            "pos": {
                "line": 104,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 15,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 26,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 5,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 25,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 24,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/cmdliner/cmdliner.mli",
            "pos": {
                "line": 908,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 23,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 99,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 22,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/cmdliner/cmdliner.mli",
            "pos": {
                "line": 1011,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 21,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/int.ml",
            "pos": {
                "line": 52,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 3,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 20,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.mli",
            "pos": {
                "line": 5,
                "col": 27
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 19,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 18,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 15,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 18,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 22,
                "col": 54
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 17,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/samples.ml",
            "pos": {
                "line": 59,
                "col": 4
            }
        },
        "notifications": [],
        "timing": {
            "clock": 17,
            "cpu": 17,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 3,
            "error": 0
        }
    }
}
{
    "sample_id": 16,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 15,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 50,
                "col": 12
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 14,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/cmdliner/cmdliner.mli",
            "pos": {
                "line": 908,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 13,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 49,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 12,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/cmdliner/cmdliner.mli",
            "pos": {
                "line": 180,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 11,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/cmdliner/cmdliner.mli",
            "pos": {
                "line": 1086,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 15,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 10,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 9,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 126,
                "col": 14
            }
        },
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 8,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 7,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/cmdliner/cmdliner.mli",
            "pos": {
                "line": 180,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 6,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/data.mli",
            "pos": {
                "line": 63,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 1,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 5,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/cmdliner/cmdliner.mli",
            "pos": {
                "line": 908,
                "col": 2
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 14,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 4,
    "merlin_reply": {
        "class": "return",
        "value": "Not a valid identifier",
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 14,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 3,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 8,
                "col": 6
            }
        },
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 3,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 2,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 42,
                "col": 12
            }
        },
        "notifications": [],
        "timing": {
            "clock": 15,
            "cpu": 15,
            "query": 1,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 1,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/Documents/Tarides/projects/merl-an/bin/main.ml",
            "pos": {
                "line": 4,
                "col": 45
            }
        },
        "notifications": [],
        "timing": {
            "clock": 14,
            "cpu": 13,
            "query": 0,
            "pp": 0,
            "reader": 0,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}
{
    "sample_id": 0,
    "merlin_reply": {
        "class": "return",
        "value": {
            "file": "/home/sonja/.opam/5.0.0~alpha0/lib/ocaml/stdlib.ml",
            "pos": {
                "line": 246,
                "col": 0
            }
        },
        "notifications": [],
        "timing": {
            "clock": 16,
            "cpu": 16,
            "query": 0,
            "pp": 0,
            "reader": 2,
            "ppx": 13,
            "typer": 0,
            "error": 0
        }
    }
}